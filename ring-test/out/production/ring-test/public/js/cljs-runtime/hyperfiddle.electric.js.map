{"version":3,"sources":["hyperfiddle/electric.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","js/hyperfiddle.electric.Pending","this","other","js/hyperfiddle.electric.Failure","cljs.core._EQ_","js/hyperfiddle.electric.FailureInfo","cljs.core/ExceptionInfo","hyperfiddle.electric/eval","hyperfiddle.electric.impl.runtime/eval","hyperfiddle.electric/hook","hyperfiddle.electric.impl.runtime/hook","hyperfiddle.electric/bind","hyperfiddle.electric.impl.runtime/bind","hyperfiddle.electric/with","hyperfiddle.electric.impl.runtime/with","hyperfiddle.electric/pair","c","s","cljs.core.partial","cr32937-state","cr32937-place-0","cr32937-place-1","cr32937-place-2","cr32937-place-3","cr32937-place-4","cr32937-place-5","cljs.core/IMap","cr32937-place-6","cr32937-place-7","cr32937-place-8","cr32937-place-9","cr32937-place-10","cr32937-place-11","cr32937-place-12","cr32937-place-13","cr32937-place-14","cr32937-place-15","cr32937-place-16","cr32937-place-17","cr32937-place-18","cr32937-place-19","cr32937-place-20","cr32937-block-1","missionary.core/park","cr32937-exception","e33000","cr32937-place-21","missionary.core/unpark","e33034","cloroutine.impl/coroutine","G__33035","cljs.core.object_array","cr32937-block-0","missionary.core/sp-run","fexpr__33001","missionary.core/dfv","fexpr__33002","G__33031","G__33032","G__33033","fexpr__33030","missionary.core/join","G__33014","G__33015","fexpr__33013","x","cr32940-state","cr32940-place-0","cr32940-block-1","e32946","e33007","cr32940-exception","cr32940-place-1","cr32940-place-2","cr32940-place-3","cr32940-place-4","e32947","e33008","G__32950","cr32940-block-0","G__32949","fexpr__32948","G__33010","fexpr__33009","!","G__33012","fexpr__33011","p1__32936#","G__33027","G__33028","G__33029","fexpr__33026","cr32954-state","cr32954-place-0","cr32954-block-1","e32960","e33020","cr32954-exception","cr32954-place-1","cr32954-place-2","cr32954-place-3","cr32954-place-4","e32961","e33021","G__32964","cr32954-block-0","G__32963","fexpr__32962","G__33023","fexpr__33022","G__33025","fexpr__33024","hyperfiddle.electric/failure?","var_args","G__33038","hyperfiddle.electric/task->cp","js/Error","!x","hyperfiddle.electric.task__GT_cp","pending","cr33039-state","cr33039-place-0","cr33039-block-1","cr33039-exception","e33042","cr33039-place-1","e33043","G__33044","cr33039-block-0","missionary.core/ap-run","missionary.core.reductions","unused__13656__auto__","self__","G__33046","args33045","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","hyperfiddle.electric/Clock","hyperfiddle.electric/->Clock","raf","callback","terminator","_","js/window","hyperfiddle.electric/<clock","n","t","cancel","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","hyperfiddle.electric/-get-system-time-ms","p__33048","vec__33049","cljs.core.nth","seq33047","self__5755__auto__","cljs.core/seq","js/Date.now","hyperfiddle.electric/-listen","node","typ","f","opts","hyperfiddle.electric/event*","f!","missionary.core/observe","p1__33052#","G__33053","cljs.core/clj->js","missionary.core/relieve","hyperfiddle.electric/<dom-visibility-state","js/document","cljs.core/identity","missionary.core.latest","hyperfiddle.electric/-check-fn-arity!","name","expected","actual","cljs.core.not_EQ_","cljs.core.ex_info","or__5045__auto__","cljs.core.pr_str","hyperfiddle.electric/watchable?","cljs.core/native-satisfies?","cljs.core/IWatchable","hyperfiddle.electric/checked-watch","missionary.core/watch","hyperfiddle.electric/-invalid-watch-usage-message","G__33057","hyperfiddle.electric/debounce-discreet","delay","flow","hyperfiddle.electric.debounce_discreet","init","cr33058-state","cr33058-place-12","cr33058-block-12","cr33058-exception","e33076","cr33058-place-1","cr33058-place-2","cr33058-place-3","cr33058-block-2","e33077","cr33058-place-8","e33078","cr33058-block-4","cr33058-place-13","cr33058-place-14","cr33058-block-7","cr33058-block-6","e33079","cr33058-block-11","e33080","cr33058-place-9","cr33058-place-10","cr33058-place-11","cr33058-block-9","cr33058-block-5","e33081","cr33058-place-22","e33082","cr33058-place-16","cr33058-place-17","e33083","cr33058-place-21","e33084","cr33058-place-0","cr33058-block-1","missionary.core/switch","e33085","cr33058-place-15","cr33058-block-8","e33086","cr33058-place-4","cr33058-place-5","cr33058-place-6","cr33058-place-7","cr33058-block-3","e33087","cr33058-place-18","cr33058-place-19","cr33058-place-20","missionary.core/none","cr33058-block-10","missionary.core/fork","e33091","G__33092","cr33058-block-0","G__33089","G__33090","fexpr__33088","missionary.core/sleep","js/missionary.Cancelled","hyperfiddle.electric/throttle","dur",">in","cr33093-state","cr33093-place-16","cr33093-place-17","cr33093-place-18","cr33093-block-5","cr33093-exception","e33114","cr33093-place-12","cr33093-place-23","cr33093-place-24","cr33093-place-25","cr33093-place-26","cr33093-place-27","e33117","cr33093-place-14","e33118","cr33093-place-0","cr33093-place-1","cr33093-place-2","cr33093-place-3","cr33093-place-4","cr33093-block-1","e33119","cr33093-place-22","cr33093-block-8","e33123","cr33093-place-5","cr33093-place-6","cr33093-place-7","missionary.core/seed","cr33093-place-8","cljs.core/range","cr33093-place-9","cr33093-place-10","cr33093-place-11","cr33093-block-2","e33124","cr33093-place-15","e33129","cr33093-place-13","G__33131","cr33093-block-3","cr33093-block-4","cr33093-block-7","e33130","cr33093-place-19","cr33093-place-20","cr33093-place-21","cr33093-block-6","e33132","G__33133","cr33093-block-0","G__33121","G__33122","fexpr__33120","G__33126","fexpr__33125","G__33128","fexpr__33127","G__33116","fexpr__33115","hyperfiddle.electric/*http-request*"],"sourcesContent":["(ns hyperfiddle.electric\n  (:refer-clojure :exclude [eval def defn fn for empty? partial])\n  (:require [clojure.core :as cc]\n            [contrib.cljs-target :refer [do-browser]]\n            [hyperfiddle.electric.impl.compiler :as c]\n            [hyperfiddle.electric.impl.runtime :as r]\n            [hyperfiddle.electric.impl.for :refer [map-by]]\n            #?(:clj [hyperfiddle.rcf.analyzer :as ana])     ; todo remove\n            [missionary.core :as m]\n            #?(:cljs [hyperfiddle.electric-client])\n            [hyperfiddle.electric.impl.io :as io]\n            [hyperfiddle.electric.debug :as dbg])\n  #?(:cljs (:require-macros [hyperfiddle.electric :refer [def defn fn boot for for-by local run debounce wrap on-unmount]]))\n  (:import #?(:clj (clojure.lang IDeref))\n           (hyperfiddle.electric Pending Failure FailureInfo)\n           (missionary Cancelled)))\n\n;; Equality semantics for Failure and Pending\n;; For JVM, defined in java class.\n#?(:cljs\n   (extend-type Pending\n     IEquiv\n     (-equiv [this other]\n       (instance? Pending other))))\n\n#?(:cljs\n   (extend-type Failure\n     IEquiv\n     (-equiv [this other]\n       (and (instance? Failure other)\n            (= (.-error this) (.-error other))))))\n\n#?(:cljs (set! (.. FailureInfo -prototype -__proto__) cljs.core/ExceptionInfo.prototype))\n#?(:cljs\n   (extend-type FailureInfo\n     IEquiv\n     (-equiv [this other]\n       (and (instance? FailureInfo other)\n            (= (.-cause this) (.-cause other))))))\n\n#?(:clj\n   (do\n     ;; Optionally, tell RCF not to rewrite Electric programs.\n     (defmethod ana/macroexpand-hook `hyperfiddle.electric/run [the-var form env args] (reduced `(hyperfiddle.electric/run ~@args))) ; optional\n     ;;(defmethod ana/macroexpand-hook `hyperfiddle.electric/run2 [_the-var _form _env args] `(hyperfiddle.electric/run2 ~@args))\n\n     ;; Don't expand cc/binding (prevent infinite loop). Explicit implicit do\n     (defmethod ana/macroexpand-hook 'clojure.core/binding [_the-var _form _env [bindings & body]] (reduced `(binding ~bindings (do ~@body))))\n     (defmethod ana/macroexpand-hook 'cljs.core/binding [_the-var _form _env [bindings & body]] (reduced `(binding ~bindings (do ~@body))))))\n\n(def eval \"Takes a resolve map and a program, returns a booting function.\n  The booting function takes\n  * as first argument a function Any->Task[Unit] returned task writes the value on the wire.\n  * as second argument a flow producing the values read on the wire.\n  and returning a task that runs the local reactor.\"\n  r/eval)\n\n(def hook r/hook)\n(def bind r/bind) ; for when you want to spawn a e/fn without a new\n(def with r/with)\n\n(cc/defn pair [c s]\n  (m/sp\n    (let [s->c (m/dfv)\n          c->s (m/dfv)]\n      (m/?\n        (m/join {}\n          (s (cc/fn [x] (m/sp ((m/? s->c) x)))\n            (cc/fn [!] (c->s !) #()))\n          (c (cc/fn [x] (m/sp ((m/? c->s) x)))\n            (cc/fn [!] (s->c !) #())\n            #(throw %)))))))\n\n(defmacro local\n  \"Single peer loopback system without whitelist. Returns boot task.\"\n  [& body]\n                                        ; use compiler (client) because no need for exports\n  (let [[client server] (c/analyze &env `(do ~@body))]\n    `(pair ~(r/emit (gensym) client) ~(r/emit (gensym) server))))\n\n(defmacro run \"test entrypoint without whitelist.\" [& body]\n  `((local ~@body) (cc/fn [_#]) (cc/fn [_#])))\n\n(cc/defn failure? [x] (instance? Failure x))\n\n#?(:clj\n   (cc/defn -offload [thunk executor]\n     (->> (m/ap (m/? (m/via executor (thunk)))) ; run once\n       (m/reductions {} (Failure. (Pending.)))\n       (m/relieve {}))))\n\n(defmacro offload\n  \"run a blocking function (i.e. query) on threadpool specified by `executor` (i.e. m/blk or m/cpu).\nIO-bound fns should use m/blk, which is the default. Compute-bound fns should pass m/cpu. Custom\nexecutors are allowed (i.e. to control max concurrency, timeouts etc). Currently JVM only.\"\n  ([f! executor] `(new (-offload ~f! ~executor)))\n  ; no varadic arity, user should explicitly state unit of work, so no ambiguity about concurrent tasks\n  ([f!] `(new (-offload ~f! m/blk))))\n\n(defmacro ^:deprecated wrap \"Deprecated. Use `offload` instead.\" [& body] `(offload #(do ~@body)))\n\n; Should these be in missionary?\n;(def chan-read! contrib.missionary-contrib/chan-read!)\n;(def chan->ap contrib.missionary-contrib/chan->ap)\n;(def chan->task contrib.missionary-contrib/chan->task)\n;(def chan->cp contrib.missionary-contrib/chan->cp)\n\n(cc/defn task->cp ; leo to review\n  ([!x] (task->cp !x (Failure. (Pending.)))) ; note Electric dependency\n  ([!x pending] (->> (m/ap (m/? !x)) (m/reductions {} pending))))\n\n; Moved to contrib.missionary-contrib\n;(defmacro use-channel ;; TODO rename\n;  ([chan] `(use-channel nil ~chan))\n;  ([init chan] `(new (m/reductions {} ~init (chan->ap ~chan)))))\n\n#?(:cljs\n   (deftype Clock [^:mutable ^number raf\n                   ^:mutable callback\n                   terminator]\n     IFn                                                    ; cancel\n     (-invoke [_]\n       (if (zero? raf)\n         (set! callback nil)\n         (do (.cancelAnimationFrame js/window raf)\n             (terminator))))\n     IDeref                                                 ; sample\n     (-deref [_]\n       ; lazy clock, only resets once sampled\n       (if (nil? callback)\n         (terminator)\n         (set! raf (.requestAnimationFrame js/window callback))) ; RAF not called until first sampling\n       ::tick)))\n\n; cc def, must be above defmacro def\n(def ^:no-doc <clock \"lazy & efficient logical clock that schedules no work unless sampled\"\n  #?(:cljs (cc/fn [n t]\n             (let [cancel (->Clock 0 nil t)]\n               (set! (.-callback cancel)\n                 (cc/fn [_] (set! (.-raf cancel) 0) (n)))\n               (n) cancel))\n     \n     ; 120 hz server, careful this impacts bandwidth in demo-two-clocks\n     ; typical UI animation rate is 60 or 120hz, no point in going higher \n     :clj (m/ap (loop [] (m/amb nil (do (m/? (m/sleep (/ 1000 120))) (recur)))))\n     #_(m/ap (m/? (m/sleep 1 (m/?> (m/seed (repeat nil))))))))\n\n;; --------------------------------------\n\n(defmacro def\n  ([symbol] `(hyperfiddle.electric/def ~symbol ::c/unbound))\n  ([symbol docstring init]\n   (assert (string? docstring))\n   (#'def &form &env (vary-meta symbol assoc :doc docstring) init))\n  ([symbol init]\n   ;; GG: Expand to an unbound var with body stored in ::c/node meta.\n   ;;     Clojure compiler will analyze vars metas, which would analyze form as clojure, so we quote it.\n   ;;     ClojureScript do not have vars at runtime and will not analyze or emit vars meta. No need to quote.\n   `(def ~(vary-meta symbol assoc ::c/node (if (:js-globals &env) init `(quote ~init))))))\n\n(cc/defn -get-system-time-ms [& [_]] #?(:clj (System/currentTimeMillis) :cljs (js/Date.now)))\n\n; DOM event utilities promoted due to visibility-state being critical\n#?(:cljs (cc/defn -listen [node typ f opts] (.addEventListener node typ f opts) #(.removeEventListener node typ f)))\n#?(:cljs (cc/defn event* [node typ f! opts] ; f! is discrete\n           (->> (m/observe (cc/fn [!] \n                             (! nil)\n                             (-listen node typ #(-> % f! !) (clj->js opts))))\n             (m/relieve {}))))\n\n(def <dom-visibility-state #?(:cljs (do-browser (->> (event* js/document \"visibilitychange\" identity {})\n                                                  (m/latest (cc/fn [_] (.-visibilityState js/document)))))))\n\n(hyperfiddle.electric/def dom-visibility-state (client (new (identity <dom-visibility-state)))) ; starts Pending on server\n\n(hyperfiddle.electric/def system-time-ms \"ms since 1970 Jan 1\" \n  (if (= \"visible\" dom-visibility-state)\n    (new (m/sample -get-system-time-ms <clock))\n    (throw (Pending.)))) ; tab is hidden, no clock. (This guards NPEs in userland)\n\n(hyperfiddle.electric/def system-time-secs \"seconds since 1970 Jan 1\" (/ system-time-ms 1000.0))\n\n(cc/defn -check-fn-arity! [name expected actual]\n  (when (not= expected actual)\n    (throw (ex-info (str \"You called \" (or name (pr-str ::unnamed-efn)) \", a \" expected \"-arg e/fn with \" actual \" arguments.\")\n             {:name name}))))\n\n;; TODO self-refer\n(defmacro fn [name? & [args & body]]\n  (let [[name? args body] (if (symbol? name?) [name? args body]\n                              [nil name? (cons args body)])]\n    (if (bound? #'c/*env*)\n      `(::c/closure\n        ;; Beware, `do` is implemented with `m/latest`, which evaluates\n        ;; arguments in parallel. The e/fn body will be called even if arity is\n        ;; incorrect, then the arity exception will be thrown. This might be\n        ;; confusing to users in presence of effects. Same as `(do (assert\n        ;; false) (prn 42))`: 42 is printed anyway. This is a broader question\n        ;; than \"what should the semantics of e/fn should be\", so we decided to\n        ;; be consistent with the current model and to not introduce a specific\n        ;; behavior for e/fn.\n        (do (-check-fn-arity! '~name? ~(count args) c/%arity)\n            (binding [c/rec (::c/closure (let [~@(interleave args c/arg-sym)] ~@body))]\n              (new c/rec ~@(take (count args) c/arg-sym))))\n        ~{::dbg/name name?, ::dbg/args args, ::dbg/type (or (::dbg/type (meta name?)) :reactive-fn)\n          ::dbg/meta (merge (select-keys (meta &form) [:file :line])\n                       (select-keys (meta name?) [:file :line]))})\n      `(throw (ex-info \"Invalid e/fn in Clojure code block (use from Electric code only)\" ~(into {} (meta &form)))))))\n\n; syntax quote doesn't qualify special forms like 'def\n(defmacro defn [sym & fdecl]\n  (let [[_defn sym' & _] (macroexpand `(cc/defn ~sym ~@fdecl))] ; GG: docstring support\n    `(hyperfiddle.electric/def ~sym' (hyperfiddle.electric/fn ~(vary-meta sym' merge {::dbg/type :reactive-defn}\n                                                                          (meta &form)\n                                                                          (meta sym'))\n                                                              ~@(if (string? (first fdecl)) ; GG: skip docstring\n                                         (rest fdecl)\n                                         fdecl)))))\n\n(defmacro for-by [kf bindings & body]\n  (if-some [[s v & bindings] (seq bindings)]\n    `(let [xs# ~v]\n       (new (r/bind map-by ~kf\n              ~(->> body\n                 (list* `for-by kf bindings)\n                 (list `let [s (first c/arg-sym)])\n                 (list `fn [])\n                 (list `cc/partial (list ::c/inject (first c/arg-sym))))\n              (::c/lift xs#))))\n    (cons `do body))) ; todo, buggy: (e/for [x []] (println 42)) should not print\n\n(defmacro for [bindings & body]\n  `(hyperfiddle.electric/for-by identity ~bindings ~@body))\n\n(cc/defn ^:no-doc watchable? [x]\n  #?(:clj (instance? clojure.lang.IRef x)\n     :cljs (satisfies? IWatchable x)))\n\n(cc/defn ^:no-doc checked-watch [!x]\n  (assert (watchable? !x) \"Provided argument is not Watchable.\")\n  (m/watch !x))\n\n(def -invalid-watch-usage-message \"Invalid e/watch (use from Electric code only, maybe you forgot a e/def?)\")\n\n(defmacro watch \"for tutorials (to delay teaching constructor syntax); m/watch is also idiomatic\"\n  [!x]\n  (if (bound? #'c/*env*)\n    `(new (checked-watch ~!x))\n    `(throw (ex-info -invalid-watch-usage-message ~(into {} (meta &form))))))\n\n(cc/defn debounce-discreet\n  ([delay flow] (debounce-discreet delay nil flow))\n  ([delay init flow] (m/reductions {} init (m/ap (let [x (m/?< flow)]\n                                                   (try (m/? (m/sleep delay x))\n                                                        (catch Cancelled _ (m/amb))))))) )\n\n(defmacro ^:deprecated debounce ; immoral? introduces avoidable delays\n  \"Debounce a continous flow by `delay` milliseconds.\"\n  [delay flow]\n  `(new (->> (fn [] ~flow)\n             (debounce-discreet ~delay)\n             (m/relieve {}))))\n\n(cc/defn throttle [dur >in] ; in CLJ, wrong number of args (1) passed to: hyperfiddle.electric-ui4/long --- ?????\n  (m/ap\n    (let [x (m/?> (m/relieve {} >in))]\n      (m/amb x (do (m/? (m/sleep dur)) (m/amb))))))\n\n(defmacro ^:deprecated remote [& body]\n  (if (= 1 (count body))\n    `(unquote-splicing ~@body)\n    `(unquote-splicing (do ~@body))))\n\n(defmacro client [& body]\n  (if (bound? #'c/*env*)\n    `(::c/client (do ~@body) ~(assoc (meta &form) ::dbg/type :transfer, ::dbg/name ::client))\n    `(throw (ex-info \"Invalid e/client in Clojure code block (use from Electric code only)\" ~(into {} (meta &form))))))\n\n(defmacro server [& body]\n  (if (bound? #'c/*env*)\n    `(::c/server (do ~@body) ~(assoc (meta &form) ::dbg/type :transfer, ::dbg/name ::server))\n    `(throw (ex-info \"Invalid e/server in Clojure code block (use from Electric code only)\" ~(into {} (meta &form))))))\n\n(defmacro discard\n  \"Silence \\\"Unserializable reference transfer\\\"; inlining `(do ... nil)` is idiomatic as well\"\n  [& body] `(do ~@body nil))\n\n(hyperfiddle.electric/def trace \"In a `catch` block, bound by the runtime to the current stacktrace. An Electric stacktrace is an ExceptionInfo. Use `hyperfiddle.electric.debug/stack-trace` to get a string representation.\" nil)\n\n(defmacro lexical-env \"Return a map containing lexical bindings\" []\n  (let [env (if (:js-globals &env) (:locals &env) &env)]\n    (with-meta\n      `{:env ~(reduce-kv (cc/fn [r k v] (assoc r (list 'quote k) k)) (empty env) env)}\n      (meta &form))))\n\n(defmacro with-cycle\n  \"evaluates body with symbol s bound to the previous result of the body evaluation.\n  the first evaluation binds s to i.\"\n  [[s i] & body]\n  `(let [a# (atom ~i) ~s (hyperfiddle.electric/watch a#)]\n     (reset! a# (do ~@body))))\n\n(defmacro partial-dynamic\n  \"Return a function calling given function `f` with given dynamic environment.\"\n  [bindings f]\n  `(cc/fn [& args#] (binding ~bindings (apply ~f args#))))\n\n(defmacro partial\n  \"Like `cc/partial` for reactive functions. Requires the target function\n  arity (`argc`) until reactive function supports variadic arguments.\n\n  e.g. (new (partial 2 (e/fn [a b] [a b]) :a) :b) ;; => [:a :b]\"\n  [argc F & args]\n  (if (= 0 argc)\n    F\n    (let [rest-args (map #(symbol (str \"arg_\" %)) (range (- argc (count args))))]\n      `(let [F# ~F]\n         (hyperfiddle.electric/fn ~@(when (symbol? F) [F]) [~@rest-args]\n                                  (new F# ~@args ~@rest-args))))))\n\n(defmacro on-unmount \"Run clojure(script) thunk `f` during unmount.\n\n  Standard electric code runs on mount, therefore there is no `on-mount`.\"\n  [f] `(new (m/observe (cc/fn [!#] (!# nil) ~f)))) ; experimental\n\n(defn ?PrintServerException [id]\n  (try (server\n         (when-some [ex (io/get-original-ex id)]\n           (println ex)\n           (try (client (js/console.log \"server logged the root exception\"))\n                (catch Pending _))))\n       (catch Pending _)))\n\n(defmacro with-zero-config-entrypoint [& body]\n  `(try\n     (do ~@body)\n     (catch Pending _#)                 ; silently ignore\n     (catch Cancelled e# (throw e#))    ; bypass catchall, app is shutting down\n     (catch :default err#               ; note client bias\n       (js/console.error\n         (str (ex-message err#) \"\\n\\n\" (dbg/stack-trace hyperfiddle.electric/trace)) \"\\n\\n\"\n         (or (io/get-original-ex (dbg/ex-id hyperfiddle.electric/trace)) err#))\n       (new ?PrintServerException (dbg/ex-id hyperfiddle.electric/trace)))))\n\n(defmacro boot \"\nTakes an Electric program and returns a task setting up the full system with client part running locally and server part\nrunning on a remote host.\n\" [& body]\n  (assert (:js-globals &env))\n  (let [[client server] (c/analyze\n                          (assoc &env ::c/peers-config {::c/local :cljs ::c/remote :clj})\n                          `(with-zero-config-entrypoint ~@body))]\n    `(hyperfiddle.electric-client/reload-when-stale\n      (hyperfiddle.electric-client/boot-with-retry\n       ~(r/emit (gensym) client)\n       (hyperfiddle.electric-client/connector (quote ~server))))))\n\n;; WIP: user space socket reconnection\n\n#_\n(hyperfiddle.electric/def ^{:doc \"\n`true` if the main process was cancelled, `false` otherwise.\n\"} cancelled (new r/cancelled))\n\n#_\n(hyperfiddle.electric/def ^{:doc \"\n`true` if the link to the remote peer is up, `false` otherwise. May throw Pending during connection.\n\"} connected (new r/connected))\n\n#_\n(hyperfiddle.electric/defn Entrypoint [App]\n  (or cancelled\n    (not= :waiting\n      (with-cycle [s {:status :connecting :delay 1000}]\n        (try (App.) (catch :default e (.error js/console e)))\n        (case (:status s)\n          :waiting (let [{:keys [since delay]} s\n                         remaining (-> since (+ delay) (- time))]\n                     (if (pos? remaining)\n                       (do (println (str \"Retrying in \" (int (/ remaining 1000)) \"s.\")) s)\n                       (do (println \"Connecting...\")\n                           (-> s\n                             (dissoc :since)\n                             (assoc :status :connecting)))))\n          :connecting (try (if connected\n                             (do (println \"Connected.\")\n                                 (-> s\n                                   (dissoc :delay)\n                                   (assoc :status :connected)))\n                             (do (println \"Failed to reconnect.\")\n                                 (-> s\n                                   (update :delay * 2)\n                                   (assoc :status :waiting\n                                          :since time))))\n                           (catch Pending _ s))\n          :connected (if connected\n                       s (do (println \"Connection reset.\")\n                             {:status :waiting\n                              :since  time\n                              :delay  1000})))))))\n\n(def ^:dynamic *http-request* \"Bound to the HTTP request of the page in which the current Electric program is running.\" nil)\n"],"x_google_ignoreList":[0]}