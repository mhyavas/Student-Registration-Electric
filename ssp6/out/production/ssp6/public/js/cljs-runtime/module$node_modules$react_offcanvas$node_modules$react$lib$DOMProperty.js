shadow$provide.module$node_modules$react_offcanvas$node_modules$react$lib$DOMProperty=function(global,require,module,exports){function checkMask(value,bitmask){return(value&bitmask)===bitmask}var invariant=require("module$node_modules$fbjs$lib$invariant"),DOMPropertyInjection={MUST_USE_ATTRIBUTE:1,MUST_USE_PROPERTY:2,HAS_SIDE_EFFECTS:4,HAS_BOOLEAN_VALUE:8,HAS_NUMERIC_VALUE:16,HAS_POSITIVE_NUMERIC_VALUE:48,HAS_OVERLOADED_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(domPropertyConfig){var Injection=
DOMPropertyInjection,Properties=domPropertyConfig.Properties||{},DOMAttributeNamespaces=domPropertyConfig.DOMAttributeNamespaces||{},DOMAttributeNames=domPropertyConfig.DOMAttributeNames||{},DOMPropertyNames=domPropertyConfig.DOMPropertyNames||{},DOMMutationMethods=domPropertyConfig.DOMMutationMethods||{};domPropertyConfig.isCustomAttribute&&DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);for(var propName in Properties){DOMProperty.properties.hasOwnProperty(propName)?
invariant(!1,"injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.",propName):void 0;domPropertyConfig=propName.toLowerCase();var propConfig=Properties[propName];propConfig={attributeName:domPropertyConfig,attributeNamespace:null,propertyName:propName,mutationMethod:null,mustUseAttribute:checkMask(propConfig,
Injection.MUST_USE_ATTRIBUTE),mustUseProperty:checkMask(propConfig,Injection.MUST_USE_PROPERTY),hasSideEffects:checkMask(propConfig,Injection.HAS_SIDE_EFFECTS),hasBooleanValue:checkMask(propConfig,Injection.HAS_BOOLEAN_VALUE),hasNumericValue:checkMask(propConfig,Injection.HAS_NUMERIC_VALUE),hasPositiveNumericValue:checkMask(propConfig,Injection.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:checkMask(propConfig,Injection.HAS_OVERLOADED_BOOLEAN_VALUE)};propConfig.mustUseAttribute&&propConfig.mustUseProperty?
invariant(!1,"DOMProperty: Cannot require using both attribute and property: %s",propName):void 0;!propConfig.mustUseProperty&&propConfig.hasSideEffects?invariant(!1,"DOMProperty: Properties that have side effects must use property: %s",propName):void 0;1>=propConfig.hasBooleanValue+propConfig.hasNumericValue+propConfig.hasOverloadedBooleanValue?void 0:invariant(!1,"DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s",propName);DOMProperty.getPossibleStandardName[domPropertyConfig]=
propName;DOMAttributeNames.hasOwnProperty(propName)&&(domPropertyConfig=DOMAttributeNames[propName],propConfig.attributeName=domPropertyConfig,DOMProperty.getPossibleStandardName[domPropertyConfig]=propName);DOMAttributeNamespaces.hasOwnProperty(propName)&&(propConfig.attributeNamespace=DOMAttributeNamespaces[propName]);DOMPropertyNames.hasOwnProperty(propName)&&(propConfig.propertyName=DOMPropertyNames[propName]);DOMMutationMethods.hasOwnProperty(propName)&&(propConfig.mutationMethod=DOMMutationMethods[propName]);
DOMProperty.properties[propName]=propConfig}}},defaultValueCache={},DOMProperty={ID_ATTRIBUTE_NAME:"data-reactid",properties:{},getPossibleStandardName:{},_isCustomAttributeFunctions:[],isCustomAttribute:function(attributeName){for(var i=0;i<DOMProperty._isCustomAttributeFunctions.length;i++)if((0,DOMProperty._isCustomAttributeFunctions[i])(attributeName))return!0;return!1},getDefaultValueForProperty:function(nodeName,prop){var nodeDefaults=defaultValueCache[nodeName];nodeDefaults||(defaultValueCache[nodeName]=
nodeDefaults={});prop in nodeDefaults||(nodeName=document.createElement(nodeName),nodeDefaults[prop]=nodeName[prop]);return nodeDefaults[prop]},injection:DOMPropertyInjection};module.exports=DOMProperty}
//# sourceMappingURL=module$node_modules$react_offcanvas$node_modules$react$lib$DOMProperty.js.map
