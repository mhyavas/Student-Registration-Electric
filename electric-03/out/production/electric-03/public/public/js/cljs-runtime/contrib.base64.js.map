{"version":3,"sources":["contrib/base64.cljc"],"mappings":";AAQG,GAAM,0EAAA,1EAACA,6CAAEC;AAAT,AACE,AAAKC,wBAAO,QAAA,RAACC;;AADf;AAGH,+BAAA,/BAAMC,sEAAeC;AAArB,AAEW,GAAI,0EAAA,1EAACL,6CAAEC;AACL,OAASC,6BAAOG;;AAChB,OAACC,+BAAoBD;;;AAElC,+BAAA,/BAAME,sEAAeF;AAArB,AAEW,GAAI,0EAAA,1EAACL,6CAAEC;AACL,OAASC,6BAAOG;;AAChB,OAACG,+BAAoBH;;;AAElC,AAcA,mCAAA,nCAAMI,8EAAmBJ,EAAEK;AAA3B,AACE,OAACC,+CAAO,aAAAC,FAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAQG;QAAR,AAAAF,4CAAAD,WAAA,IAAA,/DAAUI;AAAV,AAAc,OAACC,uBAAuBH,EAAEC,EAAEC;GAC1CZ,EACAK;;AAEV,AAGA,4BAAA,2CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,3FAAKS;AAIL,wCAAA,xCAAMC,wFAAwBf;AAA9B,AAAiC,OAACI,iCAAkB,AAACL,6BAAcC,GAAGc;;AACtE,wCAAA,xCAAME,wFAAwBhB;AAA9B,AAAiC,OAACE,6BAAc,AAACE,iCAAkBJ,EAAE,AAACiB,uBAAWH;;AAEjF","names":["cljs.core._EQ_","cljs.core/*target*","contrib.base64/base64","js/require","contrib.base64/base64-encode","s","goog.crypt.base64/encodeString","contrib.base64/base64-decode","goog.crypt.base64/decodeString","contrib.base64/str-replace-chars","char-mapping","cljs.core.reduce","p__50017","vec__50018","cljs.core.nth","a","k","v","clojure.string/replace","contrib.base64/url-unsafe","contrib.base64/base64-encode-url-safe","contrib.base64/base64-decode-url-safe","clojure.set/map-invert"],"sourcesContent":["(ns contrib.base64\r\n  (:require #?(:cljs [goog.crypt.base64 :as base64])\r\n            [clojure.set :refer [map-invert]]\r\n            clojure.string\r\n            [hyperfiddle.rcf :refer [tests]])\r\n  #?(:clj (:import (java.util Base64))))\r\n\r\n#?(:cljs\r\n   (when (= *target* \"nodejs\")\r\n     (def base64 (js/require \"base-64\"))))\r\n\r\n(defn base64-encode [s]\r\n  #?(:clj (.encodeToString (Base64/getEncoder) (.getBytes s))\r\n     :cljs (if (= *target* \"nodejs\")\r\n             (.encode base64 s)\r\n             (base64/encodeString s))))\r\n\r\n(defn base64-decode [s]\r\n  #?(:clj (String. (.decode (Base64/getDecoder) (.getBytes s)))\r\n     :cljs (if (= *target* \"nodejs\")\r\n             (.decode base64 s)\r\n             (base64/decodeString s))))\r\n\r\n(tests\r\n  (base64-encode \"hello world\") := \"aGVsbG8gd29ybGQ=\"\r\n  (base64-decode \"aGVsbG8gd29ybGQ=\") := \"hello world\"\r\n\r\n  (base64-encode (str (char 0x00))) := \"AA==\"\r\n  (base64-decode \"AA==\") := (str (char 0x00))\r\n\r\n  (base64-encode \"C:\\\\\") := \"Qzpc\"\r\n  (base64-decode \"Qzpc\") := \"C:\\\\\"\r\n\r\n  (base64-encode \"{\") := \"ew==\"\r\n  (base64-decode \"ew==\") := \"{\"\r\n  (base64-decode \"ey\") := \"{\") ; why is this the same\r\n\r\n(defn str-replace-chars [s char-mapping]\r\n  (reduce (fn [a [k v]] (clojure.string/replace a k v))\r\n          s\r\n          char-mapping))\r\n\r\n(tests\r\n  (str-replace-chars \"hello world\" {\\l \\X, \\w \\M}) := \"heXXo MorXd\")\r\n\r\n(def url-unsafe {\\+ \\-\r\n                 \\/ \\_\r\n                 \\= \\,})\r\n\r\n(defn base64-encode-url-safe [s] (str-replace-chars (base64-encode s) url-unsafe))\r\n(defn base64-decode-url-safe [s] (base64-decode (str-replace-chars s (map-invert url-unsafe)) ))\r\n\r\n(tests\r\n  (base64-encode-url-safe \"{\") := \"ew,,\"\r\n  (base64-decode-url-safe \"ew,,\") := \"{\"\r\n\r\n  (base64-encode-url-safe \"{--!.,@#$%^&*()\") := \"ey0tIS4sQCMkJV4mKigp\"\r\n  (base64-decode-url-safe \"ey0tIS4sQCMkJV4mKigp\") := \"{--!.,@#$%^&*()\"\r\n\r\n  (base64-encode \"+-\") := \"Ky0=\"\r\n  (base64-encode-url-safe \"+-\") := \"Ky0,\"\r\n  (base64-decode-url-safe \"Ky0,\") := \"+-\"\r\n  (-> \"+-\" base64-encode-url-safe base64-decode-url-safe) := \"+-\")\r\n"]}