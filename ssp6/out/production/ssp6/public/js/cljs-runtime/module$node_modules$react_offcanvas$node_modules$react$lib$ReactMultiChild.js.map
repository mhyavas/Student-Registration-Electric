{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$ReactMultiChild.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/ReactMultiChild.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$ReactMultiChild\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactChildReconciler = require('./ReactChildReconciler');\n\nvar flattenChildren = require('./flattenChildren');\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth = 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\nvar updateQueue = [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\nvar markupQueue = [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueInsertMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    content: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the markup of a node.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @private\n */\nfunction enqueueSetMarkup(parentID, markup) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.SET_MARKUP,\n    markupIndex: null,\n    content: markup,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    content: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n\n    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n        }\n      }\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n    },\n\n    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {\n      var nextChildren;\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            nextChildren = flattenChildren(nextNestedChildrenElements);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n        }\n      }\n      nextChildren = flattenChildren(nextNestedChildrenElements);\n      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n    },\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction, context) {\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name];\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + name;\n          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n          child._mountIndex = index++;\n          mountImages.push(mountImage);\n        }\n      }\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        // TODO: The setTextContent operation should be enough\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChild(prevChildren[name]);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Replaces any rendered children with a markup string.\n     *\n     * @param {string} nextMarkup String of markup.\n     * @internal\n     */\n    updateMarkup: function (nextMarkup) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        this.setMarkup(nextMarkup);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        this._updateChildren(nextNestedChildrenElements, transaction, context);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);\n      this._renderedChildren = nextChildren;\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex = 0;\n      var nextIndex = 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n        if (prevChild === nextChild) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChild(prevChild);\n          }\n          // The child must be instantiated before it's mounted.\n          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);\n        }\n        nextIndex++;\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n          this._unmountChild(prevChildren[name]);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function () {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren);\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, mountImage) {\n      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function (textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Sets this markup string.\n     *\n     * @param {string} markup Markup to set.\n     * @protected\n     */\n    setMarkup: function (markup) {\n      enqueueSetMarkup(this._rootNodeID, markup);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n    },\n\n    /**\n     * Unmounts a rendered child.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @private\n     */\n    _unmountChild: function (child) {\n      this.removeChild(child);\n      child._mountIndex = null;\n    }\n\n  }\n\n};\n\nmodule.exports = ReactMultiChild;\n};"],
"names":["shadow$provide","global","require","module","exports","processQueue","updateQueue","length","ReactComponentEnvironment","processChildrenUpdates","markupQueue","clearQueue","ReactMultiChildUpdateTypes","ReactCurrentOwner","ReactReconciler","ReactChildReconciler","flattenChildren","updateDepth","ReactMultiChild","Mixin","_reconcilerInstantiateChildren","nestedChildren","transaction","context","_currentElement","current","_owner","instantiateChildren","_reconcilerUpdateChildren","prevChildren","nextNestedChildrenElements","nextChildren","updateChildren","mountChildren","_renderedChildren","children","mountImages","index","name","hasOwnProperty","child","mountImage","mountComponent","_rootNodeID","_mountIndex","push","updateTextContent","nextContent","errorThrown","unmountChildren","_unmountChild","setTextContent","updateMarkup","nextMarkup","_unmountChildByName","setMarkup","_updateChildren","lastIndex","nextIndex","prevChild","nextChild","moveChild","Math","max","_mountChildByNameAtIndex","toIndex","parentID","parentNode","type","MOVE_EXISTING","markupIndex","content","fromIndex","createChild","INSERT_MARKUP","removeChild","REMOVE_NODE","textContent","TEXT_CONTENT","markup","SET_MARKUP"]
}
