{"version":3,"sources":["hyperfiddle/electric/impl/io.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","com.cognitect.transit.types/UUID","hyperfiddle.electric.impl.io/default-write-handler","cognitect.transit.write_handler","x","hyperfiddle.electric.impl.io/-last-unserializable-for-repl","js/console.log","cljs.core.pr_str","cljs.core/type","_","hyperfiddle.electric.impl.io/->cache","size","G__42481","arr42482","cljs.core/identity","cljs.core.object_array","hyperfiddle.electric.impl.io/cache-add","cache","k","v","i","cljs.core/count","cljs.core._EQ_","hyperfiddle.electric.impl.array-fields/get","arr42485","widx","p1__42484#","hyperfiddle.electric.impl.array-fields/getswap","cljs.core/mod","arr42486","hyperfiddle.electric.impl.io/cache-get","hyperfiddle.electric.impl.io/cache->map","ac","cljs.core/transient","cljs.core.assoc_BANG_","cljs.core/persistent!","hyperfiddle.electric.impl.io/!ex-cache","hyperfiddle.electric.impl.io/save-original-ex!","fi","id","hyperfiddle.electric.debug/ex-id","temp__5808__auto__","cause","cljs.core/ex-cause","js/hyperfiddle.electric.FailureInfo","hyperfiddle.electric.impl.io/get-original-ex","hyperfiddle.electric.impl.io/*write-handlers*","hyperfiddle.electric.impl.io/failure-writer","err","js/missionary.Cancelled","js/hyperfiddle.electric.Pending","js/hyperfiddle.electric.Remote","hyperfiddle.electric.debug/serializable","cljs.core/ex-data","cljs.core/ex-message","hyperfiddle.electric.impl.io/write-opts","cljs.core.merge","js/hyperfiddle.electric.Failure","hyperfiddle.electric.impl.io/*read-handlers*","hyperfiddle.electric.impl.io/failure-reader","cognitect.transit/read-handler","p__42498","vec__42499","seq__42500","cljs.core/seq","first__42501","cljs.core/first","cljs.core/next","tag","args","G__42505","cljs.core/Keyword","js/Error","vec__42507","cljs.core.nth","message","data","hyperfiddle.electric.debug.ex_info_STAR_","vec__42511","or__5045__auto__","hyperfiddle.electric.impl.io/read-opts","hyperfiddle.electric.impl.io/set-ints","cljs.core.partial","cljs.core/reduce-kv","r","n","offset","G__42517","hyperfiddle.electric.impl.io/encode-numbers","xs","required","G__42520","js/ArrayBuffer","js/DataView","hyperfiddle.electric.impl.io/decode-numbers","b","cljs.core/vec","hyperfiddle.electric.impl.io/t_hyperfiddle$electric$impl$io42522","rf","l","G__42526","G__42527","!cache","cljs.core.atom","hyperfiddle.electric.impl.io/transit-writer","cljs.core.swap_BANG_","p__42533","map__42534","cljs.core/--destructure-map","cljs.core.get","write-handlers","writer","cljs.core.assoc","cognitect.transit.writer","hyperfiddle.electric.impl.io/encode","cognitect.transit/write","hyperfiddle.electric.impl.io/transit-reader","p__42536","map__42537","read-handlers","reader","cognitect.transit.reader","hyperfiddle.electric.impl.io/decode","s","cognitect.transit/read","hyperfiddle.electric.impl.io/decode-str","e42543","G__42544","js/console.debug","t","cljs.core.ex_info","hyperfiddle.electric.impl.io/chunk-size","hyperfiddle.electric.impl.io/message-reader","?read","cr42551-state","cr42551-place-22","cr42551-place-32","cr42551-place-33","cr42551-place-34","cr42551-block-8","cr42551-exception","e42605","cr42551-place-29","cr42551-block-6","missionary.core/park","e42614","cr42551-place-0","cr42551-place-1","cljs.core/IVector","cr42551-place-2","cr42551-block-1","e42619","cr42551-place-7","e42627","cr42551-place-11","cr42551-place-14","cr42551-place-15","cr42551-place-16","cr42551-place-17","cr42551-place-18","cr42551-place-19","cr42551-place-20","cr42551-place-21","cr42551-place-23","cr42551-place-24","cr42551-place-25","cr42551-place-26","cr42551-place-27","cr42551-place-28","cr42551-block-7","cr42551-block-5","e42629","cr42551-place-10","cr42551-place-8","cr42551-place-9","cr42551-place-35","cr42551-place-36","cr42551-block-10","e42649","cr42551-place-3","cr42551-block-2","e42664","cr42551-place-4","cr42551-place-37","cr42551-place-38","cr42551-place-39","cr42551-place-40","cr42551-place-41","cr42551-place-42","e42668","cr42551-place-12","cr42551-place-13","cr42551-block-4","e42683","missionary.core/unpark","cr42551-place-5","cr42551-place-6","cr42551-block-9","cr42551-block-3","e42692","cr42551-place-30","cr42551-place-31","e42698","cloroutine.impl/coroutine","G__42706","cr42551-block-0","missionary.core/sp-run","G__42622","fexpr__42621","G__42676","G__42677","fexpr__42675","cljs.core/conj!","G__42674","fexpr__42673","G__42658","fexpr__42657","G__42655","G__42656","fexpr__42654","G__42688","fexpr__42687","G__42635","fexpr__42634","G__42639","G__42640","G__42641","fexpr__42637","cljs.core/reduce","G__42647","fexpr__42646","G__42608","fexpr__42607","p1__42709#","hyperfiddle.electric.impl.io/message-writer","write","cr42710-state","cr42710-place-46","cr42710-place-47","cr42710-place-48","cr42710-block-8","cr42710-exception","e42788","cr42710-place-62","cr42710-place-63","cr42710-place-64","cr42710-place-65","cr42710-place-66","cr42710-place-67","cr42710-place-68","cr42710-place-69","cr42710-place-70","cr42710-place-71","cr42710-block-12","e42793","cr42710-place-20","cr42710-place-26","cr42710-place-31","cr42710-place-32","cr42710-place-33","cr42710-place-34","cr42710-place-35","cr42710-place-36","cljs.core/IMap","cr42710-place-37","cr42710-place-38","cr42710-place-39","e42802","cr42710-block-5","cr42710-place-21","cr42710-place-44","cr42710-place-45","cr42710-block-1","e42807","cr42710-place-49","cr42710-place-50","cr42710-place-51","cr42710-place-52","cr42710-place-53","cr42710-place-54","cr42710-block-11","cr42710-block-9","e42808","cr42710-place-55","cr42710-place-56","cr42710-place-57","cr42710-place-58","cr42710-place-59","cr42710-place-60","cr42710-block-10","e42811","cr42710-block-14","e42816","cr42710-place-61","cr42710-block-13","e42817","cr42710-place-27","cr42710-place-40","cr42710-place-41","cr42710-place-42","cr42710-place-43","cr42710-block-6","e42818","cr42710-place-9","e42821","cr42710-place-0","cr42710-place-1","cr42710-place-2","cr42710-place-3","cr42710-place-4","e42822","cr42710-place-5","cr42710-place-10","cr42710-place-11","cr42710-place-12","cr42710-place-13","cr42710-place-14","cr42710-place-15","cr42710-place-16","cr42710-place-17","cr42710-place-18","cr42710-place-19","cr42710-place-22","cr42710-place-23","cr42710-place-24","cr42710-place-25","cr42710-block-3","e42827","cr42710-place-6","cr42710-place-7","cr42710-place-8","cr42710-block-7","cr42710-block-2","e42837","cr42710-place-72","cr42710-place-73","cr42710-place-74","cr42710-place-75","cr42710-place-76","e42838","cr42710-place-28","cr42710-place-29","cr42710-place-30","e42842","cr42710-block-4","G__42845","cr42710-block-0","G__42826","fexpr__42825","G__42824","fexpr__42823","cljs.core/pop","G__42829","fexpr__42828","G__42831","fexpr__42830","G__42833","fexpr__42832","G__42835","G__42836","fexpr__42834","G__42820","fexpr__42819","G__42844","fexpr__42843","G__42804","G__42805","G__42806","fexpr__42803","cljs.core/ex-info","G__42792","fexpr__42791","cljs.core/peek","G__42810","fexpr__42809","G__42801","fexpr__42800","G__42799","fexpr__42798","G__42795","G__42796","G__42797","fexpr__42794","cljs.core/subvec","G__42840","G__42841","fexpr__42839","G__42815","fexpr__42814","G__42813","fexpr__42812","hyperfiddle.electric.impl.io/decoder","G__42846","cljs.core.conj","cljs.core.into","hyperfiddle.electric.impl.io/encoder","cljs.core.reduce","cljs.core.eduction","cljs.core.map","cljs.core.partition_all","G__42847","G__42848","G__42849","var_args","G__42856","hyperfiddle.electric.impl.io/foreach"],"sourcesContent":[";; Facilities for encoding/decoding of Electric protocol messages.\n;; * Data frames can be arbitrary clojure data or Electric failures. Serialization is done via transit json, the failure\n;; error is preserved if it's an instance of `hyperfiddle.electric.Pending` or `hyperfiddle.electric.Cancelled`, otherwise\n;; the error is logged and turned into an instance of `hyperfiddle.electric.Remote`.\n;; * Control frames are vectors of signed integers. Serialization is the concatenation of the binary representation of\n;; these numbers as fixed-length 32-bit, big endian.\n\n(ns ^:no-doc hyperfiddle.electric.impl.io\n  (:require [missionary.core :as m]\n            [cognitect.transit :as t]\n            #?(:clj [clojure.tools.logging :as log])\n            [hyperfiddle.electric.debug :as dbg]\n            [hyperfiddle.rcf :as rcf :refer [tests with tap %]]\n            #?(:cljs [com.cognitect.transit.types])\n            [hyperfiddle.electric.impl.array-fields :as a])\n  (:import (missionary Cancelled)\n           (hyperfiddle.electric Failure Pending Remote FailureInfo)\n           #?(:clj (java.nio ByteBuffer))\n           #?(:clj (java.io ByteArrayInputStream ByteArrayOutputStream))\n           #?(:clj (clojure.lang IReduceInit))))\n\n#?(:cljs (extend-type com.cognitect.transit.types/UUID IUUID)) ; https://github.com/hyperfiddle/hyperfiddle/issues/728\n\n(def default-write-handler ; Intercepts unserializable values, logs and return nil\n  (t/write-handler ; Adapted from `com.cognitect.transit.impl.WriteHandlers.NullWriteHandler`\n    (fn [x]\n      (def -last-unserializable-for-repl x)\n      (#?(:clj log/info, :cljs js/console.log) \"Unserializable reference transfer:\" (pr-str (type x)) (str x))\n      \"_\")\n    (fn [x] nil)\n    (fn [_] \"\")))\n\n(defn ->cache \"Builds a minimal, cljc map/bounded-queue cache.\n  One slot per key (map).\n  Reaching `size` pops oldest value (bounded-queue).\" [size]\n  (doto (object-array (inc (* size 2))) (a/set (* size 2) 0)))\n(defn cache-add [cache k v]\n  (when-not (loop [i 0]\n              (when (< i (dec (count cache)))\n                (if (= k (a/get cache i))\n                  (do (a/set cache (inc i) v) true)\n                  (recur (+ i 2)))))\n    (let [widx (a/getswap cache (dec (count cache)) #(mod (+ % 2) (dec (count cache))))]\n      (a/set cache widx k, (inc widx) v))))\n(defn cache-get [cache k]\n  (loop [i 0]\n    (when (< i (dec (count cache)))\n      (if (= k (a/get cache i))\n        (a/get cache (inc i))\n        (recur (+ i 2))))))\n(defn cache->map [cache]\n  (loop [i 0, ac (transient {})]\n    (if (< i (dec (count cache)))\n      (recur (+ i 2) (assoc! ac (a/get cache i) (a/get cache (inc i))))\n      (persistent! ac))))\n\n(tests \"keyed cache\"\n  (def !c (->cache 1))\n  (cache-add !c 1 2) (cache-get !c 1) := 2\n  (cache-add !c 1 3) (cache-get !c 1) := 3\n  (cache-add !c 2 4) (cache-get !c 2) := 4\n  (cache->map !c) := {2 4}\n\n  \"size 2\"\n  (def !c (->cache 2))\n  (cache-add !c 1 1)\n  (cache-add !c 2 2)\n  (cache-add !c 2 2)\n  (cache->map !c) := {1 1, 2 2})\n\n(def !ex-cache (->cache 16))\n(defn save-original-ex! [fi]\n  (let [id (dbg/ex-id fi)]\n    (when-some [cause (ex-cause fi)]\n      (when-not (instance? FailureInfo cause)\n        (cache-add !ex-cache id cause)))\n    id))\n(defn get-original-ex [id] (cache-get !ex-cache id))\n\n(def ^:dynamic *write-handlers* nil)\n\n(def failure-writer (t/write-handler\n                      (fn [_] \"failure\")\n                      (fn [x]\n                        (let [err (.-error ^Failure x)]\n                          (cond (instance? Cancelled err) [:cancelled]\n                                (instance? Pending err)   [:pending]\n                                (instance? Remote err)    [:remote (dbg/serializable (ex-data err))]\n                                :else                     [:exception (ex-message err) (dbg/serializable (ex-data err))\n                                                           (save-original-ex! err)])))))\n\n(defn write-opts []\n  {:handlers (merge *write-handlers*\n               {Failure failure-writer\n                :default default-write-handler}) ; cljs\n   :default-handler default-write-handler}) ; clj\n\n(def ^:dynamic *read-handlers* nil)\n\n(def failure-reader (t/read-handler\n                      (fn [[tag & args]]\n                        (case tag\n                          :exception (let [[message data id] args]\n                                       (Failure. (dbg/ex-info* message data id nil)))\n                          :remote    (let [[data] args]\n                                       (Failure. (dbg/ex-info* \"Remote error\" (or data {}))))\n                          :pending   (Failure. (Pending.))\n                          :cancelled (Failure. (Cancelled.))))))\n\n(defn read-opts [] {:handlers (merge *read-handlers* {\"failure\" failure-reader})})\n\n(def set-ints\n  (partial reduce-kv\n    (fn [r i n]\n      (let [offset (bit-shift-left i 2)]\n        #?(:clj  (.putInt ^ByteBuffer r offset n)\n           :cljs (doto r (.setInt32 offset n)))))))\n\n(defn encode-numbers\n  \"Encode a control frame to a binary segment.\"\n  [xs]\n  (let [required (bit-shift-left (count xs) 2)] ; size of bytebuffer is 4 \u00d7 (count xs), so shift by 2\n    #?(:clj (set-ints (ByteBuffer/allocate required) xs)\n       :cljs (doto (js/ArrayBuffer. required)\n               (-> (js/DataView.) (set-ints xs))))))\n\n(defn decode-numbers\n  \"Decode a control frame from a binary segment.\"\n  [b]\n  (vec\n    (reify\n      #?(:clj IReduceInit :cljs IReduce)\n      #?(:clj (reduce [_ rf r]\n                (let [l (.limit ^ByteBuffer b)]\n                  (loop [r r, i (int 0)]\n                    (if (< i l)\n                      (recur (rf r (.getInt ^ByteBuffer b i))\n                        (unchecked-add-int i 4)) r))))\n         :cljs (-reduce [_ rf r]\n                 (let [l (.-byteLength b)\n                       v (js/DataView. b)]\n                   (loop [r r, i 0]\n                     (if (< i l)\n                       (recur (rf r (.getInt32 v i))\n                         (+ i 4)) r))))))))\n\n\n;; #?(:cljs (def transit-writer (t/writer :json (write-opts))))\n#?(:cljs (let [!cache (atom {:write-handlers *write-handlers*, :writer nil})]\n           (defn transit-writer []\n             (:writer (swap! !cache (fn [{:keys [write-handlers writer] :as cache}]\n                                      (if (= write-handlers *write-handlers*)\n                                        (if writer\n                                          cache\n                                          (assoc cache :writer (t/writer :json (write-opts))))\n                                        {:write-handlers *write-handlers*\n                                         :writer         (t/writer :json (write-opts))})))))))\n\n(defn encode\n  \"Encode a data frame to transit json\"\n  [x]\n  #?(:clj (let [out (ByteArrayOutputStream.)]\n            (t/write (t/writer out :json (write-opts)) x)\n            (.toString out))\n     :cljs (t/write (transit-writer) x)))\n\n;; #?(:cljs (def transit-reader (t/reader :json (read-opts))))\n#?(:cljs (let [!cache (atom {:read-handlers *read-handlers*, :reader nil})]\n           (defn transit-reader []\n             (:reader (swap! !cache (fn [{:keys [read-handlers reader] :as cache}]\n                                      (if (= read-handlers *read-handlers*)\n                                        (if reader\n                                          cache\n                                          (assoc cache :reader (t/reader :json (read-opts))))\n                                        {:read-handlers *read-handlers*\n                                         :reader        (t/reader :json (read-opts))})))))))\n\n\n(defn decode\n  \"Decode a data frame from transit json\"\n  [^String s]\n  #?(:clj (t/read (t/reader (ByteArrayInputStream. (.getBytes s \"UTF-8\")) :json (read-opts)))\n     :cljs (t/read (transit-reader) s)))\n\n(defn decode-str [x]\n  (try (doto (decode x) (->> (#?(:clj log/trace, :cljs js/console.debug) \"\ud83d\udd3d\")))\n    (catch #?(:clj Throwable :cljs :default) t\n      (throw (ex-info \"Failed to decode\" {:value x} t)))))\n\n(tests \"FailureInfo\"\n  (def cause (ex-info \"boom\" {}))\n  (def ex (dbg/ex-info* \"x\" {} cause))\n  (def sent (-> ex Failure. encode decode .-error))\n  \"keeps the ID across the wire\"\n  (dbg/ex-id ex) := (dbg/ex-id sent)\n  \"can restore cause\"\n  (get-original-ex (dbg/ex-id sent)) := cause\n  nil)\n\n; Jetty rejects websocket payloads larger than 65536 bytes by default\n; We\u2019ll chop messages if needed\n(def chunk-size (bit-shift-right 65536 2))\n\n(defn ^:deprecated message-reader [?read]\n  \"Returns a discrete flow of read Electric messages from provided task, emitting individual frames.\"\n  (m/sp\n    (loop [data (transient [])]\n      (let [x (m/? ?read)]\n        (if (string? x)\n          (recur (conj! data (decode-str x)))\n          (persistent!\n            (conj! data\n              (loop [x       x\n                     control (transient [])]\n                (let [xs      (decode-numbers x)\n                      control (reduce conj! control xs)]\n                  (if (< (count xs) chunk-size) ; final frame\n                    (persistent! control)\n                    (recur (m/? ?read) control)))))))))))\n\n\n(defn ^:deprecated message-writer\n  \"Returns a function taking an Electric message and returning a task writing it as individual frames using provided\n   function. Might cut a message into chunks if its size would exceed the server payload limit.\n   An empty message (0b) is written to notify the end of frame.\"\n  [write]\n  #(m/sp\n     (loop [xs (seq (pop %))]\n       (if-some [[x & xs] xs]\n         (do (#?(:clj log/trace, :cljs js/console.debug) \"\ud83d\udd3c\" x)\n           (m/? (write\n                  (try (encode x)\n                    (catch #?(:clj Throwable :cljs :default) t\n                      (throw (ex-info \"Failed to encode\" {:value x} t))))))\n           (recur xs))\n         (loop [xs (peek %)]\n           (if (>= (count xs) chunk-size)\n             (do (m/? (write (encode-numbers (subvec xs 0 chunk-size))))\n               (recur (subvec xs chunk-size)))\n             (m/? (write (encode-numbers xs)))))))))\n\n(defn ^:deprecated decoder\n  \"A transducer partitioning a sequence of network messages into Electric events.\"\n  [rf]\n  (let [data (doto (object-array 2)\n               (aset 0 []) (aset 1 []))]\n    (fn\n      ([] (rf))\n      ([r]\n       (assert (= [] (aget data 0) (aget data 1)))\n       (rf r))\n      ([r x]\n       (if (string? x)\n         (do (assert (= [] (aget data 1)))\n             (aset data 0 (conj (aget data 0) (decode-str x))) r)\n         (let [xs (decode-numbers x)]\n           (aset data 1 (into (aget data 1) xs))\n           (if (< (count xs) chunk-size)                  ; final frame\n             (let [x (conj (aget data 0) (aget data 1))]\n               (aset data 0 [])\n               (aset data 1 [])\n               (rf r x)) r)))))))\n\n(defn ^:deprecated encoder\n  \"A transducer expanding Electric events to a sequence of network messages.\"\n  [rf]\n  (fn\n    ([] (rf))\n    ([r] (rf r))\n    ([r x]\n     (let [r (reduce rf r (eduction (map encode) (pop x)))\n           r (reduce rf r (eduction (partition-all chunk-size) (map encode-numbers) (peek x)))]\n       (case (mod (count (peek x)) chunk-size)\n         0 (rf r (encode-numbers [])) r)))))\n\n(defn foreach\n  ([r] r)\n  ([r x] (r x) r))\n"],"x_google_ignoreList":[0]}