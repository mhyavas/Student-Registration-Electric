{"version":3,"sources":["contrib/trace/datascript_tracer.cljc"],"mappings":"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","names":["contrib.trace.datascript-tracer/ds-schema","contrib.trace.datascript-tracer/ds-listener","conn","point","datascript.core.transact_BANG_","->point-id","trace","G__56382","cljs.core.assoc","contrib.trace.datascript-tracer/de-nil","v","cljs.core._EQ_","contrib.trace.datascript-tracer/textify","js/hyperfiddle.electric.Pending","js/Error","cljs.core/ex-message","contrib.trace.datascript-tracer/default-point-id","id","parent","contrib.crypt/sha256-base64","contrib.trace.datascript-tracer/->default-trace-id","!cache","cljs.core.atom","point-id","_v","nx","cljs.core.get","cljs.core.swap_BANG_","cljs.core/update","cljs.core.fnil","cljs.core/inc","contrib.trace.datascript-tracer/ms","_","js/Date","contrib.trace.datascript-tracer/ds-get","e","k","db","datascript.core/entity","contrib.trace.datascript-tracer/children","parent-id","cljs.core/vec","cljs.core.sort","G__56383","G__56384","G__56385","datascript.core/q","contrib.trace.datascript-tracer/->traces","G__56386","G__56387","G__56388","contrib.trace.datascript-tracer/->latest","traces","_db","cljs.core/peek","p__56390","map__56391","cljs.core/--destructure-map","contrib.trace.datascript-tracer/next-measure-state","status","start","G__56392","cljs.core/Keyword","contrib.trace.datascript-tracer/->origin","cljs.core.reduce","cljs.core/min","G__56393","G__56394","contrib.trace.datascript-tracer/scroll-to-end","node","contrib.trace.datascript-tracer/time-str","ms","cljs.math/round","contrib.trace.datascript-tracer/measure-distance","end","cljs.core/abs","contrib.trace.datascript-tracer/calculate-history-container-offset","origin","pixel-secs","cljs.core/max","G__56396","G__56397","cljs.core/quot"],"sourcesContent":["(ns contrib.trace.datascript-tracer\r\n  (:require [clojure.math :as math]\r\n            [contrib.trace :as ct]\r\n            [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.electric-ui4 :as ui]\r\n            [hyperfiddle.rcf :as rcf :refer [% tap tests with]]\r\n            [contrib.crypt :as crypt]\r\n            [datascript.core :as d])\r\n  (:import [hyperfiddle.electric Pending])\r\n  #?(:cljs (:require-macros contrib.trace.datascript-tracer)))\r\n\r\n(e/def conn)\r\n(e/def db)\r\n\r\n(def ds-schema {:db/id        {:db/unique :db.unique/identity}\r\n                ::ct/point-id {:db/unique :db.unique/identity}\r\n                ::ct/trace-id {:db/unique :db.unique/identity}\r\n                ::ct/traces   {:db/cardinality :db.cardinality/many}})\r\n\r\n(defn- ds-listener [conn]\r\n  (fn\r\n    ([point] (d/transact! conn [point]))\r\n    ([->point-id trace] (d/transact! conn [{::ct/point-id ->point-id ::ct/traces (::ct/trace-id trace)}\r\n                                           (cond-> trace (nil? (::ct/v trace)) (assoc ::ct/v ::nil))]))))\r\n(defn de-nil [v] (if (= ::nil v) nil v))\r\n(defn textify [v] (cond (nil? v) \"nil\"\r\n                        (instance? Pending v) \"\u231b\"\r\n                        (instance? #?(:clj Throwable :cljs js/Error) v) (ex-message v)\r\n                        :else v))\r\n\r\n(defn default-point-id [id parent] (crypt/sha256-base64 [id parent]))\r\n(defn ->default-trace-id []\r\n  (let [!cache (atom {})]\r\n    (fn [point-id _v]\r\n      (let [nx (get (swap! !cache update point-id (fnil inc 0)) point-id)]\r\n        (str point-id \"-\" nx)))))\r\n(defn ms [_] #?(:clj (System/currentTimeMillis) :cljs (.now js/Date)))\r\n\r\n(tests\r\n  (def gen (->default-trace-id))\r\n  (gen \"x\" nil) := \"x-1\"\r\n  (gen \"x\" nil) := \"x-2\"\r\n  (gen 123 nil) := \"123-1\"\r\n  (gen 123 nil) := \"123-2\")\r\n\r\n(defmacro with-defaults [& body]\r\n  `(binding [ct/->trace-id (->default-trace-id), ct/stamp ms, ct/->point-id default-point-id\r\n             conn (d/create-conn ds-schema)]\r\n     (binding [db (e/debounce 50 (e/watch conn))]\r\n       (ct/with-listener (ds-listener conn)\r\n         ~@body))))\r\n\r\n(tests \"defaults work\"\r\n  (defn find-points-named [nm -db]\r\n    (d/q '[:find (pull ?e [::ct/parent ::ct/traces]) . :in $ ?nm :where [?e ::ct/name ?nm]] -db nm))\r\n  (defn find-traces [pt -db]\r\n    (d/q '[:find (pull ?e [::ct/type ::ct/v]) :in $ [?tid ...] :where [?e ::ct/trace-id ?tid]] -db (::ct/traces pt)))\r\n  (defn ->trace-time [trace-id -db] (::ct/stamp (d/entity -db [::ct/trace-id trace-id])))\r\n\r\n  (def !conn (atom nil))\r\n  (def !x (atom 3))\r\n  (with (e/run (try (with-defaults (reset! !conn conn) (tap (ct/trace :+ (+ 2 (e/watch !x)))))\r\n                    (catch #?(:clj Throwable :cljs :default) e (prn [(type e) (ex-message e)]))))\r\n    % := 5\r\n    (def -db (d/db @!conn))\r\n    (def point (find-points-named :+ -db))\r\n    (::ct/parent point) := ::ct/root\r\n    (-> point ::ct/traces count) := 1\r\n    (< (- (ms nil) (->trace-time (-> point ::ct/traces first) -db)) 10) := true\r\n    (find-traces point -db) := [[{::ct/type ::ct/ok, ::ct/v 5}]]\r\n\r\n    (swap! !x inc)\r\n    % := 6\r\n    (def -db (d/db @!conn))\r\n    (def point (find-points-named :+ -db))\r\n    (::ct/parent point) := ::ct/root\r\n    (-> point ::ct/traces count) := 2\r\n    (find-traces point -db) := [[{::ct/type ::ct/ok, ::ct/v 6}] [{::ct/type ::ct/ok, ::ct/v 5}]]\r\n    ))\r\n\r\n(defn ds-get [e k db] (get (d/entity db e) k))\r\n(defn children [parent-id db] (vec (sort (d/q '[:find [?trace ...] :in $ ?parent :where [?trace ::ct/parent ?parent]] db parent-id))))\r\n(defn ->traces [point db]\r\n  (vec (sort (d/q '[:find [?e ...] :in $ ?point :where [?point ::ct/traces ?tid] [?e ::ct/trace-id ?tid]] db point))))\r\n(defn ->latest [traces _db] (peek traces))\r\n\r\n(tests\r\n  (def -conn (atom nil))\r\n  (with (e/run (with-defaults (reset! -conn conn) (tap (ct/trace :x (+ 1 2)))))\r\n    % := 3\r\n    (def -db (d/db @-conn))\r\n    (children ::ct/root -db) := [1]\r\n    (->traces 1 -db) := [2]))\r\n\r\n;; rendering tips from Geoffrey:\r\n;;\r\n;; grid1                    grid2\r\n;; ---------|-------------|-----------------\r\n;; Name     | Value       | History\r\n;; ---------|-------------|-----------------\r\n;;\r\n;; Render the value into these 2 grids\r\n;; - grid2 can have a scrollbar now, fixing that issue\r\n;; - grid1 gets a bit more tricky, we need to render into the cells correctly\r\n;; - collapsing/expanding will also be a bit trickier\r\n;;   - a simple boolean might be enough though, to unmount the rows or mark them display:none\r\n;; - row height needs to be static and `=` in both grids\r\n;; - values in time will be position:absolute or relative with an offset\r\n\r\n(e/def RenderPoint)\r\n\r\n(e/defn DSRenderPoint [point db depth]\r\n  (dom/div (dom/style {:display \"contents\"})\r\n    (dom/span (dom/style {:margin-left (str (* 8 depth) \"px\"), :border \"1px solid gray\", :height \"30px\"})\r\n      (dom/text (ds-get point ::ct/name db)))\r\n    (dom/span (dom/style {:border \"1px solid gray\", :height \"30px\"})\r\n      (dom/text (-> point (->traces db) (->latest db) (ds-get ::ct/v db) de-nil textify)))\r\n    (dom/div (dom/style {:display \"contents\"})\r\n      (e/for-by #(ds-get % ::ct/point-id db) [child-point (children (ds-get point ::ct/point-id db) db)]\r\n        (RenderPoint. child-point db (inc depth))))))\r\n\r\n(defn next-measure-state [{:keys [status start]} id]\r\n  (case status\r\n    (:measured :idle) {:status :began :start id}\r\n    (:began)          {:status :measured :start start :end id}))\r\n\r\n;; TODO cleanup, 6 args.. Same with later fns\r\n(e/defn DSRenderHistory [traces origin db pixel-secs !measure container-offset]\r\n  (dom/div (dom/style {:height \"30px\", :position \"relative\", :border \"1px solid gray\"\r\n                       :padding-right (str (+ container-offset 100) \"px\")})\r\n    (e/for [trace traces]\r\n      (let [stamp (ds-get trace ::ct/stamp db)\r\n            ;; 200ms difference\r\n            ;; 10px = 1sec = 1000ms\r\n            ;; 10px/1000ms = offset/200ms\r\n            ;; offset = 200ms*10px/1000ms = 2px\r\n            offset (-> stamp (- origin) (* pixel-secs) (quot 1000))\r\n            typ   (ds-get trace ::ct/type db)\r\n            v     (de-nil (ds-get trace ::ct/v db))]\r\n        (dom/span (dom/style {:position \"absolute\"\r\n                              :left (str offset \"px\")\r\n                              :background-color (case typ\r\n                                                  ::ct/ok \"#c5e8c5\"\r\n                                                  ::ct/err (if (instance? Pending v) \"inherit\" \"#ffcaca\"))})\r\n          (dom/text (textify v))\r\n          (dom/on! \"click\" (fn [_] (swap! !measure next-measure-state trace))))))))\r\n\r\n(defn ->origin [db] (reduce min (ms nil) (d/q '[:find [?stamp ...] :where [_ ::ct/stamp ?stamp]] db)))\r\n\r\n(e/def RenderTraces)\r\n\r\n(e/defn DSRenderTraces [point db origin pixel-secs !measure offset]\r\n  (DSRenderHistory. (->traces point db) origin db pixel-secs !measure offset)\r\n  (e/for-by #(ds-get % ::ct/point-id db) [child-point (children (ds-get point ::ct/point-id db) db)]\r\n    (RenderTraces. child-point db origin pixel-secs !measure offset)))\r\n\r\n#?(:cljs (defn scroll-to-end [node _db] (set! (.-scrollLeft node) (.-scrollWidth node))))\r\n\r\n(defn time-str [ms] (if (> ms 1000) (str (-> ms (/ 10) math/round (/ 100)) \"s\") (str ms \"ms\")))\r\n(defn measure-distance [start end db] (abs (- (ds-get start ::ct/stamp db) (ds-get end ::ct/stamp db))))\r\n\r\n(defn- calculate-history-container-offset [origin pixel-secs db]\r\n  (-> (reduce max (d/q '[:find [?stamp ...] :where [_ ::ct/stamp ?stamp]] db))\r\n    (- origin) (* pixel-secs) (quot 1000)))\r\n\r\n(e/defn DatascriptTraceView []\r\n  (binding [RenderPoint DSRenderPoint, RenderTraces DSRenderTraces]\r\n    (let [!pixel-secs (atom 1000), pixel-secs (e/watch !pixel-secs)\r\n          !measure (atom {:status :idle}), measure (e/watch !measure)\r\n          !offset (atom 0), offset (e/watch !offset)\r\n          origin (->origin db)]\r\n      (dom/div (dom/props {:class \"dstrace\"})\r\n        (dom/span (dom/text \"time granularity: \"))\r\n        (ui/range pixel-secs (e/fn [v] (reset! !pixel-secs v))\r\n          (dom/style {:display \"inline-block\", :width \"200px\"})\r\n          (dom/props {:min 1, :max 10000}))\r\n        (dom/div\r\n          (dom/text \"distance: \"\r\n            (when (= :measured (:status measure))\r\n              (time-str (measure-distance (:start measure) (:end measure) db)))))\r\n        (dom/div (dom/style {:display \"flex\"})\r\n          (dom/div (dom/style {:display \"inline-grid\", :grid-template-columns \"1fr 1fr\", :min-width \"400px\"})\r\n            (dom/strong (dom/text \"Name\")) (dom/strong (dom/text \"Value\"))\r\n            (e/for [root-point (children ::ct/root db)]\r\n              (RenderPoint. root-point db 0)))\r\n          (dom/div (dom/style {:display \"inline-grid\", :overflow \"scroll\", :white-space \"nowrap\", :flex-grow 1})\r\n            (dom/strong (dom/style {:height \"22px\"}) (dom/text \"History\"))\r\n            (case (e/for [root-point (children ::ct/root db)]\r\n                    (RenderTraces. root-point db origin pixel-secs !measure offset))\r\n              (case (reset! !offset (calculate-history-container-offset origin pixel-secs db))\r\n                (scroll-to-end dom/node [db pixel-secs])))))))))\r\n"]}