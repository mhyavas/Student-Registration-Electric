{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$ReactDOMTextComponent.js",
"lineCount":5,
"mappings":"AAAAA,cAAA,CAAA,gFAAA,CAAqG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAe7I,IAAIC,sBAAwBH,OAAA,CAAQ,kFAAR,CAA5B,CACII,sBAAwBJ,OAAA,CAAQ,kFAAR,CAD5B,CAEIK,iCAAmCL,OAAA,CAAQ,6FAAR,CAFvC;AAGIM,WAAaN,OAAA,CAAQ,uEAAR,CAEbO,OAAAA,CAASP,OAAA,CAAQ,0EAAR,CACb,KAAIQ,4BAA8BR,OAAA,CAAQ,wFAAR,CAAlC,CACIS,eAAiBT,OAAA,CAAQ,2EAAR,CADrB,CAEIU,mBAAqBV,OAAA,CAAQ,+EAAR,CAiBrBW;OAAAA,CAAwBA,QAAS,CAACC,KAAD,CAAQ,EAI7CL,OAAA,CAAOI,OAAsBE,CAAAA,SAA7B,CAAwC,CAMtCC,UAAWA,QAAS,CAACC,IAAD,CAAO,CAEzB,IAAKC,CAAAA,eAAL,CAAuBD,IACvB,KAAKE,CAAAA,WAAL,CAAmB,EAAnB,CAAwBF,IAGxB,KAAKG,CAAAA,WAAL,CAAmB,IACnB,KAAKC,CAAAA,WAAL,CAAmB,CAPM,CANW,CAyBtCC,eAAgBA,QAAS,CAACC,MAAD,CAASC,WAAT,CAAsBC,OAAtB,CAA+B,CAEhDA,OAAA,CAAQb,kBAAmBc,CAAAA,sBAA3B,CAAJ,EACEd,kBAAA,CAAmB,MAAnB,CAA2B,IAA3B,CAAiCa,OAAA,CAAQb,kBAAmBc,CAAAA,sBAA3B,CAAjC,CAIJ,KAAKN,CAAAA,WAAL,CAAmBG,MACnB,IAAIC,WAAYG,CAAAA,gBAAhB,CAOE,MALIC,YAKGA,CANaH,OAAAI,CAAQrB,UAAWsB,CAAAA,uBAAnBD,CACGE,CAAAA,aAAd,CAA4B,MAA5B,CAKFH,CAJPtB,qBAAsB0B,CAAAA,iBAAtB,CAAwCJ,WAAxC;AAA4CL,MAA5C,CAIOK,CAFPpB,UAAWyB,CAAAA,KAAX,CAAiBL,WAAjB,CAEOA,CADPjB,cAAA,CAAeiB,WAAf,CAAmB,IAAKT,CAAAA,WAAxB,CACOS,CAAAA,WAEHM,QAAAA,CAAcxB,2BAAA,CAA4B,IAAKS,CAAAA,WAAjC,CAElB,OAAIK,YAAYW,CAAAA,oBAAhB,CAISD,OAJT,CAOO,WAPP,CAOkB5B,qBAAsB8B,CAAAA,iBAAtB,CAAwCb,MAAxC,CAPlB,CAOoE,MAPpE,CAO0EW,OAP1E,CAOwF,eA1BpC,CAzBlB,CA8DtCG,iBAAkBA,QAAS,CAACC,QAAD,CAAWd,WAAX,CAAwB,CAC7Cc,QAAJ,GAAiB,IAAKpB,CAAAA,eAAtB,GACE,IAAKA,CAAAA,eAEL,CAFuBoB,QAEvB,CADIC,QACJ,CADqB,EACrB,CAD0BD,QAC1B,CAAIC,QAAJ,GAAuB,IAAKpB,CAAAA,WAA5B,GAIE,IAAKA,CAAAA,WAEL,CAFmBoB,QAEnB,CADIC,WACJ,CADWhC,UAAWiC,CAAAA,OAAX,CAAmB,IAAKrB,CAAAA,WAAxB,CACX;AAAAf,qBAAsBqC,CAAAA,iBAAtB,CAAwCF,WAAxC,CAA8CD,QAA9C,CANF,CAHF,CADiD,CA9Db,CA6EtCI,iBAAkBA,QAAS,EAAG,CAC5BpC,gCAAiCqC,CAAAA,wBAAjC,CAA0D,IAAKxB,CAAAA,WAA/D,CAD4B,CA7EQ,CAAxC,CAmFAjB,OAAOC,CAAAA,OAAP,CAAiBS,OA/H4H;",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/ReactDOMTextComponent.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$ReactDOMTextComponent\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextComponent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMChildrenOperations = require('./DOMChildrenOperations');\nvar DOMPropertyOperations = require('./DOMPropertyOperations');\nvar ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');\nvar ReactMount = require('./ReactMount');\n\nvar assign = require('./Object.assign');\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\nvar setTextContent = require('./setTextContent');\nvar validateDOMNesting = require('./validateDOMNesting');\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactDOMTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactDOMTextComponent = function (props) {\n  // This constructor and its argument is currently used by mocks.\n};\n\nassign(ReactDOMTextComponent.prototype, {\n\n  /**\n   * @param {ReactText} text\n   * @internal\n   */\n  construct: function (text) {\n    // TODO: This is really a ReactText (ReactNode), not a ReactElement\n    this._currentElement = text;\n    this._stringText = '' + text;\n\n    // Properties\n    this._rootNodeID = null;\n    this._mountIndex = 0;\n  },\n\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function (rootID, transaction, context) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (context[validateDOMNesting.ancestorInfoContextKey]) {\n        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);\n      }\n    }\n\n    this._rootNodeID = rootID;\n    if (transaction.useCreateElement) {\n      var ownerDocument = context[ReactMount.ownerDocumentContextKey];\n      var el = ownerDocument.createElement('span');\n      DOMPropertyOperations.setAttributeForID(el, rootID);\n      // Populate node cache\n      ReactMount.getID(el);\n      setTextContent(el, this._stringText);\n      return el;\n    } else {\n      var escapedText = escapeTextContentForBrowser(this._stringText);\n\n      if (transaction.renderToStaticMarkup) {\n        // Normally we'd wrap this in a `span` for the reasons stated above, but\n        // since this is a situation where React won't take over (static pages),\n        // we can simply return the text as it is.\n        return escapedText;\n      }\n\n      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';\n    }\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {ReactText} nextText The next text content\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function (nextText, transaction) {\n    if (nextText !== this._currentElement) {\n      this._currentElement = nextText;\n      var nextStringText = '' + nextText;\n      if (nextStringText !== this._stringText) {\n        // TODO: Save this as pending props and use performUpdateIfNecessary\n        // and/or updateComponent to do the actual update for consistency with\n        // other component types?\n        this._stringText = nextStringText;\n        var node = ReactMount.getNode(this._rootNodeID);\n        DOMChildrenOperations.updateTextContent(node, nextStringText);\n      }\n    }\n  },\n\n  unmountComponent: function () {\n    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);\n  }\n\n});\n\nmodule.exports = ReactDOMTextComponent;\n};"],
"names":["shadow$provide","global","require","module","exports","DOMChildrenOperations","DOMPropertyOperations","ReactComponentBrowserEnvironment","ReactMount","assign","escapeTextContentForBrowser","setTextContent","validateDOMNesting","ReactDOMTextComponent","props","prototype","construct","text","_currentElement","_stringText","_rootNodeID","_mountIndex","mountComponent","rootID","transaction","context","ancestorInfoContextKey","useCreateElement","el","ownerDocument","ownerDocumentContextKey","createElement","setAttributeForID","getID","escapedText","renderToStaticMarkup","createMarkupForID","receiveComponent","nextText","nextStringText","node","getNode","updateTextContent","unmountComponent","unmountIDFromEnvironment"]
}
