shadow$provide.module$node_modules$react_offcanvas$node_modules$react$lib$ReactBrowserEventEmitter=function(global,require,module,exports){var EventConstants=require("module$node_modules$react_offcanvas$node_modules$react$lib$EventConstants");global=require("module$node_modules$react_offcanvas$node_modules$react$lib$EventPluginHub");var EventPluginRegistry=require("module$node_modules$react_offcanvas$node_modules$react$lib$EventPluginRegistry");exports=require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactEventEmitterMixin");
var ReactPerf=require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactPerf"),ViewportMetrics=require("module$node_modules$react_offcanvas$node_modules$react$lib$ViewportMetrics"),assign=require("module$node_modules$react_offcanvas$node_modules$react$lib$Object_assign"),isEventSupported=require("module$node_modules$react_offcanvas$node_modules$react$lib$isEventSupported"),alreadyListeningTo={},isMonitoringScrollValue=!1,reactTopListenersCounter=0,topEventMapping={topAbort:"abort",
topBlur:"blur",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",
topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",
topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},topListenersIDKey="_reactListenersID"+String(Math.random()).slice(2),ReactBrowserEventEmitter=assign({},exports,{ReactEventListener:null,
injection:{injectReactEventListener:function(ReactEventListener){ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);ReactBrowserEventEmitter.ReactEventListener=ReactEventListener}},setEnabled:function(enabled){ReactBrowserEventEmitter.ReactEventListener&&ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled)},isEnabled:function(){return!(!ReactBrowserEventEmitter.ReactEventListener||!ReactBrowserEventEmitter.ReactEventListener.isEnabled())},listenTo:function(registrationName,
contentDocumentHandle){Object.prototype.hasOwnProperty.call(contentDocumentHandle,topListenersIDKey)||(contentDocumentHandle[topListenersIDKey]=reactTopListenersCounter++,alreadyListeningTo[contentDocumentHandle[topListenersIDKey]]={});var isListening=alreadyListeningTo[contentDocumentHandle[topListenersIDKey]];registrationName=EventPluginRegistry.registrationNameDependencies[registrationName];for(var topLevelTypes=EventConstants.topLevelTypes,i=0;i<registrationName.length;i++){var dependency=registrationName[i];
isListening.hasOwnProperty(dependency)&&isListening[dependency]||(dependency===topLevelTypes.topWheel?isEventSupported("wheel")?ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel,"wheel",contentDocumentHandle):isEventSupported("mousewheel")?ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel,"mousewheel",contentDocumentHandle):ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel,"DOMMouseScroll",contentDocumentHandle):
dependency===topLevelTypes.topScroll?isEventSupported("scroll",!0)?ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll,"scroll",contentDocumentHandle):ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll,"scroll",ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE):dependency===topLevelTypes.topFocus||dependency===topLevelTypes.topBlur?(isEventSupported("focus",!0)?(ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus,
"focus",contentDocumentHandle),ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur,"blur",contentDocumentHandle)):isEventSupported("focusin")&&(ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus,"focusin",contentDocumentHandle),ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur,"focusout",contentDocumentHandle)),isListening[topLevelTypes.topBlur]=!0,isListening[topLevelTypes.topFocus]=!0):topEventMapping.hasOwnProperty(dependency)&&
ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency,topEventMapping[dependency],contentDocumentHandle),isListening[dependency]=!0)}},trapBubbledEvent:function(topLevelType,handlerBaseName,handle){return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType,handlerBaseName,handle)},trapCapturedEvent:function(topLevelType,handlerBaseName,handle){return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType,handlerBaseName,handle)},ensureScrollValueMonitoring:function(){isMonitoringScrollValue||
(ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(ViewportMetrics.refreshScrollValues),isMonitoringScrollValue=!0)},eventNameDispatchConfigs:global.eventNameDispatchConfigs,registrationNameModules:global.registrationNameModules,putListener:global.putListener,getListener:global.getListener,deleteListener:global.deleteListener,deleteAllListeners:global.deleteAllListeners});ReactPerf.measureMethods(ReactBrowserEventEmitter,"ReactBrowserEventEmitter",{putListener:"putListener",deleteListener:"deleteListener"});
module.exports=ReactBrowserEventEmitter}
//# sourceMappingURL=module$node_modules$react_offcanvas$node_modules$react$lib$ReactBrowserEventEmitter.js.map
