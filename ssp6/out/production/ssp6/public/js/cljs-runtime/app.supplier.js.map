{"version":3,"sources":["app/supplier.cljc"],"mappings":"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","names":["app.supplier/!state-supplier","cljs.core.atom","app.supplier/set-supplier","name","cljs.core.swap_BANG_","cljs.core/assoc-in","app.supplier/set-msg-replier","id","app.supplier/set-author-name!","app.supplier/set-username!","app.supplier/set-password!","password","app.supplier/proposal-table","data","js/shadow.js.shim.module$react_data_table_component$default","v","row","app.supplier/admin-user-table","cljs.core.js__GT_clj","app.supplier/reactive-btn","action","G__59094","js/Error","js/module$node_modules$reactive_button$dist$index_cjs","app.supplier/proposal-table-edit","app.supplier/IMG","url","user"],"sourcesContent":["(ns app.supplier\r\n  #?(:cljs (:require-macros [app.customer :refer [with-reagent]]))\r\n  (:require clojure.edn\r\n            app.admin\r\n            contrib.ednish\r\n            [hyperfiddle.electric-ui4 :as ui4]\r\n            #?(:clj [contrib.datomic-contrib :as dx])\r\n            #?(:cljs contrib.datomic-cloud-contrib)\r\n            [contrib.gridsheet :as gridsheet :refer [Explorer]]\r\n            [hyperfiddle.electric :as e]\r\n            [contrib.str :refer [empty->nil]]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.history :as history]\r\n            [missionary.core :as m]\r\n            #?(:clj [datomic.client.api :as dt])\r\n            #?(:cljs [\"react\" :as react])\r\n            #?(:cljs [\"slate\" :refer [createEditor]])\r\n            #?(:cljs [\"slate-react\" :refer [Slate Editable withReact]])\r\n            #?(:cljs [reagent.core :as r])\r\n            #?(:cljs [reagent.dom :as rdom])\r\n            #?(:cljs [\"react-awesome-button\" :as AwesomeButton])\r\n            #?(:cljs [\"react-dom/client\" :as ReactDom])\r\n            #?(:cljs [\"react-data-table-component$default\" :as DataTable])\r\n            #?(:cljs [\"react-offcanvas$default\" :as offcanvas])\r\n            #?(:cljs [\"reactive-button\" :as ReactiveButton])\r\n            #?(:cljs [\"@yaireo/ui-switch\" :as Switch])\r\n            [clojure.string :as str]))\r\n\r\n\r\n;todo Delete user icin datomic schemasi degisecek. Yeni bir entity tyoe eklencek. Aktif kullanici olup olmadigi kontorl edilecek.\r\n\r\n(e/def conn)\r\n(e/def db)\r\n\r\n(def !state-supplier (atom {:selected-supplier \"\"\r\n                            :types []\r\n                            :proposal {:supplier \"\"\r\n                                       :price \"\"\r\n                                       :project \"\"\r\n                                       :timestamp 0}\r\n                            :author {:name \"\"\r\n                                     :company \"\"\r\n                                     :password \"\"}\r\n                            :selected-company \"\"\r\n                            :selected-user \"\"\r\n                            :admin false\r\n                            :login-credentials {:user-name \"\" :password \"\" :login-message \"\"}\r\n                            :msg/reply 0\r\n                            :msg/author \"\"\r\n                            :clicker {:proposal {:title \"\" :click false}\r\n                                      :img {:name \"\" :click false}}\r\n                            :admin-user-selection []\r\n                            :buttons {:delete false\r\n                                      :edit false\r\n                                      :create false\r\n                                      :message \"\"}}))\r\n\r\n(defn set-supplier [name]\r\n  (swap! !state-supplier assoc-in [:selected-supplier] name))\r\n\r\n(defn set-msg-replier [id]\r\n  (swap! !state-supplier assoc-in [:msg/reply] id))\r\n(defn set-author-name! [name]\r\n  (swap! !state-supplier assoc-in [:author :name] name))\r\n\r\n#?(:clj (defn next-proposal-id [db]\r\n          (if (empty? (dt/q '[:find (max ?id)\r\n                              :where [_ :proposal/id ?id]] db))\r\n            1\r\n            (inc (ffirst (dt/q '[:find (max ?id)\r\n                                 :where [_ :proposal/id ?id]] db))))))\r\n#?(:clj (defn next-chat-id [db]\r\n          (if (empty? (dt/q '[:find (max ?id)\r\n                              :where [_ :chat/id ?id]] db))\r\n            1\r\n            (inc (ffirst (dt/q '[:find (max ?id)\r\n                                 :where [_ :chat/id ?id]] db))))))\r\n#?(:clj (defn next-msg-id [db]\r\n          (if (empty? (dt/q '[:find (max ?id)\r\n                              :where [_ :msg/id ?id]] db))\r\n            1\r\n            (inc (ffirst (dt/q '[:find (max ?id)\r\n                                 :where [_ :msg/id ?id]] db))))))\r\n#?(:clj (defn next-author-id [db]\r\n          (if (empty? (dt/q '[:find (max ?id)\r\n                              :where [_ :author/id ?id]] db))\r\n            1\r\n            (inc (ffirst (dt/q '[:find (max ?id)\r\n                                 :where [_ :author/id ?id]] db))))))\r\n#?(:clj (defn next-password-id [db]\r\n          (if (empty? (dt/q '[:find (max ?id)\r\n                              :where [_ :password/id ?id]] db))\r\n            1\r\n            (inc (ffirst (dt/q '[:find (max ?id)\r\n                                 :where [_ :password/id ?id]] db))))))\r\n\r\n\r\n(defn set-username! [name]\r\n  (swap! !state-supplier assoc-in [:login-credentials :user-name] name))\r\n\r\n(defn set-password! [password]\r\n  (swap! !state-supplier assoc-in [:login-credentials :password] password))\r\n\r\n(e/defn CompanySelect []\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (e/client\r\n              (let [state (e/watch !state-supplier)]\r\n                (if (< 0 (count (:selected-company state)))\r\n                  (dom/div\r\n                    (do (history/navigate! history/!history [:app.main/supplier-user-select (:selected-company state)])))\r\n                  (dom/div\r\n                    (dom/h2 (dom/text \"Select Your Supplier Company\"))\r\n                    (dom/table\r\n                      (dom/th (dom/text \"Name\"))\r\n                      (e/for [value (e/server (dt/q '[:find (pull ?e [*])\r\n                                                      :where [?e :supplier/id _]] (dt/db conn)))]\r\n                             (dom/tr\r\n                               (dom/td (history/link [:app.main/supplier-user-select (:supplier/name (first value))] (dom/text (:supplier/name (first value)))))))))))))))\r\n\r\n\r\n\r\n(e/defn UserSelect [company]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (e/client\r\n              (let [state (e/watch !state-supplier)]\r\n                (let [login (:login-credentials state)]\r\n                  (swap! !state-supplier assoc-in [:selected-company] company)\r\n                  (if (< 0 (count (:selected-user state)))\r\n                    (dom/div\r\n                      (do (history/navigate! history/!history [:app.main/supplier-proposals (:selected-company state)])))\r\n                    (dom/div\r\n                      (dom/h2 (dom/text \"User Login:\"))\r\n                      (dom/text (:login-message login))\r\n                      (dom/div\r\n                        (dom/span (dom/text \"Name:\"))\r\n                        (ui4/input (:user-name login)  (e/fn [v] (set-username! v)))\r\n                        (dom/span (dom/text \"Password:\"))\r\n                        (ui4/input  (:password login) (e/fn [v] (set-password! v)))\r\n                        (ui4/button (e/fn []\r\n                                          (e/server\r\n                                            (if (empty? (dt/q '[:find ?e\r\n                                                                :in $ ?name\r\n                                                                :where [?e :author/name ?name]] (dt/db conn) (:user-name login)))\r\n                                              (e/client (swap! !state-supplier assoc-in [:login-credentials :login-message] \"Wrong username!\"))\r\n                                              (e/client (swap! !state-supplier assoc-in [:login-credentials :login-message] \"\")\r\n                                                        (e/server\r\n                                                          (if (= (:password login) (ffirst (dt/q '[:find ?password\r\n                                                                                                   :in $ ?user\r\n                                                                                                   :where [?e :password/user ?user]\r\n                                                                                                   [?e :password/password ?password]] (dt/db conn) (ffirst (dt/q '[:find ?e\r\n                                                                                                                                                                   :in $ ?name ?company\r\n                                                                                                                                                                   :where [?e :author/name ?name]\r\n                                                                                                                                                                   [?e :author/company ?company]] (dt/db conn) (:user-name login) (ffirst (dt/q '[:find ?e :in $ ?company :where [?e :supplier/name ?company]] (dt/db conn) company)))))))\r\n                                                            (e/client\r\n                                                              (e/server\r\n                                                                (if (ffirst (dt/q '[:find ?admin\r\n                                                                                    :in $ ?user\r\n                                                                                    :where [?e :author/name ?user]\r\n                                                                                           [?e :author/admin ?admin]] (dt/db conn) (:user-name login)))\r\n                                                                  (e/client (swap! !state-supplier assoc-in [:admin] true))))\r\n                                                              (history/navigate! history/!history [:app.main/supplier-proposals (:selected-company state)])\r\n                                                              (swap! !state-supplier assoc-in [:selected-user] (:user-name login)))\r\n                                                            (e/client (swap! !state-supplier assoc-in [:login-credentials :login-message] \"Wrong password!\")))))))) (dom/text \"Login\")))))))))))\r\n\r\n\r\n\r\n#?(:cljs (defn proposal-table [data]\r\n           [:> DataTable {:allowRowEvents true\r\n                          :onRowClicked   (fn [v] (swap! !state-supplier assoc-in [:clicker :proposal :title] (.-title v))\r\n                                            (swap! !state-supplier assoc-in [:clicker :proposal :click] true))\r\n                          :columns [{:name :Title :selector (fn [row] (.-title row))}\r\n                                    {:name :Price :selector (fn [row] (.-price row))}\r\n                                    {:name :Date :selector (fn [row] (.-timestamp row))}\r\n                                    {:name :Customer :selector (fn [row] (.-customer row))}] :data data}]))\r\n#?(:clj (defn proposal-data [db company]\r\n          (vec (map (fn [[id title price timestamp customer]]\r\n                      {:id      id\r\n                       :title   title\r\n                       :price price\r\n                       :timestamp (if (and\r\n                                        (and\r\n                                          (= (.getMonth (java.util.Date.)) (.getMonth (java.util.Date. timestamp)))\r\n                                          (= (.getYear (java.util.Date.)) (.getYear (java.util.Date. timestamp))))\r\n                                        (= (.getDate (java.util.Date.)) (.getDate (java.util.Date. timestamp))))\r\n                                    (.format (java.text.SimpleDateFormat. \"HH:mm:ss\") (java.util.Date. timestamp))\r\n                                    (.format (java.text.SimpleDateFormat. \"MM/dd/yyyy\") (java.util.Date. timestamp)))\r\n                       :customer customer})\r\n                    (vec (->>\r\n                           (dt/q\r\n                             '[:find ?id ?title ?price ?timestamp ?customer\r\n                               :in $ ?company\r\n                               :where\r\n                               [?e :supplier/name ?company]\r\n                               [?p :proposal/supplier ?e]\r\n                               [?p :proposal/id ?id]\r\n                               [?p :proposal/project ?pro]\r\n                               [?pro :project/title ?title]\r\n                               [?p :proposal/timestamp ?timestamp]\r\n                               [?p :proposal/price ?price]\r\n                               [?pro :project/customer ?c]\r\n                               [?c :customer/name ?customer]]\r\n                             db company)))))))\r\n\r\n\r\n(e/defn ProposalPage [name]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n              (e/client\r\n                (let [state (e/watch !state-supplier)]\r\n                  (if (:click (:proposal (:clicker state)))\r\n                    (history/navigate! history/!history [:app.main/customer-project-detail (e/server (ffirst (dt/q '[:find (pull ?e [*])\r\n                                                                                                                     :in $ ?title\r\n                                                                                                                     :where [?e :project/title ?title]] db (:title (:proposal (:clicker state))))))]))\r\n                  (dom/element \"style\" (dom/text \"\r\n                  ul{list-style-type: none; margin: 0; padding: 0; background-color: gray; overflow: auto; }\r\n                  li {float: left;}\r\n                  li a {color: white; padding: 10px 20px; display: inline-block; text-align: center; text-decoration: none;}\r\n                  .home {background-color: darkred;}\r\n                  li a:hover {\r\n                  background-color: #405d27;\r\n                  legend {font-size: 20px; font-style: italic;} p {margin-bottom: 0}\r\n                  }\r\n                  #container {position:absolute;  left: 40%;  top: 50%; margin-left: -50px;  margin-top: -50px; font-style: italic;}\"))\r\n                  (dom/div\r\n                    (if (:admin state)\r\n                      (dom/ul\r\n                        (dom/li (history/link [:app.main/supplier-admin (:selected-company state)] (dom/text \"Admin\")))\r\n                        (dom/li (history/link [:app.main/supplier-create-author name] (dom/text \"Create Author\")))\r\n                        (dom/li (history/link [:app.main/supplier-find-project name] (dom/text \"Find Project\")))\r\n                        (dom/li (history/link [:app.main/supplier-main-message] (dom/text \"Messages\"))))\r\n                      (dom/ul\r\n                        (dom/li (history/link [:app.main/supplier-find-project name] (dom/text \"Find Project\")))\r\n                        (dom/li (history/link [:app.main/supplier-main-message] (dom/text \"Messages\"))))))\r\n\r\n                  (dom/div\r\n\r\n                    (dom/h3 (dom/text \"Proposals\"))\r\n                    (with-reagent proposal-table (clj->js (e/server (proposal-data db name)))))))))))\r\n\r\n#?(:clj (defn admin-user-data [db company]\r\n          (vec (map (fn [[id user password admin]]\r\n                      {:id      id\r\n                       :user user\r\n                       :password password\r\n                       :admin admin})\r\n                    (vec (->>\r\n                           (dt/q\r\n                             '[:find ?id ?user ?password ?admin\r\n                               :in $ ?company\r\n                               :where\r\n                               [?e :supplier/name ?company]\r\n                               [?u :author/company ?e]\r\n                               [?u :author/id ?id]\r\n                               [?u :author/id ?id]\r\n                               [?u :author/name ?user]\r\n                               [?u :author/admin ?admin]\r\n                               [?p :password/user ?u]\r\n                               [?p :password/password ?password]]\r\n                             db company)))))))\r\n\r\n#?(:cljs (defn admin-user-table [data]\r\n           [:> DataTable {:allowRowEvents       true\r\n                          :selectableRows       true\r\n                          :onSelectedRowsChange (fn [v] (swap! !state-supplier assoc-in [:admin-user-selection] (js->clj (.-selectedRows v))))\r\n                          :columns              [{:name :User :sortable true :selector (fn [row] (.-user row))}\r\n                                                 {:name :Password :selector  (fn [row] (.-password row))}\r\n                                                 {:name :Admin :sortable true :selector (fn [row] (str (.-admin row)))}]\r\n                          :data                 data}]))\r\n#?(:cljs (defn reactive-btn [action]\r\n           (case action\r\n             \"Delete\" [:> ReactiveButton {:color \"red\" :idleText \"Delete\" :onClick (fn [] (swap! !state-supplier assoc-in [:buttons :delete] true))}]\r\n             \"Edit\"   [:> ReactiveButton {:color \"yellow\" :idleText \"Edit\" :onClick (fn [] (swap! !state-supplier assoc-in [:buttons :edit] true))}]\r\n             \"Create\" [:> ReactiveButton {:color \"green\" :idleText \"Create\" :onClick (fn [] (swap! !state-supplier assoc-in [:buttons :create] true))}])))\r\n\r\n\r\n(e/defn EditUser [[m company]]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (e/client\r\n              (swap! !state-supplier assoc-in [:buttons :edit] false)\r\n              (let [edit-state (atom {:user-name \"\" :password \"\" :admin false})]\r\n                (let [edit (e/watch edit-state)]\r\n                  (swap! edit-state assoc-in [:admin] (:admin (clojure.walk/keywordize-keys (first m))))\r\n                  (swap! edit-state assoc-in [:user-name] (:user (clojure.walk/keywordize-keys (first m))))\r\n                  (swap! edit-state assoc-in [:password] (:password (clojure.walk/keywordize-keys (first m))))\r\n                  (dom/div\r\n                    (dom/span (dom/text \"User: \"))\r\n                    (dom/input (dom/props {:placeholder (:user (clojure.walk/keywordize-keys (first m)))})\r\n                               (dom/on \"change\" (e/fn [v] (swap! edit-state assoc-in [:user-name] (.-value dom/node))))))\r\n                  (dom/div\r\n                    (dom/span (dom/text \"Password: \"))\r\n                    (dom/input (dom/props {:placeholder (:password (clojure.walk/keywordize-keys (first m)))})\r\n                               (dom/on \"change\" (e/fn [v] (swap! edit-state assoc-in [:password] (.-value dom/node))))))\r\n                  (dom/text edit)\r\n                  (dom/label\r\n                    (dom/text \"Admin: \")\r\n                    (dom/input (dom/props {:type  \"checkbox\"\r\n                                           :name  \"admin\"\r\n                                           :value (:admin (clojure.walk/keywordize-keys (first m)))\r\n                                           :checked (:admin (clojure.walk/keywordize-keys (first m)))})\r\n                               (dom/on \"change\" (e/fn [v]\r\n                                                      (if (.-checked dom/node)\r\n                                                        (swap! edit-state assoc-in [:admin] true)\r\n                                                        (swap! edit-state assoc-in [:admin] false)))))\r\n                    (dom/text (first value)))\r\n                  (ui4/button (e/fn []\r\n                                    (e/server\r\n                                      (dt/transact conn {:tx-data [{:db/id             (ffirst (dt/q '[:find ?e :in $ ?name :where [?u :author/name ?name]\r\n                                                                                                       [?e :password/user ?u]] (dt/db conn) (:user (clojure.walk/keywordize-keys (first m)))))\r\n                                                                    :password/password (:password edit)}]})\r\n                                      (dt/transact conn {:tx-data [{:db/id          (ffirst (dt/q '[:find ?e :in $ ?name :where [?e :author/name ?name]] (dt/db conn) (:user (clojure.walk/keywordize-keys (first m)))))\r\n                                                                    :author/name    (:user-name edit)\r\n                                                                    :author/admin (:admin edit)}]}))\r\n                                    (do (history/navigate! history/!history [:app.main/supplier-admin company])))\r\n\r\n\r\n\r\n\r\n                              (dom/text \"Edit\"))))\r\n\r\n\r\n              (dom/text m)))))\r\n#?(:cljs (defn proposal-table-edit [data]\r\n           [:> DataTable {:allowRowEvents true\r\n                          :selectableRows true\r\n                          :onRowClicked   (fn [v] (swap! !state-supplier assoc-in [:clicker :proposal :title] (.-title v))\r\n                                            (swap! !state-supplier assoc-in [:clicker :proposal :click] true))\r\n                          :columns [{:name :Title :selector (fn [row] (.-title row))}\r\n                                    {:name :Price :selector (fn [row] (.-price row))}\r\n                                    {:name :Date :selector (fn [row] (.-timestamp row))}\r\n                                    {:name :Customer :selector (fn [row] (.-customer row))}] :data data}]))\r\n\r\n(e/defn ProposalEdit [m]\r\n        (e/client (dom/text m)))\r\n(e/defn AdminPage [company]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n              (e/client\r\n                (let [state (e/watch !state-supplier)]\r\n                  (swap! app.admin/!admin-state assoc-in [:table-clickers :supplier :click] false)\r\n                  (if (and (empty? (:admin-user-selection state)) (or (:delete (:buttons state)) (:edit (:buttons state))))\r\n                    (swap! !state-supplier assoc-in [:buttons :message] \"Please Select User\")\r\n                    (do\r\n                      (swap! !state-supplier assoc-in [:buttons :message] \"\")\r\n                      (if (:edit (:buttons state))\r\n                        (history/navigate! history/!history [:app.main/supplier-admin-edit [(:admin-user-selection state) company]]))))\r\n                  (if (:create (:buttons state))\r\n                    (history/navigate! history/!history [:app.main/supplier-create-author company]))\r\n\r\n\r\n                  (dom/text (:message (:buttons state)))\r\n                  (dom/h3 (dom/text \"Total registered user: \" (e/server (ffirst (dt/q '[:find (count ?e)\r\n                                                                                        :in $ ?company\r\n                                                                                        :where [?c :supplier/name ?company]\r\n                                                                                        [?e :author/company ?c]] db company)))))\r\n                  (with-reagent admin-user-table (clj->js (e/server (admin-user-data db company))))\r\n                  (dom/ul (dom/props {:background-color \"white\"})\r\n                    (dom/li (with-reagent reactive-btn \"Delete\"))\r\n                    (dom/li (with-reagent reactive-btn \"Edit\"))\r\n                    (dom/li (with-reagent reactive-btn \"Create\")))\r\n\r\n                  (dom/div\r\n                    (dom/h3 (dom/text  \"Proposal Edit:\"))\r\n                    (with-reagent proposal-table-edit (clj->js (e/server (proposal-data db company)))))))))))\r\n\r\n\r\n\r\n\r\n\r\n\r\n(e/defn CreateAuthor [name]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (e/client\r\n              (dom/div\r\n                (let [state (e/watch !state-supplier)]\r\n                  (let [auth (:author state)]\r\n                    (swap! !state-supplier assoc-in [:buttons :create] false)\r\n                    (dom/div\r\n                      (dom/span (dom/text \"Author Name:\"))\r\n                      (ui4/input (:name auth) (e/fn [v] (set-author-name! v)))\r\n                      (dom/span (dom/text \"Password: \"))\r\n                      (ui4/input (:password auth) (e/fn [v] (swap! !state-supplier assoc-in [:author :password] v))))\r\n                    (dom/div\r\n                      (dom/text name)\r\n                      (ui4/button (e/fn []\r\n                                        (e/server (dt/transact conn {:tx-data [{:author/id      (next-author-id (dt/db conn))\r\n                                                                                :author/name    (:name auth)\r\n                                                                                :author/admin false\r\n                                                                                :author/company (ffirst (dt/q '[:find ?e :in $ ?name :where [?e :supplier/name ?name]] (dt/db conn) name))}]})\r\n                                                  (dt/transact conn {:tx-data [{:password/id       (next-password-id (dt/db conn))\r\n                                                                                :password/user     (ffirst (dt/q '[:find ?e :in $ ?name :where [?e :author/name ?name]] (dt/db conn) (:name auth)))\r\n                                                                                :password/password (:password auth)}]})))\r\n\r\n\r\n\r\n                                  (dom/text \"Create Author\"))))))))))\r\n\r\n(e/defn FindProject [supplier-name]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n              (e/client\r\n                (let [project (e/watch !state-supplier)]\r\n                  (let [!filter-project (atom \"\"), filter-project (e/watch !filter-project)]\r\n                    (dom/span (dom/text \"Project search via type: \\n\"))\r\n                    (e/for [value (e/server (dt/q '[:find ?name\r\n                                                    :where [?e :type/name ?name]] (dt/db conn)))]\r\n                           (dom/label\r\n                             (dom/input (dom/props {:type  \"checkbox\"\r\n                                                    :name  (first value)\r\n                                                    :value \"true\"})\r\n                                        (dom/on \"change\" (e/fn [v]\r\n                                                               (if (and (.-checked dom/node) (not (some (partial = (str (.-name dom/node))) (:types project))))\r\n                                                                 #_(swap! data update :nums conj {:first 1 :second 2})\r\n                                                                 (swap! !state-supplier update-in [:types] conj (str (.-name dom/node)))\r\n                                                                 (if (some (partial = (str (.-name dom/node))) (:types project))\r\n                                                                   (swap! !state-supplier update-in [:types] (fn [types] (vec (remove #(= (str (.-name dom/node)) %) types))))\r\n                                                                   nil))\r\n                                                               (reset! !filter-project (str (.-name dom/node))))))\r\n\r\n\r\n\r\n\r\n\r\n                             (dom/text (first value))))\r\n                    (dom/text filter-project)\r\n                    (dom/table (dom/props {:border \"1px\" \"solid\" \"black\"})\r\n                               (dom/th (dom/text \"Title\"))\r\n                               (dom/th (dom/text \"Status\"))\r\n                               (dom/th (dom/text \"Description\"))\r\n                               (dom/th (dom/text \"Author\"))\r\n                               (dom/th (dom/text \"Company\"))\r\n                               (dom/th (dom/text \"Create Date\"))\r\n                               (dom/th (dom/text \"Proposal\"))\r\n                               (e/for [value (e/server (dt/q '[:find (pull ?p [*])\r\n                                                               :in $  [?t]\r\n                                                               :where [?p :project/types ?t]] db [(ffirst (dt/q '[:find ?e :in $ ?type :where [?e :type/name ?type]] db filter-project))]))]\r\n                                      (dom/tr\r\n                                        (dom/td (dom/text (:project/title (first value))))\r\n                                        (dom/td (dom/text (:project/status (first value))))\r\n                                        (dom/td (dom/text (:project/description (first value))))\r\n                                        (dom/td (dom/text (e/server (ffirst (dt/q '[:find ?name\r\n                                                                                    :in $ ?a\r\n                                                                                    :where [?a :author/name ?name]] db (:db/id (:project/author (first value))))))))\r\n                                        (dom/td (dom/text (e/server (ffirst (dt/q '[:find ?company\r\n                                                                                    :in $ ?c\r\n                                                                                    :where [?c :customer/name ?company]] db (:db/id (first (:project/customer (first value)))))))))\r\n                                        (dom/td (dom/text (e/server (if (and\r\n                                                                          (and\r\n                                                                            (= (.getMonth (java.util.Date.)) (.getMonth (java.util.Date. (:project/create_date (first value)))))\r\n                                                                            (= (.getYear (java.util.Date.)) (.getYear (java.util.Date. (:project/create_date (first value))))))\r\n                                                                          (= (.getDate (java.util.Date.)) (.getDate (java.util.Date. (:project/create_date (first value))))))\r\n                                                                      (.format (java.text.SimpleDateFormat. \"HH:mm:ss\") (java.util.Date. (:project/create_date (first value))))\r\n                                                                      (.format (java.text.SimpleDateFormat. \"MM/dd/yyyy\") (java.util.Date. (:project/create_date (first value))))))))\r\n                                        (dom/td (history/link [::send-proposal [(first value) supplier-name]] (dom/text \"Select\")))))))))))))\r\n\r\n#?(:cljs (defn IMG [url user]\r\n           [:div {:style {:float \"right\"}}\r\n            [:img {:onClick (fn [] (swap! !state-supplier assoc-in [:clicker :img :click] true)\r\n                                   (swap! !state-supplier assoc-in [:clicker :img :name] user))\r\n                   :src url :width 50 :style {:border-radius \"50%\"}}]\r\n            [:p {:style {:font-size \"15px\"}}  user]]))\r\n\r\n(e/defn ProfilePage [author]\r\n        (e/client\r\n          (swap! !state-supplier assoc-in [:clicker :img :click] false)\r\n          (dom/text author)))\r\n\r\n(e/defn MainMessage []\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n              (e/client\r\n                (let [state (e/watch !state-supplier)]\r\n                  (with-reagent IMG \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\" (:selected-user state))\r\n                  (dom/div\r\n                    (dom/table\r\n                      (dom/th (dom/text \"Project\"))\r\n                      (dom/th (dom/text \"Customer\"))\r\n                      (dom/th (dom/text \"Author\"))\r\n                      (e/for [value (e/server (flatten (map (fn [m] (dt/q '[:find (pull ?project-id [*])\r\n                                                                            :in $ ?project-id\r\n                                                                            :where [?project-id :project/status :inactive]] db (:db/id (:proposal/project m))))\r\n                                                            (flatten (dt/q '[:find (pull ?e [*])\r\n                                                                             :in $ ?supplier-name\r\n                                                                             :where [?s :supplier/name ?supplier-name]\r\n                                                                             [?e :proposal/supplier ?s]] db (:selected-company state))))))]\r\n                             (dom/tr\r\n                               (dom/td (dom/text (:project/title value)))\r\n                               (dom/td (dom/text (e/server (ffirst (dt/q '[:find ?name\r\n                                                                           :in $ ?e\r\n                                                                           :where [?e :customer/name ?name]] db (:db/id (first (:project/customer value))))))))\r\n                               (dom/td (history/link [:app.main/supplier-chat [(:project/title value) (:selected-user state)]] (dom/text (e/server (ffirst (dt/q '[:find ?name :in $ ?e :where [?e :author/name ?name]] db (:db/id (:project/author value))))))))))))))))))\r\n\r\n#?(:clj (defn reply_finder [db ref]\r\n          (dt/q '[:find (pull ?e [*])\r\n                  :in $ ?ref\r\n                  :where [?e :msg/reply_to ?ref]] db ref)))\r\n(e/defn ChatPage [[title author]]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n              (e/client\r\n                (let [state (e/watch !state-supplier)]\r\n                  (dom/table\r\n                    (e/for [msg (reverse (e/server (dt/q '[:find (pull ?e [*])\r\n                                                           :in $ ?title\r\n                                                           :where [?e :msg/title ?title]\r\n                                                           [?e :msg/timestamp ?timestamp]\r\n                                                           (not [?e :msg/reply_to _])] db title)))]\r\n                           (dom/tr\r\n                             (dom/text (e/server (ffirst (dt/q '[:find ?name :in $ ?id :where [?id :author/name ?name]] db (:db/id (:msg/author (first msg)))))) \"-->\" (:msg/message (first msg)) \"--\" (:msg/timestamp (first msg)))\r\n                             (ui4/button (e/fn []\r\n                                               (swap! !state-supplier assoc-in [:msg/reply] (:db/id (first msg)))) (dom/text \"Reply\"))\r\n                             (dom/table\r\n                               (dom/div (e/for [rply (reverse (e/server (reply_finder db (:db/id (first msg)))))]\r\n                                               (dom/tr\r\n                                                 (dom/text (e/server (ffirst (dt/q '[:find ?name :in $ ?id :where [?id :author/name ?name]] db (:db/id (:msg/author (first rply)))))) \"-->\" (:msg/message (first rply) ) \"--\" (:msg/timestamp (first rply)))\r\n                                                 (ui4/button (e/fn []\r\n                                                                   (swap! !state-supplier assoc-in [:msg/reply] (:db/id (first rply)))) (dom/text \"Reply\"))\r\n                                                 #_(if (nil? (:msg/reply_to ()))))))))))\r\n\r\n                  (dom/div\r\n                    (dom/input (dom/props {:placeholder \"Type a message\" :maxlength 100})\r\n                               (dom/on \"keydown\" (e/fn [e]\r\n                                                       (when (= \"Enter\" (.-key e))\r\n                                                         (when-some [v (empty->nil (.substr (.. e -target -value) 0 100))]\r\n                                                           (if (= 0 (:msg/reply state))\r\n                                                             (e/server (dt/transact conn {:tx-data [{:msg/id        (next-msg-id (dt/db conn))\r\n                                                                                                     :msg/title     title\r\n                                                                                                     :msg/message   v\r\n                                                                                                     :msg/timestamp (System/currentTimeMillis)\r\n                                                                                                     :msg/author    (ffirst (dt/q '[:find ?e\r\n                                                                                                                                    :in $ ?name\r\n                                                                                                                                    :where [?e :author/name ?name]] (dt/db conn) author))}]}))\r\n                                                             (e/server (dt/transact conn {:tx-data [{:msg/id        (next-msg-id (dt/db conn))\r\n                                                                                                     :msg/title     title\r\n                                                                                                     :msg/message   v\r\n                                                                                                     :msg/timestamp (System/currentTimeMillis)\r\n                                                                                                     :msg/reply_to  (:msg/reply state)\r\n                                                                                                     :msg/author    (ffirst (dt/q '[:find ?e\r\n                                                                                                                                    :in $ ?name\r\n                                                                                                                                    :where [?e :author/name ?name]] (dt/db conn) author))}]})))\r\n\r\n                                                           (set! (.-value dom/node) \"\"))))))\r\n                    (swap! !state-supplier assoc-in [:msg/reply] 0))))))))\r\n\r\n"]}