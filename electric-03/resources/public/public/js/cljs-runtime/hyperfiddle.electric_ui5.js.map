{"version":3,"sources":["hyperfiddle/electric_ui5.cljc"],"mappings":";AAoBA,AACA,AAAKA,yCAAQ,AAACC,gDAAQC,qBAAKC","names":["hyperfiddle.electric-ui5/tempid?","cljs.core.some_fn","cljs.core/nil?","cljs.core/string?"],"sourcesContent":["(ns hyperfiddle.electric-ui5\r\n  #?(:cljs (:require-macros hyperfiddle.electric-ui5))\r\n  (:refer-clojure :exclude [long double keyword symbol uuid range])\r\n  (:require clojure.edn\r\n            contrib.str\r\n            [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [missionary.core :as m]\r\n            [contrib.debug :as dbg]))\r\n\r\n(defmacro control [event-type parse unparse v V! setter & body]\r\n  `(let [[state# v#] (e/for-event-pending-switch [e# (e/listen> dom/node ~event-type)]\r\n                       (some->> (~parse e#) (new ~V!)))]\r\n     #_(dom/style {:background-color (when (= ::e/pending state#) \"yellow\")})\r\n     ; workaround \"when-true\" bug: extra outer when-some added to guard a nil from incorrectly sneaking through\r\n     (when-some [v# (when (and (not (new dom/Focused?)) (#{::e/init ::e/ok} state#)) ~v)]\r\n       (~setter dom/node (~unparse v#))) ; js coerce\r\n     ~@body\r\n     [state# v#]))\r\n\r\n(e/def local?)\r\n(def tempid? (some-fn nil? string?))\r\n\r\n(defmacro entity [record EnsureEntity & body]\r\n  `(let [[state# e#] (new ~EnsureEntity (:db/id ~record) ~record)]\r\n     (case state# ::e/failed (.error js/console e#) nil)\r\n     ;; mark entity local for downstream code\r\n     (binding [local? (tempid? (:db/id ~record))]\r\n       ~@body)))\r\n\r\n(defmacro input [v V! & body]\r\n  `(dom/input\r\n     (let [[state# v#] (control \"input\" #(-> % .-target .-value) identity ~v ~V! dom/set-val)\r\n           color# (if local? \"blue\" (case state# ::e/init \"gray\", ::e/ok \"green\", ::e/pending \"yellow\", ::e/failed \"red\"))]\r\n       (dom/style {:border-width \"2px\", :border-style \"solid\", :border-color color#, :border-radius \"0.2em\"})\r\n       (when local? (dom/props {:disabled true}))\r\n       (case state# ::e/failed (.error js/console v#) nil)\r\n       ~@body)))\r\n\r\n(defmacro checkbox [v V! & body]\r\n  `(dom/input (dom/props {:type \"checkbox\"})\r\n     (let [[state# v#] (control \"change\" #(-> % .-target .-checked) identity ~v ~V! #(set! (.-checked %) %2))\r\n           color# (if local? \"blue\" (case state# ::e/init \"gray\", ::e/ok \"green\", ::e/pending \"yellow\", ::e/failed \"red\"))]\r\n       (dom/style {:outline-width \"2px\", :outline-style \"solid\", :outline-color color#})\r\n       (when local? (dom/props {:disabled true}))\r\n       (case state# ::e/failed (.error js/console v#) nil)\r\n       ~@body)))\r\n"]}