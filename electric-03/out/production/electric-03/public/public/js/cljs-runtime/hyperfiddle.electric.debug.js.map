{"version":3,"sources":["hyperfiddle/electric/debug.cljc"],"mappings":"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","names":["hyperfiddle.electric.debug/->id","cljs.core/random-uuid","js/hyperfiddle","js/hyperfiddle.electric","js/hyperfiddle.electric.debug","js/hyperfiddle.electric.debug.PEER-ID","hyperfiddle.electric.debug/PEER-ID","var_args","G__41809","hyperfiddle.electric.debug/ex-info*","js/Error","message","data","hyperfiddle.electric.debug.ex_info_STAR_","cause","id","js/hyperfiddle.electric.FailureInfo","cljs.core.assoc","hyperfiddle.electric.debug/ex-id","ex","hyperfiddle.electric.debug/add-stack-frame","frame","cljs.core/ex-message","cljs.core.update","cljs.core/ex-data","cljs.core/conj","or__5045__auto__","cljs.core/ex-cause","hyperfiddle.electric.debug/error","debug-info","failure","err","js/hyperfiddle.electric.Pending","js/missionary.Cancelled","js/hyperfiddle.electric.Failure","hyperfiddle.electric.debug/render-arg","arg","cljs.core/ident?","cljs.core.symbol","*print-level*-orig-val__41815","*print-length*-orig-val__41816","*print-level*-temp-val__41817","*print-length*-temp-val__41818","cljs.core/*print-level*","cljs.core/*print-length*","cljs.core.pr_str","hyperfiddle.electric.debug/serializable-frame","cljs.core.partial","cljs.core/mapv","hyperfiddle.electric.debug/serializable","map","cljs.core/contains?","hyperfiddle.electric.debug/normalize-frame","meta","dbg-in-meta","contrib.data/select-ns","cljs.core.merge","cljs.core.dissoc","hyperfiddle.electric.debug/stack-trace","G__41828","cljs.core.remove","cljs.core._EQ_","cljs.core.filter","cljs.core.reduce","r","cljs.core.conj","map__41832","cljs.core/--destructure-map","cljs.core.get","origin","type","name","params","args","macro","scope","cljs.core.into","and__5043__auto__","cljs.core.not_EQ_","cljs.core/not","fexpr__41835","G__41836","cljs.core/Keyword","G__41837","cljs.core/vec","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","G__41838","cljs.core.map","map__41839","action","target","method","G__41840","cljs.core/rest","cljs.core/name","G__41858","G__41859","cljs.core.mapv","clojure.string.join","cljs.core/nil?","hyperfiddle.electric.debug/unwrap","exception"],"sourcesContent":["(ns hyperfiddle.electric.debug\r\n  (:require #_[hyperfiddle.electric.impl.runtime :as-alias r]\r\n            [clojure.string :as str]\r\n            [contrib.data :as data]\r\n            [hyperfiddle.electric.impl.ir :as-alias ir]\r\n            [hyperfiddle.rcf :as rcf :refer [tests]])\r\n  (:import (hyperfiddle.electric Failure Pending)\r\n           (missionary Cancelled)\r\n           #?(:clj (clojure.lang ExceptionInfo))\r\n           (hyperfiddle.electric FailureInfo)))\r\n\r\n(defn ->id []\r\n  #?(:clj  (java.util.UUID/randomUUID)\r\n     :cljs (random-uuid)))\r\n\r\n(defonce ^{:doc \"A random unique ID generated for each Electric runtime instance (browser tab, jvm). Used to identify origin of a transfered value.\"}\r\n  PEER-ID\r\n  ;; UUID v4 collision probability assumed insignificant for this use case\r\n  (->id))\r\n\r\n(defn ex-info*\r\n  ([message data] (ex-info* message data nil))\r\n  ([message data cause] (ex-info* message data (str (->id)) cause))\r\n  ([message data id cause] (FailureInfo. message (assoc data :hyperfiddle.electric/type ::trace) id cause)))\r\n\r\n(tests \"2 traces with equal values are =\"\r\n  (let [cause #?(:clj (Throwable.) :cljs (js/Error.))]\r\n    (ex-info* \"\" {} cause) := (ex-info* \"\" {} cause)\r\n    nil))\r\n\r\n(defn ex-id [ex] (.-id ^FailureInfo ex))\r\n\r\n(defn add-stack-frame [frame ex]\r\n  (let [frame (assoc frame ::origin PEER-ID)]\r\n   (if (instance? FailureInfo ex)\r\n    (ex-info* (ex-message ex) (update (ex-data ex) ::trace conj frame) (ex-id ex) (or (ex-cause ex) ex))\r\n    (ex-info* (ex-message ex) {::trace [frame]} ex))))\r\n\r\n(defn error [debug-info ^Failure failure]\r\n  (let [err (.-error failure)]\r\n    (if (or (instance? Pending err) (instance? Cancelled err))\r\n      failure\r\n      (Failure. (add-stack-frame debug-info err)))))\r\n\r\n(tests \"rewrapping keeps same ID\"\r\n  (def ex (ex-info* \"x\" {}))\r\n  (ex-id ex) := (ex-id (add-stack-frame {} ex)))\r\n\r\n(defn render-arg [arg]\r\n  (cond\r\n    (string? arg) arg\r\n    (ident? arg)  arg\r\n\r\n    (or (instance? hyperfiddle.electric.Failure arg)\r\n      #?(:clj (instance? Throwable arg)\r\n         :cljs (instance? js/Error arg)))\r\n    (symbol \"<exception>\")\r\n\r\n    :else\r\n    (binding [*print-level*  1\r\n              *print-length* 4]\r\n      (pr-str arg))))\r\n\r\n(defn serializable-frame [frame]\r\n  (if (::serializable frame)\r\n    frame\r\n    (-> (update frame ::args (partial mapv render-arg))\r\n        (assoc ::serializable true))))\r\n\r\n(defn serializable [map]\r\n  (if (contains? map ::trace)\r\n    (update map ::trace (partial mapv serializable-frame))\r\n    map))\r\n\r\n(defn normalize-frame [frame]\r\n  (let [meta        (::meta frame)\r\n        dbg-in-meta (data/select-ns :hyperfiddle.electric.debug (::meta frame))]\r\n    (merge frame dbg-in-meta {::meta (dissoc meta dbg-in-meta)})))\r\n\r\n(defn stack-trace [err]\r\n  (some->> (::trace (ex-data err))\r\n    (remove (fn [frame] (= {} (::name frame)))) ; (do a b) => ({} a b)\r\n    (filter ::type)\r\n    (reduce (fn [r frame]\r\n              (if (string? frame)\r\n                (conj r frame)\r\n                (let [{::keys [origin type name params args macro scope meta]} (normalize-frame frame)]\r\n                  (conj r\r\n                    (into [(when (and (not= PEER-ID origin)\r\n                                   (not (#{:transfer :toggle} type))\r\n                                   \"remote\"))\r\n                           (case scope\r\n                             :lexical \"lexically bound\"\r\n                             :dynamic \"dynamically bound\"\r\n                             nil)]\r\n                      (into\r\n                        (case type\r\n                          :apply         `[\"(\" ~(case name\r\n                                                  hyperfiddle.electric.impl.runtime/fail 'throw\r\n                                                  name)\r\n                                           ~@(map render-arg args) \")\"]\r\n                          :eval (let [{::keys [action target method args]} frame]\r\n                                  (case action\r\n                                    :field-access [\"(\" (str \".-\" method) target \")\"]\r\n                                    :static-call  `[\"(\" ~(str target \"/\" method) ~@(map render-arg (rest args)) \")\"]\r\n                                    :call         `[\"(\" ~(str \".\" method) ~target ~@(map render-arg (rest args))\")\"]\r\n                                    :fn-call      (if (some? name)\r\n                                                    `[\"(\" (clojure.core/fn ~name [~@params] ~'...) ~@(map render-arg args) \")\"]\r\n                                                    `[\"(\" (clojure.core/fn [~@params] ~'...) ~@(map render-arg args) \")\"])\r\n\r\n                                    [\"<unknown interop>\" frame]))\r\n                          :reactive-fn   [\"reactive\" (if (some? name)\r\n                                                       `(~'fn ~name ~args ~'...)\r\n                                                       `(~'fn ~args ~'...))]\r\n                          :reactive-defn [\"reactive\" `(~'defn ~name ~args ~'...)]\r\n                          :try           [\"(try ...)\" ]\r\n                          :catch         [`(~'catch ~@args ~'...)]\r\n                          :finally       [\"(finally ...)\"]\r\n                          :case-clause   [`(~'case ~@args ~'...)]\r\n                          :case-default  [\"case default branch\"]\r\n                          :transfer      [\"transfer to\" (clojure.core/name name)]\r\n                          :toggle        [\"transfer\"]\r\n                          `[\"<unknow frame>\" ~(::ir/op frame)])\r\n                        [(when macro (str \"from macro \" macro))\r\n                         (some->> (:file meta) (str \"in \"))\r\n                         (some->> (:line meta) (str \"line \"))]))))))\r\n      [])\r\n    (mapv (fn [frame] (if (string? frame) frame (str \" in \" (str/join \" \" (remove nil? frame))))))\r\n    (str/join \"\\n\")))\r\n\r\n(defn unwrap [exception]\r\n  (if (= ::trace (:hyperfiddle.electric/type (ex-data exception)))\r\n    (ex-cause exception)\r\n    exception))\r\n"]}