shadow$provide.module$node_modules$react_offcanvas$node_modules$react$lib$ReactInstanceHandles=function(global,require,module,exports){function isBoundary(id,index){return"."===id.charAt(index)||index===id.length}function isValidID(id){return""===id||"."===id.charAt(0)&&"."!==id.charAt(id.length-1)}function isAncestorIDOf(ancestorID,descendantID){return 0===descendantID.indexOf(ancestorID)&&isBoundary(descendantID,ancestorID.length)}function getParentID(id){return id?id.substr(0,id.lastIndexOf(".")):
""}function getNextDescendantID(ancestorID,destinationID){isValidID(ancestorID)&&isValidID(destinationID)?void 0:invariant(!1,"getNextDescendantID(%s, %s): Received an invalid React DOM ID.",ancestorID,destinationID);isAncestorIDOf(ancestorID,destinationID)?void 0:invariant(!1,"getNextDescendantID(...): React has made an invalid assumption about the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.",ancestorID,destinationID);if(ancestorID===destinationID)return ancestorID;for(ancestorID=ancestorID.length+
1;ancestorID<destinationID.length&&!isBoundary(destinationID,ancestorID);ancestorID++);return destinationID.substr(0,ancestorID)}function getFirstCommonAncestorID(oneID,twoID){var minLength=Math.min(oneID.length,twoID.length);if(0===minLength)return"";for(var lastCommonMarkerIndex=0,i=0;i<=minLength;i++)if(isBoundary(oneID,i)&&isBoundary(twoID,i))lastCommonMarkerIndex=i;else if(oneID.charAt(i)!==twoID.charAt(i))break;minLength=oneID.substr(0,lastCommonMarkerIndex);isValidID(minLength)?void 0:invariant(!1,
"getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s",oneID,twoID,minLength);return minLength}function traverseParentPath(start,stop,cb,arg,skipFirst,skipLast){start=start||"";stop=stop||"";start===stop?invariant(!1,"traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.",start):void 0;var traverseUp=isAncestorIDOf(stop,start);traverseUp||isAncestorIDOf(start,stop)?void 0:invariant(!1,"traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do not have a parent path.",
start,stop);for(var depth=0,traverse=traverseUp?getParentID:getNextDescendantID,id=start;;id=traverse(id,stop)){var ret;skipFirst&&id===start||skipLast&&id===stop||(ret=cb(id,traverseUp,arg));if(!1===ret||id===stop)break;1E4>depth++?void 0:invariant(!1,"traverseParentPath(%s, %s, ...): Detected an infinite loop while traversing the React DOM ID tree. This may be due to malformed IDs: %s",start,stop,id)}}var ReactRootIndex=require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactRootIndex"),
invariant=require("module$node_modules$fbjs$lib$invariant");module.exports={createReactRootID:function(){return"."+ReactRootIndex.createReactRootIndex().toString(36)},createReactID:function(rootID,name){return rootID+name},getReactRootIDFromNodeID:function(id){if(id&&"."===id.charAt(0)&&1<id.length){var index=id.indexOf(".",1);return-1<index?id.substr(0,index):id}return null},traverseEnterLeave:function(leaveID,enterID,cb,upArg,downArg){var ancestorID=getFirstCommonAncestorID(leaveID,enterID);ancestorID!==
leaveID&&traverseParentPath(leaveID,ancestorID,cb,upArg,!1,!0);ancestorID!==enterID&&traverseParentPath(ancestorID,enterID,cb,downArg,!0,!1)},traverseTwoPhase:function(targetID,cb,arg){targetID&&(traverseParentPath("",targetID,cb,arg,!0,!1),traverseParentPath(targetID,"",cb,arg,!1,!0))},traverseTwoPhaseSkipTarget:function(targetID,cb,arg){targetID&&(traverseParentPath("",targetID,cb,arg,!0,!0),traverseParentPath(targetID,"",cb,arg,!0,!0))},traverseAncestors:function(targetID,cb,arg){traverseParentPath("",
targetID,cb,arg,!0,!1)},getFirstCommonAncestorID,_getNextDescendantID:getNextDescendantID,isAncestorIDOf,SEPARATOR:"."}}
//# sourceMappingURL=module$node_modules$react_offcanvas$node_modules$react$lib$ReactInstanceHandles.js.map
