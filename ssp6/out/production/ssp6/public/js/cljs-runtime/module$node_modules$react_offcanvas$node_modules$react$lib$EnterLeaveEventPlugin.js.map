{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$EnterLeaveEventPlugin.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/EnterLeaveEventPlugin.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$EnterLeaveEventPlugin\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EnterLeaveEventPlugin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\nvar ReactMount = require('./ReactMount');\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar getFirstReactDOM = ReactMount.getFirstReactDOM;\n\nvar eventTypes = {\n  mouseEnter: {\n    registrationName: keyOf({ onMouseEnter: null }),\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]\n  },\n  mouseLeave: {\n    registrationName: keyOf({ onMouseLeave: null }),\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]\n  }\n};\n\nvar extractedEvents = [null, null];\n\nvar EnterLeaveEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * For almost every interaction we care about, there will be both a top-level\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n   * we do not extract duplicate events. However, moving the mouse into the\n   * browser from outside will not fire a `mouseout` event. In this case, we use\n   * the `mouseover` top-level event.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\n      return null;\n    }\n    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {\n      // Must not be a mouse in or mouse out - ignoring.\n      return null;\n    }\n\n    var win;\n    if (topLevelTarget.window === topLevelTarget) {\n      // `topLevelTarget` is probably a window object.\n      win = topLevelTarget;\n    } else {\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n      var doc = topLevelTarget.ownerDocument;\n      if (doc) {\n        win = doc.defaultView || doc.parentWindow;\n      } else {\n        win = window;\n      }\n    }\n\n    var from;\n    var to;\n    var fromID = '';\n    var toID = '';\n    if (topLevelType === topLevelTypes.topMouseOut) {\n      from = topLevelTarget;\n      fromID = topLevelTargetID;\n      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);\n      if (to) {\n        toID = ReactMount.getID(to);\n      } else {\n        to = win;\n      }\n      to = to || win;\n    } else {\n      from = win;\n      to = topLevelTarget;\n      toID = topLevelTargetID;\n    }\n\n    if (from === to) {\n      // Nothing pertains to our managed components.\n      return null;\n    }\n\n    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);\n    leave.type = 'mouseleave';\n    leave.target = from;\n    leave.relatedTarget = to;\n\n    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);\n    enter.type = 'mouseenter';\n    enter.target = to;\n    enter.relatedTarget = from;\n\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);\n\n    extractedEvents[0] = leave;\n    extractedEvents[1] = enter;\n\n    return extractedEvents;\n  }\n\n};\n\nmodule.exports = EnterLeaveEventPlugin;\n};"],
"names":["shadow$provide","global","require","module","exports","EventConstants","EventPropagators","SyntheticMouseEvent","ReactMount","keyOf","topLevelTypes","getFirstReactDOM","eventTypes","mouseEnter","registrationName","onMouseEnter","dependencies","topMouseOut","topMouseOver","mouseLeave","onMouseLeave","extractedEvents","EnterLeaveEventPlugin","extractEvents","topLevelType","topLevelTarget","topLevelTargetID","nativeEvent","nativeEventTarget","relatedTarget","fromElement","window","win","doc","ownerDocument","defaultView","parentWindow","toID","fromID","from","to","toElement","getID","leave","getPooled","type","target","enter","accumulateEnterLeaveDispatches"]
}
