shadow$provide.module$node_modules$react_offcanvas$node_modules$react$lib$ReactDOMTextarea=function(global,require,module,exports){function forceUpdateIfMounted(){this._rootNodeID&&ReactDOMTextarea.updateWrapper(this)}function _handleChange(event){event=LinkedValueUtils.executeOnChange(this._currentElement.props,event);ReactUpdates.asap(forceUpdateIfMounted,this);return event}var LinkedValueUtils=require("module$node_modules$react_offcanvas$node_modules$react$lib$LinkedValueUtils"),ReactDOMIDOperations=
require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactDOMIDOperations"),ReactUpdates=require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactUpdates"),assign=require("module$node_modules$react_offcanvas$node_modules$react$lib$Object_assign"),invariant=require("module$node_modules$fbjs$lib$invariant"),warning=require("module$node_modules$fbjs$lib$warning"),ReactDOMTextarea={getNativeProps:function(inst,props,context){null!=props.dangerouslySetInnerHTML?invariant(!1,
"`dangerouslySetInnerHTML` does not make sense on \x3ctextarea\x3e."):void 0;return assign({},props,{defaultValue:void 0,value:void 0,children:inst._wrapperState.initialValue,onChange:inst._wrapperState.onChange})},mountWrapper:function(inst,props){LinkedValueUtils.checkPropTypes("textarea",props,inst._currentElement._owner);var defaultValue=props.defaultValue,children=props.children;null!=children&&(warning(!1,"Use the `defaultValue` or `value` props instead of setting children on \x3ctextarea\x3e."),
null!=defaultValue?invariant(!1,"If you supply `defaultValue` on a \x3ctextarea\x3e, do not pass children."):void 0,Array.isArray(children)&&(1>=children.length?void 0:invariant(!1,"\x3ctextarea\x3e can only have at most one child."),children=children[0]),defaultValue=""+children);null==defaultValue&&(defaultValue="");props=LinkedValueUtils.getValue(props);inst._wrapperState={initialValue:""+(null!=props?props:defaultValue),onChange:_handleChange.bind(inst)}},updateWrapper:function(inst){var value=
LinkedValueUtils.getValue(inst._currentElement.props);null!=value&&ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID,"value",""+value)}};module.exports=ReactDOMTextarea}
//# sourceMappingURL=module$node_modules$react_offcanvas$node_modules$react$lib$ReactDOMTextarea.js.map
