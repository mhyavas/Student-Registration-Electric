{"version":3,"sources":["contrib/assert.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAY+DK;;;;;;;;;;;;wCACtDC;;;;;;;;;sCAAyDD;;;;;;;;;;;;gGACzDC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHT,AAAA,AAAAN,8CAAA;AAAA,AAAA,YAAAC,qCAAA;;;AAAA,GAAAC;AAAA,AAAA,AAAAC,oBAAA,AAAAC,+BAAA,kFAAA,AAAA,qIAAA,2CAAA,6DAAA,AAAA,iDAAA,sDAAA,AAAA,sBAAA,gDAAA,AAAA,6EAAA,mDAAA,AAAA,KAAA,oDAAA,AAAA,GAAA,yDAAA,AAAA,EAAA,qDAAA,AAAA,yGAAA,oDAAA,kBAAAJ,6CAAA,AAAA,AAAAA,2DAAA,eAAAA;;AAAA","names":["contrib.assert/generated__contrib_assert_12","contrib.assert/t_contrib$assert73608","hyperfiddle.rcf/*enabled*","cljs.test/run-block","cljs.test/test-var-block*","js/Error","cljs.core/odd?"],"sourcesContent":["(ns contrib.assert\n  #?(:cljs (:require-macros contrib.assert))\n  (:require [hyperfiddle.rcf :refer [tests]]))\n\n(defmacro check\n  ([v] `(check some? ~v))\n  ([pred v]\n   `(let [pred# ~pred, v# ~v]\n      (when-not (pred# v#) (throw (ex-info (str \"check failed: (\" (pr-str '~pred) \" \" (pr-str '~v) \") for \" (pr-str v#)) {})))\n      v#)))\n\n(tests\n  (check nil) :throws #?(:clj clojure.lang.ExceptionInfo :cljs js/Error)\n  (check odd? 2) :throws #?(:clj clojure.lang.ExceptionInfo :cljs js/Error)\n  (check odd? 1) := 1)"],"x_google_ignoreList":[0]}