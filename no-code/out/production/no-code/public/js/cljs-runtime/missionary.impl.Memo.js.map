{"version":3,"sources":["missionary/impl/Memo.cljs"],"mappings":"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","names":["unused__13625__auto__","self__","G__43104","js/Error","args43103","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Memo/Pub","missionary.impl.Memo/->Pub","task","process","failed","result","alive","this","missionary.impl.Memo/run","missionary.impl.Memo/sub","G__43111","args43108","missionary.impl.Memo/Sub","missionary.impl.Memo/->Sub","pub","missionary.impl.Memo/unsub","missionary.impl.Propagator/dispatch","G__43132","G__43133","fexpr__43131","missionary.impl.Propagator/bind","x","missionary.impl.Propagator/schedule","missionary.impl.Propagator/attach","missionary.impl.Propagator/detach","sub","temp__5808__auto__","missionary.impl.Propagator/reset","G__43142","missionary.impl.Memo/make","fexpr__43143","js/missionary.Cancelled"],"sourcesContent":["(ns missionary.impl.Memo\n  (:import missionary.impl.Propagator\n           missionary.Cancelled))\n\n(declare run sub unsub make)\n\n(deftype Pub [task process failed result alive]\n  IFn\n  (-invoke [this] (run this))\n  IDeref\n  (-deref [this] (sub this)))\n\n(deftype Sub [pub]\n  IFn\n  (-invoke [this] (unsub this)))\n\n(defn run [^Pub pub]\n  (set! (.-alive pub) 0)\n  (Propagator/dispatch (.-failed pub) (.-result pub)))\n\n(defn sub [^Pub pub]\n  (when (nil? (.-process pub))\n    (set! (.-process pub)\n      ((.-task pub)\n       (Propagator/bind\n         (fn [x]\n           (set! (.-result pub) x)\n           (when-not (nil? (.-process pub))\n             (Propagator/schedule))))\n       (Propagator/bind\n         (fn [x]\n           (set! (.-result pub) x)\n           (set! (.-failed pub) true)\n           (when-not (nil? (.-process pub))\n             (Propagator/schedule)))))))\n  (Propagator/attach)\n  (if (identical? (.-result pub) pub)\n    (set! (.-alive pub) (inc (.-alive pub)))\n    (Propagator/detach (.-failed pub) (.-result pub)))\n  (->Sub pub))\n\n(defn unsub [^Sub sub]\n  (when-some [pub (.-pub sub)]\n    (set! (.-pub sub) nil)\n    (when (identical? (.-result pub) pub)\n      (let [alive (.-alive pub)]\n        (if (== 1 alive)\n          (do (Propagator/reset (make (.-task pub)))\n              ((.-process pub)))\n          (do (set! (.-alive pub) (dec alive))\n              (Propagator/detach true (Cancelled. \"Memo subscription cancelled.\"))))))))\n\n(defn make [task]\n  (let [pub (->Pub task nil false nil 0)]\n    (set! (.-result pub) pub)))"]}