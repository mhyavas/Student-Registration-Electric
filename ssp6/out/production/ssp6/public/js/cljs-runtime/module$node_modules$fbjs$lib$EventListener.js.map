{
"version":3,
"file":"module$node_modules$fbjs$lib$EventListener.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,0CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAsBvG,IAAIC,cAAgBH,OAAA,CAAQ,4CAAR,CA8DpBC,OAAOC,CAAAA,OAAP,CAxDoBE,CASlBC,OAAQA,QAAS,CAACC,MAAD,CAASC,SAAT,CAAoBC,QAApB,CAA8B,CAC7C,GAAIF,MAAOG,CAAAA,gBAAX,CAEE,MADAH,OAAOG,CAAAA,gBAAP,CAAwBF,SAAxB,CAAmCC,QAAnC,CAA6C,CAAA,CAA7C,CACO,CAAA,CACLE,OAAQA,QAAS,EAAG,CAClBJ,MAAOK,CAAAA,mBAAP,CAA2BJ,SAA3B,CAAsCC,QAAtC,CAAgD,CAAA,CAAhD,CADkB,CADf,CAKF,IAAIF,MAAOM,CAAAA,WAAX,CAEL,MADAN,OAAOM,CAAAA,WAAP,CAAmB,IAAnB,CAA0BL,SAA1B,CAAqCC,QAArC,CACO,CAAA,CACLE,OAAQA,QAAS,EAAG,CAClBJ,MAAOO,CAAAA,WAAP,CAAmB,IAAnB,CAA0BN,SAA1B;AAAqCC,QAArC,CADkB,CADf,CAVoC,CAT7BJ,CAmClBU,QAASA,QAAS,CAACR,MAAD,CAASC,SAAT,CAAoBC,QAApB,CAA8B,CAC9C,GAAIF,MAAOG,CAAAA,gBAAX,CAEE,MADAH,OAAOG,CAAAA,gBAAP,CAAwBF,SAAxB,CAAmCC,QAAnC,CAA6C,CAAA,CAA7C,CACO,CAAA,CACLE,OAAQA,QAAS,EAAG,CAClBJ,MAAOK,CAAAA,mBAAP,CAA2BJ,SAA3B,CAAsCC,QAAtC,CAAgD,CAAA,CAAhD,CADkB,CADf,CAOLO,QAAQC,CAAAA,KAAR,CAAc,6JAAd,CAEF,OAAO,CACLN,OAAQP,aADH,CAZqC,CAnC9BC,CAqDlBa,gBAAiBA,QAAS,EAAG,EArDXb,CA5BmF;",
"sources":["node_modules/fbjs/lib/EventListener.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fbjs$lib$EventListener\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventListener\n * @typechecks\n */\n\n'use strict';\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\nvar EventListener = {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function (target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function () {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function () {\n          target.detachEvent('on' + eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function (target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function () {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\n      }\n      return {\n        remove: emptyFunction\n      };\n    }\n  },\n\n  registerDefault: function () {}\n};\n\nmodule.exports = EventListener;\n};"],
"names":["shadow$provide","global","require","module","exports","emptyFunction","EventListener","listen","target","eventType","callback","addEventListener","remove","removeEventListener","attachEvent","detachEvent","capture","console","error","registerDefault"]
}
