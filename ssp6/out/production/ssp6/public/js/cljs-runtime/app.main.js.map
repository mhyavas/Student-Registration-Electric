{"version":3,"sources":["app/main.cljc"],"mappings":";;;;;;;;;AAwBS,AAAA;;;uBAAA,+BAAAA,tDAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,mDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,qDAAA,rDAAMD,gEAEFE;AAFJ,AAEU,OAACC,mDAAYD,KAAK,4CAAK,AAACE;;;AAFlC,CAAA,qDAAA,rDAAMJ,gEAGFE,KAAKG;AAHT,AAIG,4DAAA,rDAACC,gDAAoBJ,2BAA4BG;;;AAJpD,CAAA,+CAAA,/CAAML;;AAAN,AAKA,AAAA,kBAAA,0BAAAF,5CAAMc;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,qDAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,uDAAA,vDAAME,kEAAQM,KAAOC;AAArB,AACE,OAASD,YAAK,AAACE,sDAAa,6CAAA,mFAAA,hIAACC,yLAAWF;;;AAD1C,CAAA,0CAAA,1CAAMP;;AAAN;AAAA,CAAA,oCAAA,WAAAC,/CAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAST,AAAKS,0BAAU,6CAAA,2CAAA,6DAAA,2CAAA,qDAAA,WAAA,2DAAA,2CAAA,qDAAA,GAAA,sDAAA,pdAACC;AAGhB,AAEA,AAEA,mCAAA,nCAAMC,8EAAoBC;AAA1B,AACM,qGAAA,mFAAA,2DAAA,5OAACC,mDAAMJ,wBAAUK,8NAA2BF;;AAkBlD,AAkCA,AAeS,uBAAA,vBAAMG;AAAN,AAAA,0FAAA,iHAAA,2CAAA,7GACMC,yKAAsC;AAAA,AAAO,4EAAA,mFAAA,xJAACC,mCAAkBC;GADtE,qDAAA,UAAA,qDAAA,SAAA,qFAAA,UAAA,8FAAA,kBAAA;;AAGT,AASA,AA2DA,AAAKC,wBAAa,wEAAA,2CAAA,4DAAA,2CAAA,AAAA,1NAACC,gDAAQC,mPACoCC;AAE/D","names":["var_args","G__59119","app.main/create-root","js/Error","node","app.main.create_root","cljs.core.gensym","id-prefix","js/module$node_modules$react_dom$client.createRoot","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","app.main/render","seq59121","G__59122","cljs.core/first","cljs.core/next","self__5754__auto__","root","args","reagent.core.as_element","cljs.core.into","app.main/!state-cs","cljs.core.atom","app.main/set-supplier-name!","name","cljs.core.swap_BANG_","cljs.core/assoc-in","app.main/button-test","js/module$node_modules$react_awesome_button$dist$index.AwesomeButton","hyperfiddle.history/navigate!","hyperfiddle.history/!history","app.main/read-edn-str","cljs.core.partial","clojure.edn/read-string","app.main.goog$module$goog$math$Long.fromString"],"sourcesContent":["(ns app.main\r\n    #?(:cljs (:import [goog.math Long]))\r\n    #?(:cljs (:require-macros [app.main :refer [with-reagent]]))\r\n  (:require clojure.edn\r\n            app.customer\r\n            app.supplier\r\n            app.msg-test\r\n            app.admin\r\n            contrib.ednish\r\n            [hyperfiddle.electric-ui4 :as ui4]\r\n            [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.history :as history]\r\n            #?(:clj [datomic.client.api :as dt])\r\n            #?(:cljs [\"react\" :as react])\r\n            #?(:cljs [\"slate\" :refer [createEditor]])\r\n            #?(:cljs [\"slate-react\" :refer [Slate Editable withReact]])\r\n            #?(:cljs [reagent.core :as r])\r\n            #?(:cljs [reagent.dom :as rdom])\r\n            #?(:cljs [\"react-awesome-button\" :as AwesomeButton])\r\n            #?(:cljs [\"react-dom/client\" :as ReactDom])\r\n            #?(:cljs [\"react-data-table-component$default\" :as DataTable])))\r\n\r\n\r\n#?(:cljs (defn create-root\r\n           \"See https://reactjs.org/docs/react-dom-client.html#createroot\"\r\n           ([node] (create-root node (str (gensym))))\r\n           ([node id-prefix]\r\n            (ReactDom/createRoot node #js {:identifierPrefix id-prefix}))))\r\n#?(:cljs (defn render [root & args]\r\n           (.render root (r/as-element (into [:f>] args)))))\r\n\r\n\r\n(defmacro with-reagent [& args]\r\n  `(dom/div\r\n     (let [root# (create-root dom/node)]\r\n       (render root# ~@args)\r\n       (e/on-unmount #(.unmount root#)))))\r\n(def !state-cs (atom {:customer {:name \"\"}\r\n                      :supplier {:name \"\"\r\n                                 :types []}}))\r\n(e/def conn)\r\n\r\n(e/def db)\r\n\r\n(defn set-supplier-name! [name]\r\n      (swap! !state-cs assoc-in [:supplier :name] name))\r\n\r\n#?(:clj (defn next-supplier-id [db]\r\n              (if (empty? (dt/q '[:find (max ?id)\r\n                                  :where [_ :supplier/id ?id]] db))\r\n                1\r\n                (inc (ffirst (dt/q '[:find (max ?id)\r\n                                     :where [_ :supplier/id ?id]] db))))))\r\n#?(:clj (defn next-customer-id [db]\r\n              (if (empty? (dt/q '[:find (max ?id)\r\n                                  :where [_ :customer/id ?id]] db))\r\n                1\r\n                (inc (ffirst (dt/q '[:find (max ?id)\r\n                                     :where [_ :customer/id ?id]] db))))))\r\n#?(:clj (defn type-finder [v db]\r\n              (into [] (flatten (map (fn [s] (into [] (flatten (dt/q '[:find ?e\r\n                                                                       :in $ ?name :where [?e :type/name ?name]] db s)))) v)))))\r\n\r\n(e/defn CreateSupplier []\r\n        (e/client\r\n          (dom/div\r\n            (let [state (e/watch !state-cs)]\r\n                 (let [supplier (:supplier state)]\r\n                      (dom/div\r\n                        (dom/span (dom/text \"Supplier Name:\"))\r\n                        (ui4/input (:name supplier) (e/fn [v] (set-supplier-name! v))))\r\n                      (dom/div\r\n                        (dom/span (dom/text \"Types: \"))\r\n                        (e/for [value (e/server (dt/q '[:find ?name\r\n                                                        :where [?e :type/name ?name]] (dt/db conn)))]\r\n                               (dom/label\r\n                                 (dom/input (dom/props {:type  \"checkbox\"\r\n                                                        :name  (first value)\r\n                                                        :value \"true\"})\r\n                                            (dom/on \"change\" (e/fn [v]\r\n                                                                   (if (and (.-checked dom/node) (not (some (partial = (str (.-name dom/node))) (:types supplier))))\r\n                                                                     #_(swap! data update :nums conj {:first 1 :second 2})\r\n                                                                     (swap! !state-cs update-in [:supplier :types] conj (str (.-name dom/node)))\r\n                                                                     (if (some (partial = (str (.-name dom/node))) (:types supplier)))\r\n                                                                     (swap! !state-cs update-in [:supplier :types] (fn [types] (vec (remove #(= (str (.-name dom/node)) %) types))))\r\n                                                                     nil))))\r\n\r\n\r\n\r\n                                 (dom/text (first value)))))\r\n                      (dom/div\r\n                        (ui4/button (e/fn []\r\n                                          (e/server (dt/transact conn {:tx-data [{:supplier/id (next-supplier-id (dt/db conn))\r\n                                                                                  :supplier/name (:name supplier)\r\n                                                                                  :supplier/types (type-finder (:types supplier) (dt/db conn))}]})))\r\n                                    (dom/text \"Create Supplier\"))))))))\r\n\r\n(e/defn CreateCustomer []\r\n        (e/client\r\n          (dom/div\r\n            (let [state (e/watch !state-cs)]\r\n                 (let [customer (:customer state)]\r\n                      (dom/div\r\n                           (dom/span (dom/text \"Customer Name\"))\r\n                           (ui4/input (:name customer) (e/fn [v] (swap! !state-cs assoc-in [:customer :name] v))))\r\n\r\n\r\n                      (dom/div\r\n                           (ui4/button (e/fn []\r\n                                             (e/server (dt/transact conn {:tx-data [{:customer/id (next-customer-id (dt/db conn))}]\r\n                                                                          :customer/name (:name customer)})))\r\n                                       (dom/text \"Create Customer\"))))))))\r\n#?(:cljs (defn button-test []\r\n           [:> AwesomeButton/AwesomeButton {:onPress (fn [] (history/navigate! history/!history [::customer-page])) :type \"primary\" :size \"medium\" :button-primary-color \"#1e88e5\" :button-primary-color-dark \"#1360a4\"} \"TEST\"]))\r\n\r\n(e/defn MainPage []\r\n        (e/client\r\n          (dom/h1 (dom/text \"Select the Sub Page:\"))\r\n          (dom/div\r\n            (history/link [::create-supplier] (dom/text \"Create Supplier\")))\r\n          (dom/div\r\n            (history/link [::create-customer] (dom/text \"Create Customer\")))\r\n          (with-reagent button-test)))\r\n\r\n(e/defn Page [[page x]]\r\n        (e/client\r\n          (dom/h1 (dom/text \"Software Sourcing Platform\"))\r\n          (dom/link (dom/props {:rel :stylesheet, :href \"gridsheet-optional.css\"}))\r\n          (dom/element \"style\" (dom/text \"\r\n                  ul{list-style-type: none; margin: 0; padding: 0; background-color: orange; overflow: auto; }\r\n                  li {float: left;}\r\n                  li a {color: white; padding: 15px 25px; display: inline-block; text-align: center; text-decoration: none;}\r\n                  .home {background-color: darkred;}\r\n                  li a:hover {\r\n                  background-color: #405d27;\r\n                  legend {font-size: 25px; font-style: italic;} p {margin-bottom: 0}\r\n                  }\r\n\r\n                  tr {vertical-align: inherit; display: table-row}\"))\r\n\r\n          (dom/div\r\n            (dom/ul (dom/props {:class \"ul\"})\r\n                    (dom/li (dom/props {:float \"left\"}) (history/link [::summary] (dom/text \"home\")))\r\n                    (dom/li (dom/props {:float \"left\"}) (history/link [::customer-page] (dom/text \"Customer Side\")))\r\n                    (dom/li (dom/props {:float \"left\"}) (history/link [::supplier-page] (dom/text \"Supplier Side\")))\r\n                    (dom/li (dom/props {:float \"left\"}) (history/link [::admin] (dom/text \"Admin\")))\r\n                    (dom/li (dom/props {:float \"left\"}) (history/link [::msg-test] (dom/text \"MSG_TEST\"))))))\r\n\r\n\r\n\r\n\r\n        (case page\r\n              ::summary (history/router 1 (e/server (MainPage.)))\r\n              ::admin (history/router 1 (e/server (app.admin/AdminPage.)))\r\n              ::admin-companies (history/router 1 (e/server (app.admin/SelectCompany.)))\r\n              ::admin-projects (history/router 1 (e/server (app.admin/Projects.)))\r\n              ::admin-proposals (history/router 1 (e/server (app.admin/Proposals.)))\r\n              ::admin-edit-proposal (history/router 2 (e/server (app.admin/EditProposal. x)))\r\n              ::admin-edit-project (history/router 2 (e/server (app.admin/EditProject. x)))\r\n              ::create-supplier (history/router 1 (e/server (CreateSupplier.)))\r\n              ::create-customer (history/router 1 (e/server (CreateCustomer.)))\r\n              ::customer-page (history/router 1 (e/server (app.customer/CompanySelect.)))\r\n              ::customer-user-select (history/router 2 (e/server (app.customer/UserSelect. x)))\r\n              ::customer-projects (history/router 2 (e/server (app.customer/Projects. x)))\r\n              ::customer-project-detail (history/router 2 (e/server (app.customer/ProjectDetail. x)))\r\n              ::customer-create-project (history/router 2 (e/server (app.customer/CreateProject. x)))\r\n              ::customer-create-author (history/router 2 (e/server (app.customer/CreateAuthor. x)))\r\n              ::customer-admin (history/router 2 (e/server (app.customer/AdminPage. x)))\r\n              ::customer-admin-edit (history/router 2 (e/server (app.customer/EditUser. x)))\r\n              ::customer-main-report (history/router 2 (e/server (app.customer/ReportPage. x)))\r\n              ::supplier-page (history/router 1 (e/server (app.supplier/CompanySelect.)))\r\n              ::supplier-user-select (history/router 2 (e/server (app.supplier/UserSelect. x)))\r\n              ::supplier-proposals (history/router 2 (e/server (app.supplier/ProposalPage. x)))\r\n              ::supplier-create-author (history/router 2 (e/server (app.supplier/CreateAuthor. x)))\r\n              ::supplier-find-project (history/router 2 (e/server (app.supplier/FindProject. x)))\r\n              ::supplier-main-message (history/router 1 (e/server (app.supplier/MainMessage.)))\r\n              ::supplier-profile (history/router 2 (e/server (app.supplier/ProfilePage. x)))\r\n              ::supplier-chat (history/router 2 (e/server (app.supplier/ChatPage. x)))\r\n              ::supplier-admin-edit (history/router 2 (e/server (app.supplier/EditUser. x)))\r\n              ::custom2 (history/router 2 (e/server (app.customer/CustomerPage2. x)))\r\n              ::msg-test (history/router 2 (e/server (app.msg-test/MessageTest.)))\r\n              ::supplier-admin (history/router 2 (e/server (app.supplier/AdminPage. x)))\r\n              (e/client (dom/text \"no matching route: \" (pr-str page)))))\r\n(def read-edn-str (partial clojure.edn/read-string\r\n                           {:readers #?(:cljs {'goog.math/Long goog.math.Long/fromString} ; datomic cloud long ids\r\n                                        :clj {})}))\r\n(e/defn Main []\r\n        (e/client\r\n          (binding [dom/node js/document.body\r\n                    history/encode contrib.ednish/encode-uri\r\n                    history/decode #(or (contrib.ednish/decode-path % clojure.edn/read-string) [::summary])]\r\n                   (history/router (history/HTML5-History.)\r\n                                   #_(set! (.-title js/document) (str (clojure.string/capitalize (name (first history/route))))\r\n                                           \" - Datomic Browser\")\r\n                                   (dom/pre (dom/text (contrib.str/pprint-str history/route)))\r\n\r\n                                   (e/server\r\n                                     (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n                                              (binding [db (dt/db conn)]\r\n                                                       (e/client\r\n                                                         (Page. history/route)))))))))\r\n"]}