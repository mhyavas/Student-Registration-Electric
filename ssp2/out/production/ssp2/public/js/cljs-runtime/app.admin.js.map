{"version":3,"sources":["app/admin.cljc"],"mappings":";AAUA,AACA,AAIA,AAwBA","names":[],"sourcesContent":["(ns app.admin\r\n  (:require clojure.edn\r\n            contrib.ednish\r\n            clojure.string\r\n            [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.electric-ui4 :as ui4]\r\n            [hyperfiddle.history :as history]\r\n            #?(:clj [datomic.client.api :as dt])))\r\n\r\n(e/def conn)\r\n(e/def db)\r\n#_(defn general-setter! [field value]\r\n    (swap! !main-state assoc-in [:stage-student (keyword field)] value))\r\n\r\n(e/defn Items [conn db id]\r\n        (e/server\r\n          (let [e (e/server (flatten (dt/q '[:find ?name ?status\r\n                                             :in $ ?e\r\n                                             :where [?e :field/description ?name]\r\n                                                    [?e :field/status ?status]] db id)))\r\n                name (first e)\r\n                status (last e)]\r\n            (e/client\r\n              (dom/div\r\n                (ui4/checkbox\r\n                  (case status :inactive false, :active true)\r\n                  (e/fn [v]\r\n                        (e/server\r\n                          (dt/transact conn {:tx-data [{:field/description name\r\n                                                        :field/status (if v :active :inactive)}]})\r\n                          nil))\r\n                  (dom/props {:id id}))\r\n                (dom/label (dom/props {:for id}) (dom/text (e/server (first e)))))))))\r\n\r\n#?(:clj (defn todo-records [db]\r\n          (->> (dt/q '[:find (pull ?e [*])\r\n                       :where [?e :field/status]] db)\r\n               (sort-by :field/description))))\r\n(e/defn DomItem []\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n              (e/client\r\n                (e/server\r\n                  (e/for-by :db/id [{:keys [db/id]} (flatten (todo-records db))]\r\n                            (Items. conn db id))))))))\r\n\r\n"]}