shadow$provide.module$node_modules$react_offcanvas$node_modules$react$lib$ReactUpdates=function(global,require,module,exports){function ensureInjected(){ReactUpdates.ReactReconcileTransaction&&batchingStrategy?void 0:invariant(!1,"ReactUpdates: must inject a reconcile transaction class and batching strategy")}function ReactUpdatesFlushTransaction(){this.reinitializeTransaction();this.dirtyComponentsLength=null;this.callbackQueue=CallbackQueue.getPooled();this.reconcileTransaction=ReactUpdates.ReactReconcileTransaction.getPooled(!1)}
function mountOrderComparator(c1,c2){return c1._mountOrder-c2._mountOrder}function runBatchedUpdates(transaction){var len=transaction.dirtyComponentsLength;len!==dirtyComponents.length?invariant(!1,"Expected flush transaction's stored dirty-components length (%s) to match dirty-components array length (%s).",len,dirtyComponents.length):void 0;dirtyComponents.sort(mountOrderComparator);for(var i=0;i<len;i++){var component=dirtyComponents[i],callbacks=component._pendingCallbacks;component._pendingCallbacks=
null;ReactReconciler.performUpdateIfNecessary(component,transaction.reconcileTransaction);if(callbacks)for(var j=0;j<callbacks.length;j++)transaction.callbackQueue.enqueue(callbacks[j],component.getPublicInstance())}}function enqueueUpdate(component){ensureInjected();batchingStrategy.isBatchingUpdates?dirtyComponents.push(component):batchingStrategy.batchedUpdates(enqueueUpdate,component)}var CallbackQueue=require("module$node_modules$react_offcanvas$node_modules$react$lib$CallbackQueue");global=
require("module$node_modules$react_offcanvas$node_modules$react$lib$PooledClass");exports=require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactPerf");var ReactReconciler=require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactReconciler"),Transaction=require("module$node_modules$react_offcanvas$node_modules$react$lib$Transaction"),assign=require("module$node_modules$react_offcanvas$node_modules$react$lib$Object_assign"),invariant=require("module$node_modules$fbjs$lib$invariant"),
dirtyComponents=[],asapCallbackQueue=CallbackQueue.getPooled(),asapEnqueued=!1,batchingStrategy=null,TRANSACTION_WRAPPERS=[{initialize:function(){this.dirtyComponentsLength=dirtyComponents.length},close:function(){this.dirtyComponentsLength!==dirtyComponents.length?(dirtyComponents.splice(0,this.dirtyComponentsLength),flushBatchedUpdates()):dirtyComponents.length=0}},{initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}}];assign(ReactUpdatesFlushTransaction.prototype,
Transaction.Mixin,{getTransactionWrappers:function(){return TRANSACTION_WRAPPERS},destructor:function(){this.dirtyComponentsLength=null;CallbackQueue.release(this.callbackQueue);this.callbackQueue=null;ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);this.reconcileTransaction=null},perform:function(method,scope,a){return Transaction.Mixin.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,method,scope,a)}});global.addPoolingTo(ReactUpdatesFlushTransaction);
var flushBatchedUpdates=function(){for(;dirtyComponents.length||asapEnqueued;){if(dirtyComponents.length){var transaction=ReactUpdatesFlushTransaction.getPooled();transaction.perform(runBatchedUpdates,null,transaction);ReactUpdatesFlushTransaction.release(transaction)}asapEnqueued&&(asapEnqueued=!1,transaction=asapCallbackQueue,asapCallbackQueue=CallbackQueue.getPooled(),transaction.notifyAll(),CallbackQueue.release(transaction))}};flushBatchedUpdates=exports.measure("ReactUpdates","flushBatchedUpdates",
flushBatchedUpdates);var ReactUpdates={ReactReconcileTransaction:null,batchedUpdates:function(callback,a,b,c,d,e){ensureInjected();batchingStrategy.batchedUpdates(callback,a,b,c,d,e)},enqueueUpdate,flushBatchedUpdates,injection:{injectReconcileTransaction:function(ReconcileTransaction){ReconcileTransaction?void 0:invariant(!1,"ReactUpdates: must provide a reconcile transaction class");ReactUpdates.ReactReconcileTransaction=ReconcileTransaction},injectBatchingStrategy:function(_batchingStrategy){_batchingStrategy?
void 0:invariant(!1,"ReactUpdates: must provide a batching strategy");"function"!==typeof _batchingStrategy.batchedUpdates?invariant(!1,"ReactUpdates: must provide a batchedUpdates() function"):void 0;"boolean"!==typeof _batchingStrategy.isBatchingUpdates?invariant(!1,"ReactUpdates: must provide an isBatchingUpdates boolean attribute"):void 0;batchingStrategy=_batchingStrategy}},asap:function(callback,context){batchingStrategy.isBatchingUpdates?void 0:invariant(!1,"ReactUpdates.asap: Can't enqueue an asap callback in a context whereupdates are not being batched.");
asapCallbackQueue.enqueue(callback,context);asapEnqueued=!0}};module.exports=ReactUpdates}
//# sourceMappingURL=module$node_modules$react_offcanvas$node_modules$react$lib$ReactUpdates.js.map
