shadow$provide.module$node_modules$react_offcanvas$node_modules$react$lib$ReactDOMOption=function(global,require,module,exports){var ReactChildren=require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactChildren");global=require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactDOMSelect");var assign=require("module$node_modules$react_offcanvas$node_modules$react$lib$Object_assign"),warning=require("module$node_modules$fbjs$lib$warning"),valueContextKey=global.valueContextKey;
module.exports={mountWrapper:function(inst,props,context){warning(null==props.selected,"Use the `defaultValue` or `value` props on \x3cselect\x3e instead of setting `selected` on \x3coption\x3e.");context=context[valueContextKey];var selected=null;if(null!=context)if(selected=!1,Array.isArray(context))for(var i=0;i<context.length;i++){if(""+context[i]===""+props.value){selected=!0;break}}else selected=""+context===""+props.value;inst._wrapperState={selected}},getNativeProps:function(inst,props,context){context=
assign({selected:void 0,children:void 0},props);null!=inst._wrapperState.selected&&(context.selected=inst._wrapperState.selected);var content="";ReactChildren.forEach(props.children,function(child){null!=child&&("string"===typeof child||"number"===typeof child?content+=child:warning(!1,"Only strings and numbers are supported as \x3coption\x3e children."))});content&&(context.children=content);return context}}}
//# sourceMappingURL=module$node_modules$react_offcanvas$node_modules$react$lib$ReactDOMOption.js.map
