{"version":3,"sources":["user/demo_webview.cljc"],"mappings":";AAWA,GAAA,QAAAA,iCAAAC,8CAAAC;AAAA;AAAA,AAAA,yBAAA,zBAASC;;AAMT,oCAAA,pCAAMC,gFAAiBC,GAAGC;AAA1B,AAAA;;AASA,AAiBA,AAIA","names":["js/user","js/user.demo-webview","js/user.demo-webview.conn","user.demo-webview/conn","user.demo-webview/teeshirt-orders","db","?email"],"sourcesContent":["(ns user.demo-webview\r\n  \"Electric fullstack query/view composition with client/server transfer\"\r\n  (:require #?(:clj [datascript.core :as d])\r\n            [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.electric-ui4 :as ui]))\r\n\r\n; A database backed webview with reactive updates.\r\n; The webview is subscribed to the database, which updates with each transaction.\r\n; Run a transaction (from the REPL) and see the connected tabs update live.\r\n\r\n(defonce conn #?(:cljs nil ; state survives reload\r\n                 :clj  (doto (d/create-conn {:order/email {}})\r\n                         (d/transact! [{:order/email \"alice@example.com\" :order/gender :order/female}\r\n                                       {:order/email \"bob@example.com\" :order/gender :order/male}\r\n                                       {:order/email \"charlie@example.com\" :order/gender :order/male}]))))\r\n\r\n(defn teeshirt-orders [db ?email]\r\n  #?(:clj\r\n     (sort\r\n       (d/q '[:find [?e ...]\r\n              :in $ ?needle :where\r\n              [?e :order/email ?email]\r\n              [(clojure.string/includes? ?email ?needle)]]\r\n            db (or ?email \"\")))))\r\n\r\n(e/defn Teeshirt-orders-view [db]\r\n  (e/client\r\n    (dom/div\r\n      (dom/h2 (dom/text \"frontend/backend webview with server push\"))\r\n      (let [!search (atom \"\"), search (e/watch !search)]\r\n        (ui/input search (e/fn [v] (reset! !search v))\r\n          (dom/props {:placeholder \"Filter...\"}))\r\n        (dom/table (dom/props {:class \"hyperfiddle\"})\r\n          (e/server\r\n            (e/for [id (e/offload #(teeshirt-orders db search))]\r\n              (let [!e (d/entity db id)]\r\n                (e/client\r\n                  (dom/tr\r\n                    (dom/td (dom/text id))\r\n                    (dom/td (dom/text (e/server (:order/email !e))))\r\n                    (dom/td (dom/text (e/server (:order/gender !e))))))))))))))\r\n\r\n(e/defn Webview []\r\n  (let [db (e/watch conn)] ; reactive \"database value\"\r\n    (Teeshirt-orders-view. db)))\r\n\r\n(comment\r\n  #?(:clj (d/transact conn [{:db/id 2 :order/email \"bob2@example.com\"}]))\r\n  #?(:clj (d/transact conn [{:order/email \"dan@example.com\"}]))\r\n  #?(:clj (d/transact conn [{:order/email \"erin@example.com\"}]))\r\n  #?(:clj (d/transact conn [{:order/email \"frank@example.com\"}]))\r\n  )\r\n"]}