{"version":3,"sources":["app/admin.cljc"],"mappings":"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","names":["app.admin/!admin-state","cljs.core.atom","app.admin/supplier-table","data","js/shadow.js.shim.module$react_data_table_component$default","v","cljs.core.swap_BANG_","cljs.core/assoc-in","row","app.admin/customer-table","app.admin/BMenu","js/module$node_modules$hamburger_react$dist_cjs$index.Spin","app.admin/project-table","clojure.string.split","app.admin/proposal-table","app.admin/reactive-btn","action","G__59087","js/Error","js/module$node_modules$reactive_button$dist$index_cjs","app.admin/proposal-detail-table","app.admin/project-detail-table","app.admin/!state-project","cljs.core.js__GT_clj"],"sourcesContent":["(ns app.admin\r\n  #?(:cljs (:require-macros [app.customer :refer [with-reagent]]))\r\n  (:require clojure.edn\r\n            contrib.ednish\r\n            [hyperfiddle.electric-ui4 :as ui4]\r\n            #?(:clj [contrib.datomic-contrib :as dx])\r\n            [contrib.gridsheet :as gridsheet :refer [Explorer]]\r\n            [hyperfiddle.electric :as e]\r\n            [contrib.str :refer [empty->nil]]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.history :as history]\r\n            [missionary.core :as m]\r\n            #?(:clj [datomic.client.api :as dt])\r\n            [clojure.string :as str]\r\n            #?(:cljs [\"react\" :as react])\r\n            #?(:cljs [\"slate\" :refer [createEditor]])\r\n            #?(:cljs [\"slate-react\" :refer [Slate Editable withReact]])\r\n            #?(:cljs [\"react-data-table-component$default\" :as DataTable])\r\n            #?(:cljs [\"hamburger-react\" :as HM])\r\n            #?(:cljs [\"reactive-button\" :as ReactiveButton])))\r\n\r\n(e/def conn)\r\n(e/def db)\r\n\r\n(def !admin-state (atom {:login-credentials {:user-name \"\" :password \"\" :login-message \"\"}\r\n                         :table-clickers {:supplier {:company \"\" :click false}\r\n                                          :customer {:company \"\" :click false}\r\n                                          :proposal {:company \"\" :project-title \"\" :click false}\r\n                                          :project {:company \"\" :title \"\" :click false}}\r\n                         :menu false\r\n                         :project-company \"\"\r\n                         :proposal-company \"\"\r\n                         :admin-login false\r\n                         :buttons {:edit false\r\n                                   :delete false}}))\r\n\r\n\r\n;memberlarin oldugu CRUD sayfasi\r\n;Projelerin oldugu crud sayfasi\r\n;Sirketlerin oldugu CRUD sayfasi\r\n\r\n\r\n#?(:cljs (defn supplier-table [data]\r\n           [:> DataTable {:allowRowEvents true\r\n                          :onRowClicked (fn [v] (swap! !admin-state assoc-in [:table-clickers :supplier :company] (.-company v))\r\n                                          (swap! !admin-state assoc-in [:table-clickers :supplier :click] true))\r\n                          :columns [{:name :Company :selector (fn [row] (.-company row))}\r\n                                    {:name :User :selector (fn [row] (.-user row))}]\r\n                          :data data}]))\r\n#?(:clj (defn supplier-data [db]\r\n          (vec (map (fn [[company user]]\r\n                      {:company company\r\n                       :user user})\r\n                    (vec (->>\r\n                           (dt/q\r\n                             '[:find ?company (count ?a)\r\n                               :where\r\n                               [?e :supplier/name ?company]\r\n                               [?a :author/company ?e]]\r\n                             db)))))))\r\n\r\n#?(:cljs (defn customer-table [data]\r\n           [:> DataTable {:allowRowEvents true\r\n                          :onRowClicked (fn [v] (swap! !admin-state assoc-in [:table-clickers :customer :company] (.-company v))\r\n                                          (swap! !admin-state assoc-in [:table-clickers :customer :click] true))\r\n                          :columns [{:name :Company :selector (fn [row] (.-company row))}\r\n                                    {:name :User :selector (fn [row] (.-user row))}]\r\n                          :data data}]))\r\n\r\n#?(:clj (defn customer-data [db]\r\n          (vec (map (fn [[company user]]\r\n                      {:company company\r\n                       :user user})\r\n                    (vec (->>\r\n                           (dt/q\r\n                             '[:find ?company (count ?a)\r\n                               :where\r\n                               [?e :customer/name ?company]\r\n                               [?a :author/company ?e]]\r\n                             db)))))))\r\n\r\n#?(:cljs (defn BMenu []\r\n           [:> HM/Spin {:direction \"left\" :onToggle (fn [v] (if v (swap! !admin-state assoc-in [:menu] true)\r\n                                                                  (swap! !admin-state assoc-in [:menu] false)))}]))\r\n(e/defn SelectCompany []\r\n  (e/server\r\n    (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n      (e/client\r\n        (let [state (e/watch !admin-state)]\r\n          (if (:menu state)\r\n            (dom/ul\r\n              (dom/li (history/link [:app.main/admin-projects] (dom/text \"Projects\")))\r\n              (dom/li (history/link [:app.main/admin-proposals] (dom/text \"Proposals\")))))\r\n          (with-reagent BMenu)\r\n          (cond\r\n            (:click (:customer (:table-clickers state))) (history/navigate! history/!history [:app.main/customer-admin (:company (:customer (:table-clickers state)))])\r\n            (:click (:supplier (:table-clickers state))) (history/navigate! history/!history [:app.main/supplier-admin (:company (:supplier (:table-clickers state)))]))\r\n          (dom/div\r\n            (dom/h3 (dom/text \"Suppliers\"))\r\n            (with-reagent supplier-table (clj->js (e/server (supplier-data (dt/db conn))))))\r\n          (dom/div\r\n            (dom/h3 (dom/text \"Customers\"))\r\n            (with-reagent customer-table (clj->js (e/server (customer-data (dt/db conn)))))))))))\r\n\r\n\r\n\r\n(e/defn AdminPage []\r\n  (e/server\r\n    (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n      (e/client\r\n        (let [state (e/watch !admin-state)]\r\n          (let [login (:login-credentials state)]\r\n            (if (:admin-login state)\r\n              (history/navigate! history/!history [:app.main/admin-companies])\r\n              (dom/div\r\n                (dom/h2 (dom/text \"User Login:\"))\r\n                (dom/text (:login-message login))\r\n                (dom/div\r\n                  (dom/span (dom/text \"Name:\"))\r\n                  (ui4/input (:user-name login) (e/fn [v] (swap! !admin-state assoc-in [:login-credentials :user-name] v)))\r\n                  (dom/span (dom/text \"Password:\"))\r\n                  (ui4/input (:password login) (e/fn [v] (swap! !admin-state assoc-in [:login-credentials :password] v)))\r\n                  (ui4/button (e/fn []\r\n                                    (e/server\r\n                                      (if (empty? (dt/q '[:find ?e\r\n                                                          :in $ ?name\r\n                                                          :where [?e :admin/name ?name]] (dt/db conn) (:user-name login)))\r\n                                        (e/client (swap! !admin-state assoc-in [:login-credentials :login-message] \"Wrong username!\"))\r\n                                        (e/client (swap! !admin-state assoc-in [:login-credentials :login-message] \"\")\r\n                                                  (e/server\r\n                                                    (if (= (:password login) (ffirst (dt/q '[:find ?password\r\n                                                                                             :in $ ?user\r\n                                                                                             :where [?e :admin/name ?user]\r\n                                                                                             [?e :admin/password ?password]] (dt/db conn) (:user-name login))))\r\n                                                      (e/client\r\n                                                        (swap! !admin-state assoc-in [:admin-login] true)\r\n                                                        (history/navigate! history/!history [:app.main/admin-companies])))))))) (dom/text \"Login\")))))))))))\r\n#?(:clj (defn project-data [db company]\r\n          (vec (map (fn [[title status date author description type]]\r\n                      {:title title\r\n                       :status status\r\n                       :create_date (if (and\r\n                                          (and\r\n                                            (= (.getMonth (java.util.Date.)) (.getMonth (java.util.Date. date)))\r\n                                            (= (.getYear (java.util.Date.)) (.getYear (java.util.Date. date))))\r\n                                          (= (.getDate (java.util.Date.)) (.getDate (java.util.Date. date))))\r\n                                      (.format (java.text.SimpleDateFormat. \"HH:mm:ss\") (java.util.Date. date))\r\n                                      (.format (java.text.SimpleDateFormat. \"MM/dd/yyyy\") (java.util.Date. date)))\r\n                       :author author\r\n                       :description description\r\n                       :type type #_(into [] (flatten (map (fn [mt] (flatten (dt/q '[:find ?name\r\n                                                                                     :in $ ?e\r\n                                                                                     :where [?e :type/name ?name]] db (:db/id mt)))) type)))})\r\n                    (vec (->>\r\n                           (dt/q\r\n                             '[:find ?title ?status ?date ?author ?description ?type\r\n                               :in $ ?company\r\n                               :where\r\n                               [?e :customer/name ?company]\r\n                               [?p :project/customer ?e]\r\n                               [?p :project/title ?title]\r\n                               [?p :project/status ?status]\r\n                               [?p :project/create_date ?date]\r\n                               [?p :project/description ?description]\r\n                               [?p :project/author ?a]\r\n                               [?a :author/name ?author]\r\n                               [?p :project/types ?type]]\r\n                             db company)))))))\r\n\r\n#?(:cljs (defn project-table [data]\r\n           [:> DataTable {:allowRowEvents       true\r\n                          :onRowClicked (fn [v] (swap! !admin-state assoc-in [:table-clickers :project :title] (.-title v))\r\n                                                (swap! !admin-state assoc-in [:table-clickers :project :click] true))\r\n\r\n                          :columns              [{:name :Title :selector (fn [row] (.-title row))}\r\n                                                 {:name :Status :selector (fn [row] (.-status row))}\r\n                                                 {:name :Create_Date :selector (fn [row] (.-create_date row))}\r\n                                                 {:name :Description :selector (fn [row] (.-description row))}\r\n                                                 {:name :Type :selector (fn [row] (str/split (.-type row) #\"(?=[A-Z])\"))}]\r\n                          :data                 data}]))\r\n\r\n(e/defn Projects []\r\n  (e/server\r\n    (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n      (binding [db (dt/db conn)]\r\n        (e/client\r\n          (let [state (e/watch !admin-state)]\r\n            (if (:click (:project (:table-clickers state)))\r\n              (history/navigate! history/!history [:app.main/admin-edit-project (:project (:table-clickers state))]))\r\n            (dom/div\r\n              (dom/span (dom/text \"Company: \"))\r\n              (dom/select\r\n                (e/for [value (e/server (dt/q '[:find ?name :where [?e :customer/name ?name]] db))]\r\n                       (dom/option (dom/text (first value))))\r\n                (dom/on \"change\" (e/fn [v] (swap! !admin-state assoc-in [:project-company] (.-value dom/node))\r\n                                       (swap! !admin-state assoc-in [:table-clickers :project :company] (.-value dom/node))))))\r\n            (with-reagent project-table (clj->js (e/server (project-data db (:project-company state)))))))))))\r\n\r\n#?(:clj (defn proposal-data [db company]\r\n          (vec (map (fn [[title status timestamp price]]\r\n                      {:title title\r\n                       :status status\r\n                       :create_date (if (and\r\n                                          (and\r\n                                            (= (.getMonth (java.util.Date.)) (.getMonth (java.util.Date. timestamp)))\r\n                                            (= (.getYear (java.util.Date.)) (.getYear (java.util.Date. timestamp))))\r\n                                          (= (.getDate (java.util.Date.)) (.getDate (java.util.Date. timestamp))))\r\n                                      (.format (java.text.SimpleDateFormat. \"HH:mm:ss\") (java.util.Date. timestamp))\r\n                                      (.format (java.text.SimpleDateFormat. \"MM/dd/yyyy\") (java.util.Date. timestamp)))\r\n                       :price price})\r\n                    (vec (->>\r\n                           (dt/q\r\n                             '[:find ?title ?status ?timestamp ?price\r\n                               :in $ ?company\r\n                               :where\r\n                               [?e :supplier/name ?company]\r\n                               [?p :proposal/supplier ?e]\r\n                               [?p :proposal/project ?project]\r\n                               [?project :project/title ?title]\r\n                               [?project :project/status ?status]\r\n                               [?p :proposal/timestamp ?timestamp]\r\n                               [?p :proposal/price ?price]]\r\n                             db company)))))))\r\n#?(:cljs (defn proposal-table [data]\r\n           [:> DataTable {:allowRowEvents       true\r\n                          :onRowClicked (fn [v] (swap! !admin-state assoc-in [:table-clickers :proposal :project-title] (.-title v))\r\n                                          (swap! !admin-state assoc-in [:table-clickers :proposal :click] true))\r\n                          :columns              [{:name :Title :selector (fn [row] (.-title row))}\r\n                                                 {:name :Status :selector (fn [row] (.-status row))}\r\n                                                 {:name :Create_Date :selector (fn [row] (.-create_date row))}\r\n                                                 {:name :Price :selector (fn [row] (.-price row))}]\r\n                          :data                 data}]))\r\n\r\n(e/defn Proposals []\r\n  (e/server\r\n    (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n      (binding [db (dt/db conn)]\r\n        (e/client\r\n          (swap! !admin-state assoc-in [:buttons :edit] false)\r\n          (let [state (e/watch !admin-state)]\r\n            (if (:click (:proposal (:table-clickers state)))\r\n              (history/navigate! history/!history [:app.main/admin-edit-proposal (:proposal (:table-clickers state))]))\r\n            (dom/div\r\n              (dom/span (dom/text \"Company: \"))\r\n              (dom/select\r\n                (e/for [value (e/server (dt/q '[:find ?name :where [?e :supplier/name ?name]] db))]\r\n                       (dom/option (dom/text (first value))))\r\n                (dom/on \"change\" (e/fn [v] (swap! !admin-state assoc-in [:proposal-company] (.-value dom/node))\r\n                                           (swap! !admin-state assoc-in [:table-clickers :proposal :company] (.-value dom/node))))))\r\n            (with-reagent proposal-table (clj->js (e/server (proposal-data db (:proposal-company state)))))))))))\r\n\r\n#?(:cljs (defn reactive-btn [action]\r\n           (case action\r\n             \"Delete\" [:> ReactiveButton {:color \"red\" :idleText \"Delete\" :onClick (fn [] (swap! !admin-state assoc-in [:buttons :delete] true))}]\r\n             \"Edit\"   [:> ReactiveButton {:color \"yellow\" :idleText \"Edit\" :onClick (fn [] (swap! !admin-state assoc-in [:buttons :edit] true))}])))\r\n#?(:clj (defn proposal-detail [db company title]\r\n          (vec (map (fn [[title status timestamp price]]\r\n                      {:title       title\r\n                       :status      status\r\n                       :create_date (if (and\r\n                                          (and\r\n                                            (= (.getMonth (java.util.Date.)) (.getMonth (java.util.Date. timestamp)))\r\n                                            (= (.getYear (java.util.Date.)) (.getYear (java.util.Date. timestamp))))\r\n                                          (= (.getDate (java.util.Date.)) (.getDate (java.util.Date. timestamp))))\r\n                                      (.format (java.text.SimpleDateFormat. \"HH:mm:ss\") (java.util.Date. timestamp))\r\n                                      (.format (java.text.SimpleDateFormat. \"MM/dd/yyyy\") (java.util.Date. timestamp)))\r\n                       :price       price})\r\n                    (vec (->>\r\n                           (dt/q\r\n                             '[:find ?title ?status ?timestamp ?price\r\n                               :in $ ?company ?title\r\n                               :where\r\n                               [?e :supplier/name ?company]\r\n                               [?p :proposal/supplier ?e]\r\n                               [?p :proposal/project ?project]\r\n                               [?project :project/title ?title]\r\n                               [?project :project/status ?status]\r\n                               [?p :proposal/timestamp ?timestamp]\r\n                               [?p :proposal/price ?price]]\r\n                             db company title)))))))\r\n#?(:cljs (defn proposal-detail-table [data]\r\n           [:> DataTable {:allowRowEvents true\r\n                          :columns              [{:name :Title :selector (fn [row] (.-title row))}\r\n                                                 {:name :Status :selector (fn [row] (.-status row))}\r\n                                                 {:name :Create_Date :selector (fn [row] (.-create_date row))}\r\n                                                 {:name :Price :selector (fn [row] (.-price row))}]\r\n                          :data                 data}]))\r\n\r\n(e/defn EditProposal [m]\r\n  (e/server\r\n    (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n      (e/client\r\n        (let [edit-state (atom {:price 0 :db-id 0})]\r\n          (let [edit (e/watch edit-state)]\r\n             (let [state (e/watch !admin-state)]\r\n               (if (:edit (:buttons state))\r\n                 (do\r\n                   (e/server (dt/transact conn {:tx-data [{:db/id          (:db-id edit)\r\n                                                           :proposal/price (float (:price edit))}]}))\r\n                   (history/navigate! history/!history [:app.main/admin-proposals])))\r\n\r\n               (swap! !admin-state assoc-in [:table-clickers :proposal :click] false)\r\n               (let [value (e/server (ffirst (dt/q '[:find (pull ?e [*])\r\n                                                     :in $ ?company ?title\r\n                                                     :where [?project :project/title ?title]\r\n                                                     [?supplier :supplier/name ?company]\r\n                                                     [?e :proposal/supplier ?supplier]\r\n                                                     [?e :proposal/project ?project]] (dt/db conn) (:company m) (:project-title m))))]\r\n                 (with-reagent proposal-detail-table (clj->js (e/server (proposal-detail (dt/db conn) (:company m) (:project-title m)))))\r\n                 (dom/div\r\n                   (dom/span (dom/text \"Price: \"))\r\n                   (dom/input (dom/props {:placeholder (:proposal/price value) :type \"number\"})\r\n                              (dom/on \"change\" (e/fn [v] (swap! edit-state assoc-in [:price] (parse-double (.-value dom/node))\r\n                                                                (apply (.-log js/console) [v])\r\n                                                                (swap! edit-state assoc-in [:db-id] (:db/id value))))))))\r\n\r\n               (dom/ul\r\n                 (dom/li (with-reagent reactive-btn \"Delete\"))\r\n                 (dom/li (with-reagent reactive-btn \"Edit\"))))))))))\r\n\r\n\r\n#?(:cljs (defn project-detail-table [data]\r\n           [:> DataTable {:allowRowEvents true\r\n                          :onRowClicked (fn [v] (swap! !state-project assoc-in [:clicker :project-detail :types] (js->clj (.-types v)))\r\n                                          (swap! !state-project assoc-in [:clicker :project-detail :click] true))\r\n                          :columns [{:name :Title :selector (fn [row] (.-title row))}\r\n                                    {:name :Status :selector (fn [row] (.-status row))}\r\n                                    {:name :Create_Date :selector (fn [row] (.-create_date row))}\r\n                                    {:name :Description :selector (fn [row] (.-description row))}\r\n                                    {:name :Types :selector (fn [row] (str/split (.-types row) #\"(?=[A-Z])\"))}] :data data}]))\r\n\r\n(e/defn EditProject [m]\r\n  (e/server\r\n    (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n      (e/client\r\n        (let [state (e/watch !admin-state)]\r\n          (swap! !admin-state assoc-in [:table-clickers :project :click] false)\r\n          (let [edit-state (atom {:title \"\" :status :inactive :description \"\" :types [] :db-id 0})]\r\n            (let [edit (e/watch edit-state)]\r\n              ((if (:edit (:buttons state))\r\n                 (do (e/server (dt/transact conn {:tx-data []})))))\r\n\r\n              (swap! edit-state assoc {:title (:project/title m) :status (:project/status m) :description (:project/description m) :types []})\r\n              (let [value (e/server (ffirst (dt/q '[:find (pull ?p [*])\r\n                                                    :in $ ?company ?title\r\n                                                    :where [?c :customer/name ?company]\r\n                                                    [?p :project/customer ?c]\r\n                                                    [?p :project/title ?title]] (dt/db conn) (:company m) (:title m))))]\r\n                (with-reagent project-detail-table (e/server (app.customer/project-detail-data (dt/db conn) value)))\r\n                (swap! edit-state assoc-in [:types] (e/server (map (fn [m] (ffirst (dt/q '[:find ?name\r\n                                                                                           :in $ ?id\r\n                                                                                           :where [?id :type/name ?name]] (dt/db conn) (:db/id m)))) (:project/types value))))\r\n                (dom/div\r\n                  (dom/span (dom/text \"Title: \"))\r\n                  (dom/input (dom/props {:placeholder (:project/title value)})\r\n                             (dom/on \"change\" (e/fn [v] (swap! edit-state assoc-in [:title] (.-value dom/node)\r\n                                                               (swap! edit-state assoc-in [:db-id] (:db/id value)))))))\r\n                (dom/div\r\n                  (dom/span (dom/text \"Description: \"))\r\n                  (dom/input (dom/props {:placeholder (:project/description value) :type \"text\" :style {:width \"200px\" :word-wrap \"break-word\" :display \"block\" :text-overflow \"hidden\" :box-sizing \"content-box\" :overflow \"visible\" :white-space \"normal\"}}) ;}})\r\n                             (dom/on \"change\" (e/fn [v] (swap! edit-state assoc-in [:description] (.-value dom/node))))))\r\n\r\n                (dom/div\r\n                  (dom/span (dom/text \"Types: \"))\r\n                  (e/for [value (e/server (dt/q '[:find ?name\r\n                                                  :where [?e :type/name ?name]] (dt/db conn)))]\r\n                         (dom/label\r\n                           (dom/input (dom/props {:type  \"checkbox\"\r\n                                                  :name  (first value)\r\n                                                  :value \"true\"})\r\n                                      (dom/on \"change\" (e/fn [v]\r\n                                                             (if (and (.-checked dom/node) (not (some (partial = (str (.-name dom/node))) (:types edit))))\r\n                                                               #_(swap! data update :nums conj {:first 1 :second 2})\r\n                                                               (swap! !state-project update-in [:project :types] conj (str (.-name dom/node)))\r\n                                                               (if (some (partial = (str (.-name dom/node))) (:types project))\r\n                                                                 (swap! !state-project update-in [:project :types] (fn [types] (vec (remove #(= (str (.-name dom/node)) %) types))))\r\n                                                                 nil)))))\r\n\r\n\r\n;todo checkbox kisminda hata var. Guncel typeler checked olacak. Sonrasinda edit-state guncellenecek.\r\n                           ;todo bookmarklanmis if statment true tarafina transact fonksiyonu yazilacak\r\n\r\n\r\n                           (dom/text (first value)))))\r\n\r\n                (dom/ul\r\n                  (dom/li (with-reagent reactive-btn \"Delete\"))\r\n                  (dom/li (with-reagent reactive-btn \"Edit\")))))))))))\r\n\r\n\r\n\r\n\r\n\r\n"]}