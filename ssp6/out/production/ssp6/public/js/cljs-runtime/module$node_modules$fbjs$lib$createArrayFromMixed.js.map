{
"version":3,
"file":"module$node_modules$fbjs$lib$createArrayFromMixed.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,iDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAe9G,IAAIC,QAAUH,OAAA,CAAQ,sCAAR,CAsEdC,OAAOC,CAAAA,OAAP,CAVAE,QAA6B,CAACC,GAAD,CAAM,CACjC,MAAoBA,IAApB,GAvCgB,QAuChB,EAvCE,MAuCkBA,IAApB,EAvC0C,UAuC1C,EAvC4B,MAuCRA,IAApB,GArCE,QAqCF,EAAoBA,IAApB,EAnCE,EAAE,aAAF,EAmCkBA,IAnClB,CAmCF,EAhCyB,QAgCzB,EAhCE,MAgCkBA,IAhCPC,CAAAA,QAgCb,GA9BEC,KAAMC,CAAAA,OAAN,CA8BkBH,GA9BlB,CA8BF,EA5BE,QA4BF,EAAoBA,IAApB,EA1BE,MA0BF,EAAoBA,IAApB,EAEWE,KAAMC,CAAAA,OAAN,CAAcH,GAAd,CAAJ,CACEA,GAAII,CAAAA,KAAJ,EADF,CAGEN,OAAA,CAAQE,GAAR,CALT,CACS,CAACA,GAAD,CAFwB,CA3E2E;",
"sources":["node_modules/fbjs/lib/createArrayFromMixed.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fbjs$lib$createArrayFromMixed\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createArrayFromMixed\n * @typechecks\n */\n\n'use strict';\n\nvar toArray = require('./toArray');\n\n/**\n * Perform a heuristic test to determine if an object is \"array-like\".\n *\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\n *   Joshu replied: \"Mu.\"\n *\n * This function determines if its argument has \"array nature\": it returns\n * true if the argument is an actual array, an `arguments' object, or an\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\n *\n * It will return false for other array-like objects like Filelist.\n *\n * @param {*} obj\n * @return {boolean}\n */\nfunction hasArrayNature(obj) {\n  return(\n    // not null/false\n    !!obj && (\n    // arrays are objects, NodeLists are functions in Safari\n    typeof obj == 'object' || typeof obj == 'function') &&\n    // quacks like an array\n    'length' in obj &&\n    // not window\n    !('setInterval' in obj) &&\n    // no DOM node should be considered an array-like\n    // a 'select' element has 'length' and 'item' properties on IE8\n    typeof obj.nodeType != 'number' && (\n    // a real array\n    Array.isArray(obj) ||\n    // arguments\n    'callee' in obj ||\n    // HTMLCollection/NodeList\n    'item' in obj)\n  );\n}\n\n/**\n * Ensure that the argument is an array by wrapping it in an array if it is not.\n * Creates a copy of the argument if it is already an array.\n *\n * This is mostly useful idiomatically:\n *\n *   var createArrayFromMixed = require('createArrayFromMixed');\n *\n *   function takesOneOrMoreThings(things) {\n *     things = createArrayFromMixed(things);\n *     ...\n *   }\n *\n * This allows you to treat `things' as an array, but accept scalars in the API.\n *\n * If you need to convert an array-like object, like `arguments`, into an array\n * use toArray instead.\n *\n * @param {*} obj\n * @return {array}\n */\nfunction createArrayFromMixed(obj) {\n  if (!hasArrayNature(obj)) {\n    return [obj];\n  } else if (Array.isArray(obj)) {\n    return obj.slice();\n  } else {\n    return toArray(obj);\n  }\n}\n\nmodule.exports = createArrayFromMixed;\n};"],
"names":["shadow$provide","global","require","module","exports","toArray","createArrayFromMixed","obj","nodeType","Array","isArray","slice"]
}
