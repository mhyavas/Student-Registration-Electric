shadow$provide.module$node_modules$react_offcanvas$node_modules$react$lib$ReactInputSelection=function(global,require,module,exports){var ReactDOMSelection=require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactDOMSelection"),containsNode=require("module$node_modules$fbjs$lib$containsNode"),focusNode=require("module$node_modules$fbjs$lib$focusNode"),getActiveElement=require("module$node_modules$fbjs$lib$getActiveElement"),ReactInputSelection={hasSelectionCapabilities:function(elem){var nodeName=
elem&&elem.nodeName&&elem.nodeName.toLowerCase();return nodeName&&("input"===nodeName&&"text"===elem.type||"textarea"===nodeName||"true"===elem.contentEditable)},getSelectionInformation:function(){var focusedElem=getActiveElement();return{focusedElem,selectionRange:ReactInputSelection.hasSelectionCapabilities(focusedElem)?ReactInputSelection.getSelection(focusedElem):null}},restoreSelection:function(priorSelectionInformation){var curFocusedElem=getActiveElement(),priorFocusedElem=priorSelectionInformation.focusedElem;
priorSelectionInformation=priorSelectionInformation.selectionRange;curFocusedElem!==priorFocusedElem&&containsNode(document.documentElement,priorFocusedElem)&&(ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)&&ReactInputSelection.setSelection(priorFocusedElem,priorSelectionInformation),focusNode(priorFocusedElem))},getSelection:function(input){if("selectionStart"in input)var selection={start:input.selectionStart,end:input.selectionEnd};else if(document.selection&&input.nodeName&&"input"===
input.nodeName.toLowerCase()){var range=document.selection.createRange();range.parentElement()===input&&(selection={start:-range.moveStart("character",-input.value.length),end:-range.moveEnd("character",-input.value.length)})}else selection=ReactDOMSelection.getOffsets(input);return selection||{start:0,end:0}},setSelection:function(input,offsets){var start=offsets.start,end=offsets.end;"undefined"===typeof end&&(end=start);"selectionStart"in input?(input.selectionStart=start,input.selectionEnd=Math.min(end,
input.value.length)):document.selection&&input.nodeName&&"input"===input.nodeName.toLowerCase()?(input=input.createTextRange(),input.collapse(!0),input.moveStart("character",start),input.moveEnd("character",end-start),input.select()):ReactDOMSelection.setOffsets(input,offsets)}};module.exports=ReactInputSelection}
//# sourceMappingURL=module$node_modules$react_offcanvas$node_modules$react$lib$ReactInputSelection.js.map
