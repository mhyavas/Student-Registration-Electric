{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$ReactMarkupChecksum.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,8EAAA,CAAmG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAc3I,IAAIC,QAAUH,OAAA,CAAQ,oEAAR,CAAd,CAEII,QAAU,MAFd,CAIIC,oBAAsB,CACxBC,mBAAoB,qBADI,CAOxBC,oBAAqBA,QAAS,CAACC,MAAD,CAAS,CACrC,IAAIC,SAAWN,OAAA,CAAQK,MAAR,CAGf,OAAOA,OAAOE,CAAAA,OAAP,CAAeN,OAAf,CAAwB,GAAxB,CAA8BC,mBAAoBC,CAAAA,kBAAlD,CAAuE,OAAvE,CAA8EG,QAA9E,CAAyF,QAAzF,CAJ8B,CAPf,CAmBxBE,eAAgBA,QAAS,CAACH,MAAD,CAASI,OAAT,CAAkB,CAEzCC,OAAA;CADIA,OACJ,CADuBD,OAAQE,CAAAA,YAAR,CAAqBT,mBAAoBC,CAAAA,kBAAzC,CACvB,GAAuCS,QAAA,CAASF,OAAT,CAA2B,EAA3B,CAEvC,OADqBV,QAAAa,CAAQR,MAARQ,CACrB,GAA0BH,OAJe,CAnBnB,CA2B1BZ,OAAOC,CAAAA,OAAP,CAAiBG,mBA7C0H;",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/ReactMarkupChecksum.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$ReactMarkupChecksum\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMarkupChecksum\n */\n\n'use strict';\n\nvar adler32 = require('./adler32');\n\nvar TAG_END = /\\/?>/;\n\nvar ReactMarkupChecksum = {\n  CHECKSUM_ATTR_NAME: 'data-react-checksum',\n\n  /**\n   * @param {string} markup Markup string\n   * @return {string} Markup string with checksum attribute attached\n   */\n  addChecksumToMarkup: function (markup) {\n    var checksum = adler32(markup);\n\n    // Add checksum (handle both parent tags and self-closing tags)\n    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"' + checksum + '\"$&');\n  },\n\n  /**\n   * @param {string} markup to use\n   * @param {DOMElement} element root React element\n   * @returns {boolean} whether or not the markup is the same\n   */\n  canReuseMarkup: function (markup, element) {\n    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);\n    var markupChecksum = adler32(markup);\n    return markupChecksum === existingChecksum;\n  }\n};\n\nmodule.exports = ReactMarkupChecksum;\n};"],
"names":["shadow$provide","global","require","module","exports","adler32","TAG_END","ReactMarkupChecksum","CHECKSUM_ATTR_NAME","addChecksumToMarkup","markup","checksum","replace","canReuseMarkup","element","existingChecksum","getAttribute","parseInt","markupChecksum"]
}
