{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$DOMProperty.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/DOMProperty.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$DOMProperty\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMProperty\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\nvar DOMPropertyInjection = {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_ATTRIBUTE: 0x1,\n  MUST_USE_PROPERTY: 0x2,\n  HAS_SIDE_EFFECTS: 0x4,\n  HAS_BOOLEAN_VALUE: 0x8,\n  HAS_NUMERIC_VALUE: 0x10,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,\n\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * isCustomAttribute: function that given an attribute name will return true\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\n   * attributes where it's impossible to enumerate all of the possible\n   * attribute names,\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\n   * it won't get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMAttributeNamespaces: object mapping React attribute name to the DOM\n   * attribute namespace URL. (Attribute names not specified use no namespace.)\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function (domPropertyConfig) {\n    var Injection = DOMPropertyInjection;\n    var Properties = domPropertyConfig.Properties || {};\n    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\n\n    if (domPropertyConfig.isCustomAttribute) {\n      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);\n    }\n\n    for (var propName in Properties) {\n      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property ' + '\\'%s\\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;\n\n      var lowerCased = propName.toLowerCase();\n      var propConfig = Properties[propName];\n\n      var propertyInfo = {\n        attributeName: lowerCased,\n        attributeNamespace: null,\n        propertyName: propName,\n        mutationMethod: null,\n\n        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),\n        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),\n        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),\n        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),\n        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),\n        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),\n        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)\n      };\n\n      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;\n      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;\n      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;\n\n      if (process.env.NODE_ENV !== 'production') {\n        DOMProperty.getPossibleStandardName[lowerCased] = propName;\n      }\n\n      if (DOMAttributeNames.hasOwnProperty(propName)) {\n        var attributeName = DOMAttributeNames[propName];\n        propertyInfo.attributeName = attributeName;\n        if (process.env.NODE_ENV !== 'production') {\n          DOMProperty.getPossibleStandardName[attributeName] = propName;\n        }\n      }\n\n      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {\n        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];\n      }\n\n      if (DOMPropertyNames.hasOwnProperty(propName)) {\n        propertyInfo.propertyName = DOMPropertyNames[propName];\n      }\n\n      if (DOMMutationMethods.hasOwnProperty(propName)) {\n        propertyInfo.mutationMethod = DOMMutationMethods[propName];\n      }\n\n      DOMProperty.properties[propName] = propertyInfo;\n    }\n  }\n};\nvar defaultValueCache = {};\n\n/**\n * DOMProperty exports lookup objects that can be used like functions:\n *\n *   > DOMProperty.isValid['id']\n *   true\n *   > DOMProperty.isValid['foobar']\n *   undefined\n *\n * Although this may be confusing, it performs better in general.\n *\n * @see http://jsperf.com/key-exists\n * @see http://jsperf.com/key-missing\n */\nvar DOMProperty = {\n\n  ID_ATTRIBUTE_NAME: 'data-reactid',\n\n  /**\n   * Map from property \"standard name\" to an object with info about how to set\n   * the property in the DOM. Each object contains:\n   *\n   * attributeName:\n   *   Used when rendering markup or with `*Attribute()`.\n   * attributeNamespace\n   * propertyName:\n   *   Used on DOM node instances. (This includes properties that mutate due to\n   *   external factors.)\n   * mutationMethod:\n   *   If non-null, used instead of the property or `setAttribute()` after\n   *   initial render.\n   * mustUseAttribute:\n   *   Whether the property must be accessed and mutated using `*Attribute()`.\n   *   (This includes anything that fails `<propName> in <element>`.)\n   * mustUseProperty:\n   *   Whether the property must be accessed and mutated as an object property.\n   * hasSideEffects:\n   *   Whether or not setting a value causes side effects such as triggering\n   *   resources to be loaded or text selection changes. If true, we read from\n   *   the DOM before updating to ensure that the value is only set if it has\n   *   changed.\n   * hasBooleanValue:\n   *   Whether the property should be removed when set to a falsey value.\n   * hasNumericValue:\n   *   Whether the property must be numeric or parse as a numeric and should be\n   *   removed when set to a falsey value.\n   * hasPositiveNumericValue:\n   *   Whether the property must be positive numeric or parse as a positive\n   *   numeric and should be removed when set to a falsey value.\n   * hasOverloadedBooleanValue:\n   *   Whether the property can be used as a flag as well as with a value.\n   *   Removed when strictly equal to false; present without a value when\n   *   strictly equal to true; present with a value otherwise.\n   */\n  properties: {},\n\n  /**\n   * Mapping from lowercase property names to the properly cased version, used\n   * to warn in the case of missing properties. Available only in __DEV__.\n   * @type {Object}\n   */\n  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,\n\n  /**\n   * All of the isCustomAttribute() functions that have been injected.\n   */\n  _isCustomAttributeFunctions: [],\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   * @method\n   */\n  isCustomAttribute: function (attributeName) {\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];\n      if (isCustomAttributeFn(attributeName)) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  /**\n   * Returns the default property value for a DOM property (i.e., not an\n   * attribute). Most default values are '' or false, but not all. Worse yet,\n   * some (in particular, `type`) vary depending on the type of element.\n   *\n   * TODO: Is it better to grab all the possible properties when creating an\n   * element to avoid having to create the same element twice?\n   */\n  getDefaultValueForProperty: function (nodeName, prop) {\n    var nodeDefaults = defaultValueCache[nodeName];\n    var testElement;\n    if (!nodeDefaults) {\n      defaultValueCache[nodeName] = nodeDefaults = {};\n    }\n    if (!(prop in nodeDefaults)) {\n      testElement = document.createElement(nodeName);\n      nodeDefaults[prop] = testElement[prop];\n    }\n    return nodeDefaults[prop];\n  },\n\n  injection: DOMPropertyInjection\n};\n\nmodule.exports = DOMProperty;\n};"],
"names":["shadow$provide","global","require","module","exports","checkMask","value","bitmask","invariant","DOMPropertyInjection","MUST_USE_ATTRIBUTE","MUST_USE_PROPERTY","HAS_SIDE_EFFECTS","HAS_BOOLEAN_VALUE","HAS_NUMERIC_VALUE","HAS_POSITIVE_NUMERIC_VALUE","HAS_OVERLOADED_BOOLEAN_VALUE","injectDOMPropertyConfig","domPropertyConfig","Injection","Properties","DOMAttributeNamespaces","DOMAttributeNames","DOMPropertyNames","DOMMutationMethods","isCustomAttribute","DOMProperty","_isCustomAttributeFunctions","push","propName","properties","hasOwnProperty","undefined","lowerCased","toLowerCase","propConfig","propertyInfo","attributeName","attributeNamespace","propertyName","mutationMethod","mustUseAttribute","mustUseProperty","hasSideEffects","hasBooleanValue","hasNumericValue","hasPositiveNumericValue","hasOverloadedBooleanValue","getPossibleStandardName","defaultValueCache","ID_ATTRIBUTE_NAME","i","length","isCustomAttributeFn","getDefaultValueForProperty","nodeName","prop","nodeDefaults","testElement","document","createElement","injection"]
}
