{"version":3,"sources":["contrib/debug.cljc"],"mappings":";AA0BA,AAAKA,yBAAI,6CAAA,7CAACC;;;;;;;;;;;;;;;;;;;;;;;+CAESE,UAAGC,YACfC,SAAEC,SACCC,UACAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEkCK;AAAG,yHAAA,zHAACF,qGAAIV,UAAGI;;AAAe,QAACG,0CAAAA,4CAAAA;;;2FAC1BK;;IAAAA;AAC5B,QAAA,AAAAC,JAAMC,oBAAGP;AAAT,AACE,yHAAA,zHAACG,qGAAIV,UAAGI,8EACN,EAAI,cAAWW,bAAQD,4CACrB,iBAAME,IAAE,AAASF;AAAjB,AAAA,0FACG,AAACG,eAAKD,GAAG,AAACE,qBAAWF;KACxBF;;AACJA;;;;;;;;;;;;;;;;;;4FAbAd,GAAGC,KACfC,EAAEC,EACCC,GACAG;+CAHSP,GAAGC,KACfC,EAAEC,EACCC,GACAG;;;;AAHV,iCAAA,jCAAMR,0EAAaC,GAAGC;AAAtB,AACE,kBAAKC,EAAEC;AAAP,AACE,IAAMC,KAAG,AAACC,mDAAMR,uBAAIS;IACdC,KAAG,iBAAAC,WAAA;AAAA,AAAO,AAAI,2GAAA,3GAACE,qGAAIV,GAAGI;;AAAc,QAACF,kCAAAA,oCAAAA;;IAAlCO,WAAA;AAAA,AAAuC,AAAI,2GAAA,3GAACC,qGAAIV,GAAGI;;AAAgB,QAACD,kCAAAA,oCAAAA;;AAApE,AAAA,gFAAAK,SAAAC,2BAAAD,SAAAC,rHAACR,qCAAAA,wDAAAA;;+CAHKD,GAAGC,KACfC,EAAEC,zDACL,2DAAMC,GACAG,9DACJ,YAAAI,qDAAA","names":["contrib.debug/!id","cljs.core.atom","contrib.debug/instrument*","nm","flow","n","t","id","cljs.core.swap_BANG_","cljs.core/inc","it","G__49131","G__49132","cljs.core.prn","contrib.debug/t_contrib$debug49133","_","cljs.core/deref","v","js/hyperfiddle.electric.Failure","e","cljs.core/type","cljs.core/ex-message"],"sourcesContent":["(ns contrib.debug\r\n  #?(:cljs (:require-macros contrib.debug))\r\n  (:require [clojure.string :as str]\r\n            [hyperfiddle.electric :as e])\r\n  (:import #?(:clj [clojure.lang IFn IDeref])\r\n           [hyperfiddle.electric Failure]))\r\n\r\n(defmacro dbg\r\n  ([form] `(dbg '~form ~form))\r\n  ([label form]\r\n   (let [[label form] (if (keyword? form) [form label] [label form])]\r\n     `(let [v# ~form] (prn ~label '~'==> v#) v#))))\r\n\r\n(defmacro dbgv [form]\r\n  `(let [args# [~@form], v# ~form] (prn '~form '~'==> (cons '~(first form) (rest args#))  '~'==> v#) v#))\r\n\r\n(defmacro dbgc [[op & args :as form]]\r\n  `(let [op# ~op, args# ~args, ret# (apply op# args#)]\r\n     (prn '~form)\r\n     (doseq [[form# arg#] (map vector '~args args#)]\r\n       (prn '~'_ form# '~'==> arg#))\r\n     (prn '~'==> ret#)\r\n     ret#))\r\n\r\n(defmacro do-traced [& body] `(do ~@(for [form body] `(dbg ~form))))\r\n\r\n(def !id (atom 0))\r\n\r\n(defn instrument* [nm flow]\r\n  (fn [n t]\r\n    (let [id (swap! !id inc)\r\n          it (flow #(do (prn nm id :notified) (n)) #(do (prn nm id :terminated) (t)))]\r\n      (reify\r\n        IFn (#?(:clj invoke :cljs -invoke) [_] (prn nm id :cancelled) (it))\r\n        IDeref (#?(:clj deref :cljs -deref) [_]\r\n                 (let [v @it]\r\n                   (prn nm id :transferred\r\n                     (if (instance? Failure v)\r\n                       (let [e (.-error v)]\r\n                         [(type e) (ex-message e)])\r\n                       v))\r\n                   v))))))\r\n(defmacro instrument [nm & body] `(new (instrument* ~nm (e/fn [] ~@body))))\r\n"]}