{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$EventPluginHub.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/EventPluginHub.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$EventPluginHub\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginHub\n */\n\n'use strict';\n\nvar EventPluginRegistry = require('./EventPluginRegistry');\nvar EventPluginUtils = require('./EventPluginUtils');\nvar ReactErrorUtils = require('./ReactErrorUtils');\n\nvar accumulateInto = require('./accumulateInto');\nvar forEachAccumulated = require('./forEachAccumulated');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Internal store for event listeners\n */\nvar listenerBank = {};\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @private\n */\nvar executeDispatchesAndRelease = function (event, simulated) {\n  if (event) {\n    EventPluginUtils.executeDispatchesInOrder(event, simulated);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\nvar executeDispatchesAndReleaseSimulated = function (e) {\n  return executeDispatchesAndRelease(e, true);\n};\nvar executeDispatchesAndReleaseTopLevel = function (e) {\n  return executeDispatchesAndRelease(e, false);\n};\n\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\nvar InstanceHandle = null;\n\nfunction validateInstanceHandle() {\n  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;\n  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\nvar EventPluginHub = {\n\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function (InjectedInstanceHandle) {\n      InstanceHandle = InjectedInstanceHandle;\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n    },\n\n    getInstanceHandle: function () {\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n      return InstanceHandle;\n    },\n\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n\n  },\n\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function (id, registrationName, listener) {\n    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;\n\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.didPutListener) {\n      PluginModule.didPutListener(id, registrationName, listener);\n    }\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function (id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function (id, registrationName) {\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.willDeleteListener) {\n      PluginModule.willDeleteListener(id, registrationName);\n    }\n\n    var bankForRegistrationName = listenerBank[registrationName];\n    // TODO: This should never be null -- when is it?\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function (id) {\n    for (var registrationName in listenerBank) {\n      if (!listenerBank[registrationName][id]) {\n        continue;\n      }\n\n      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n      if (PluginModule && PluginModule.willDeleteListener) {\n        PluginModule.willDeleteListener(id, registrationName);\n      }\n\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n    for (var i = 0; i < plugins.length; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function (events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function (simulated) {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    if (simulated) {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);\n    } else {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n    }\n    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;\n    // This would be a good time to rethrow if any of the event handlers threw.\n    ReactErrorUtils.rethrowCaughtError();\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function () {\n    listenerBank = {};\n  },\n\n  __getListenerBank: function () {\n    return listenerBank;\n  }\n\n};\n\nmodule.exports = EventPluginHub;\n};"],
"names":["shadow$provide","global","require","module","exports","validateInstanceHandle","warning","InstanceHandle","traverseTwoPhase","traverseEnterLeave","EventPluginRegistry","EventPluginUtils","ReactErrorUtils","accumulateInto","forEachAccumulated","invariant","listenerBank","eventQueue","executeDispatchesAndRelease","event","simulated","executeDispatchesInOrder","isPersistent","constructor","release","executeDispatchesAndReleaseSimulated","e","executeDispatchesAndReleaseTopLevel","EventPluginHub","injection","injectMount","injectInstanceHandle","InjectedInstanceHandle","getInstanceHandle","injectEventPluginOrder","injectEventPluginsByName","eventNameDispatchConfigs","registrationNameModules","putListener","id","registrationName","listener","undefined","PluginModule","didPutListener","getListener","bankForRegistrationName","deleteListener","willDeleteListener","deleteAllListeners","extractEvents","topLevelType","topLevelTarget","topLevelTargetID","nativeEvent","nativeEventTarget","events","plugins","i","length","possiblePlugin","extractedEvents","enqueueEvents","processEventQueue","processingEventQueue","rethrowCaughtError","__purge","__getListenerBank"]
}
