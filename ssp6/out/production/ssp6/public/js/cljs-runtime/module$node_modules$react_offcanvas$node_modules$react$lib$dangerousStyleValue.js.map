{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$dangerousStyleValue.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,8EAAA,CAAmG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiB3I,IAAIC,iBAFcH,OAAAI,CAAQ,wEAARA,CAEiBD,CAAAA,gBAsCnCF,OAAOC,CAAAA,OAAP,CA3BAG,QAA4B,CAACC,IAAD,CAAOC,KAAP,CAAc,CAYxC,GADuB,IACvB,EADcA,KACd,EADgD,SAChD,GAD+B,MAAOA,MACtC,EADuE,EACvE,GAD6DA,KAC7D,CACE,MAAO,EAIT,IADmBC,KAAAC,CAAMF,KAANE,CACnB,EAA8B,CAA9B,GAAoBF,KAApB,EAAmCJ,gBAAiBO,CAAAA,cAAjB,CAAgCJ,IAAhC,CAAnC,EAA4EH,gBAAA,CAAiBG,IAAjB,CAA5E,CACE,MAAO,EAAP,CAAYC,KAGO,SAArB,GAAI,MAAOA,MAAX,GACEA,KADF,CACUA,KAAMI,CAAAA,IAAN,EADV,CAGA;MAAOJ,MAAP,CAAe,IAxByB,CA5BiG;",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/dangerousStyleValue.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$dangerousStyleValue\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule dangerousStyleValue\n * @typechecks static-only\n */\n\n'use strict';\n\nvar CSSProperty = require('./CSSProperty');\n\nvar isUnitlessNumber = CSSProperty.isUnitlessNumber;\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @return {string} Normalized style value with dimensions applied.\n */\nfunction dangerousStyleValue(name, value) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n  if (isEmpty) {\n    return '';\n  }\n\n  var isNonNumeric = isNaN(value);\n  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {\n    return '' + value; // cast to string\n  }\n\n  if (typeof value === 'string') {\n    value = value.trim();\n  }\n  return value + 'px';\n}\n\nmodule.exports = dangerousStyleValue;\n};"],
"names":["shadow$provide","global","require","module","exports","isUnitlessNumber","CSSProperty","dangerousStyleValue","name","value","isNaN","isNonNumeric","hasOwnProperty","trim"]
}
