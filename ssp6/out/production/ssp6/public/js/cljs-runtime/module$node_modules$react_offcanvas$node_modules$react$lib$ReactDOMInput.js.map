{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$ReactDOMInput.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/ReactDOMInput.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$ReactDOMInput\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMInput\n */\n\n'use strict';\n\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactMount = require('./ReactMount');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\n\nvar instancesByReactID = {};\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMInput.updateWrapper(this);\n  }\n}\n\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput = {\n  getNativeProps: function (inst, props, context) {\n    var value = LinkedValueUtils.getValue(props);\n    var checked = LinkedValueUtils.getChecked(props);\n\n    var nativeProps = assign({}, props, {\n      defaultChecked: undefined,\n      defaultValue: undefined,\n      value: value != null ? value : inst._wrapperState.initialValue,\n      checked: checked != null ? checked : inst._wrapperState.initialChecked,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return nativeProps;\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);\n    }\n\n    var defaultValue = props.defaultValue;\n    inst._wrapperState = {\n      initialChecked: props.defaultChecked || false,\n      initialValue: defaultValue != null ? defaultValue : null,\n      onChange: _handleChange.bind(inst)\n    };\n  },\n\n  mountReadyWrapper: function (inst) {\n    // Can't be in mountWrapper or else server rendering leaks.\n    instancesByReactID[inst._rootNodeID] = inst;\n  },\n\n  unmountWrapper: function (inst) {\n    delete instancesByReactID[inst._rootNodeID];\n  },\n\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    // TODO: Shouldn't this be getChecked(props)?\n    var checked = props.checked;\n    if (checked != null) {\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);\n    }\n\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n\n  // Here we use asap to wait until all updates have propagated, which\n  // is important when using controlled components within layers:\n  // https://github.com/facebook/react/issues/1698\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n\n  var name = props.name;\n  if (props.type === 'radio' && name != null) {\n    var rootNode = ReactMount.getNode(this._rootNodeID);\n    var queryRoot = rootNode;\n\n    while (queryRoot.parentNode) {\n      queryRoot = queryRoot.parentNode;\n    }\n\n    // If `rootNode.form` was non-null, then we could try `form.elements`,\n    // but that sometimes behaves strangely in IE8. We could also try using\n    // `form.getElementsByName`, but that will only return direct children\n    // and won't include inputs that use the HTML5 `form=` attribute. Since\n    // the input might not even be in a form, let's just use the global\n    // `querySelectorAll` to ensure we don't miss anything.\n    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n    for (var i = 0; i < group.length; i++) {\n      var otherNode = group[i];\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      }\n      // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React with non-React.\n      var otherID = ReactMount.getID(otherNode);\n      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;\n      var otherInstance = instancesByReactID[otherID];\n      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;\n      // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n    }\n  }\n\n  return returnValue;\n}\n\nmodule.exports = ReactDOMInput;\n};"],
"names":["shadow$provide","global","require","module","exports","forceUpdateIfMounted","_rootNodeID","ReactDOMInput","updateWrapper","_handleChange","event","props","_currentElement","returnValue","LinkedValueUtils","executeOnChange","ReactUpdates","asap","name","type","queryRoot","rootNode","ReactMount","getNode","parentNode","group","querySelectorAll","JSON","stringify","i","length","otherNode","form","otherID","getID","undefined","invariant","otherInstance","instancesByReactID","ReactDOMIDOperations","assign","getNativeProps","inst","context","value","getValue","checked","getChecked","nativeProps","defaultChecked","defaultValue","_wrapperState","initialValue","initialChecked","onChange","mountWrapper","checkPropTypes","_owner","bind","mountReadyWrapper","unmountWrapper","updatePropertyByID"]
}
