{"version":3,"sources":["contrib/debug.cljc"],"mappings":";AA0BA,AAAKA,yBAAI,6CAAA,7CAACC;AAEV,iCAAA,jCAAMC,0EAAaC,GAAGC;AAAtB,AACE,kBAAKC,EAAEC;AAAP,AACE,IAAMC,KAAG,AAACC,mDAAMR,uBAAIS;IACdC,KAAG,iBAAAC,WAAA;AAAA,AAAO,AAAI,2GAAA,3GAACE,qGAAIV,GAAGI;;AAAc,QAACF,kCAAAA,oCAAAA;;IAAlCO,WAAA;AAAA,AAAuC,AAAI,2GAAA,3GAACC,qGAAIV,GAAGI;;AAAgB,QAACD,kCAAAA,oCAAAA;;AAApE,AAAA,gFAAAK,SAAAC,2BAAAD,SAAAC,rHAACR,qCAAAA,wDAAAA;;AADV,AAEE,AAAA,GAAA,QAAAU,oCAAAC,0CAAAC;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,AAAAC,sFAAA,WAAAC,OAAAC;;AAAA,AAAA,IAAAD,aAAA;+CAJaf,UAAGC,YACfC,SAAEC,SACCC,UACAG,jGACJ,AAAA,YAAAO,+FAAAE;;;AAAA,CAAA,AAAA,AAAAF,6EAAA,WAAAC;;AAAA,AAAA,IAAAA,aAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,AAAAF,oDAAA,WAAAG;;AAAA,AAAA,IAAAC,SAAA;AAAA,AAAA,IAAAC,WAAA,CAAA,AAAA,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAD;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,AAAAN,qDAAA,WAAAI,OAAAG;;AAAA,AAAA,IAAAH,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAI,iBAAAD;;;AAAA,CAAA,AAAA,AAAAP,6EAAA;;AAAA,AAAA,QAAA,JACsCc;AADtC,AACyC,yHAAA,zHAAClB,qGAAIV,UAAGI;;AAAe,QAACG,0CAAAA,4CAAAA;;;AADjE,CAAA,AAAA,AAAAO,+EAAA,WAEuCc;;AAFvC,AAAA,YAAA,RAEuCA;AAFvC,AAGW,QAAA,AAAAC,JAAMC,oBAAGvB;AAAT,AACE,yHAAA,zHAACG,qGAAIV,UAAGI,8EACN,EAAI,cAAW2B,bAAQD,4CACrB,iBAAME,IAAE,AAASF;AAAjB,AAAA,0FACG,AAACG,eAAKD,GAAG,AAACE,qBAAWF;KACxBF;;AACJA;;;AATb,CAAA,AAAAhB,8CAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,oDAAA;;AAAA,CAAA,AAAAA,uDAAA;;AAAA,CAAA,AAAAA,4DAAA,WAAAS,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;+GAJaxB,OAAGC,SACfC,MAAEC,MACCC,OACAG,lJACJoB,0CAAA,+GAAAX;+CAJahB,OAAGC,SACfC,MAAEC,MACCC,OACAG,lFACJ,AAAA,YAAAO,6EAAAE;;;AAAAF;;+CAJad,GAAGC,KACfC,EAAEC,EACCC,GACAG,9DACJ,YAAAO,qDAAA","names":["contrib.debug/!id","cljs.core.atom","contrib.debug/instrument*","nm","flow","n","t","id","cljs.core.swap_BANG_","cljs.core/inc","it","G__35129","G__35130","cljs.core.prn","js/contrib","js/contrib.debug","js/contrib.debug.t_contrib$debug35134","contrib.debug/t_contrib$debug35134","_35136","meta35135","unused__14959__auto__","self__","G__35142","js/Error","args35140","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","contrib.debug/->t_contrib$debug35134","_","cljs.core/deref","v","js/hyperfiddle.electric.Failure","e","cljs.core/type","cljs.core/ex-message"],"sourcesContent":["(ns contrib.debug\n  #?(:cljs (:require-macros contrib.debug))\n  (:require [clojure.string :as str]\n            [hyperfiddle.electric :as e])\n  (:import #?(:clj [clojure.lang IFn IDeref])\n           [hyperfiddle.electric Failure]))\n\n(defmacro dbg\n  ([form] `(dbg '~form ~form))\n  ([label form]\n   (let [[label form] (if (keyword? form) [form label] [label form])]\n     `(let [v# ~form] (prn ~label '~'==> v#) v#))))\n\n(defmacro dbgv [form]\n  `(let [args# [~@form], v# ~form] (prn '~form '~'==> (cons '~(first form) (rest args#))  '~'==> v#) v#))\n\n(defmacro dbgc [[op & args :as form]]\n  `(let [op# ~op, args# ~args, ret# (apply op# args#)]\n     (prn '~form)\n     (doseq [[form# arg#] (map vector '~args args#)]\n       (prn '~'_ form# '~'==> arg#))\n     (prn '~'==> ret#)\n     ret#))\n\n(defmacro do-traced [& body] `(do ~@(for [form body] `(dbg ~form))))\n\n(def !id (atom 0))\n\n(defn instrument* [nm flow]\n  (fn [n t]\n    (let [id (swap! !id inc)\n          it (flow #(do (prn nm id :notified) (n)) #(do (prn nm id :terminated) (t)))]\n      (reify\n        IFn (#?(:clj invoke :cljs -invoke) [_] (prn nm id :cancelled) (it))\n        IDeref (#?(:clj deref :cljs -deref) [_]\n                 (let [v @it]\n                   (prn nm id :transferred\n                     (if (instance? Failure v)\n                       (let [e (.-error v)]\n                         [(type e) (ex-message e)])\n                       v))\n                   v))))))\n(defmacro instrument [nm & body] `(new (instrument* ~nm (e/fn [] ~@body))))\n"]}