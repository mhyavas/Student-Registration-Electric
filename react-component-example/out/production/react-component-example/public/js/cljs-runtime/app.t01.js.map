{"version":3,"sources":["app/t01.cljc"],"mappings":";;;;;;;;AAgBS,AAAA;;;sBAAA,8BAAAA,pDAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oDAAA,pDAAMD,+DAEFE;AAFJ,AAEU,OAACC,kDAAYD,KAAK,4CAAK,AAACE;;;AAFlC,CAAA,oDAAA,pDAAMJ,+DAGFE,KAAKG;AAHT,AAIG,4DAAA,rDAACC,gDAAoBJ,2BAA4BG;;;AAJpD,CAAA,8CAAA,9CAAML;;AAAN,AAKA,AAAA,iBAAA,yBAAAF,1CAAMc;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,oDAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,sDAAA,tDAAME,iEAAQM,KAAOC;AAArB,AACE,OAASD,YAAK,AAACE,sDAAa,6CAAA,mFAAA,hIAACC,yLAAWF;;;AAD1C,CAAA,yCAAA,zCAAMP;;AAAN;AAAA,CAAA,mCAAA,WAAAC,9CAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAUT,AAAKS,sBAAO,6CAAA,2CAAA,4DAAA,2CAAA,yDAAA,GAAA,uDAAA,cAAA,yDAAA,zXAACC;AAEJ,uBAAA,vBAAMC;AAAN,AAAA,0FAAA,kGAAA,2CAAA,uDAAA,QAAA,6DAAA,UAAA,pOACMC,gSAA4D;AAAA,AAAO,iGAAA,mFAAA,iEAAA,9OAACC,mDAAMJ,oBAAOK;;;AAEhG,qBAAA,mFAAA,2CAAA,oDAAA,IAAA,qDAAA,IAAA,mDAAA,YAAA,2CAAA,oDAAA,IAAA,qDAAA,IAAA,mDAAA,lhBAAKC;AAEI,sBAAA,tBAAMC,oDAAaC;AAAnB,AAAA,0FAAA,wGAAA,2CAAA,0EAAA,KAAA,nLACMC,wPACyB,WAAKC;AAAL,AACE,iGAAA,mFAAA,oEAAA,2CAAA,gEAAA,uDAAA,nZAACN,mDAAMJ,oBAAOK,8QAA6B,AAAQK;GAHpF,2DAAA,mFAAA,2CAAA,qDAAA,oDAAA,4DAMkD,WAAKC;AAAL,AAAU,OAAQA;WANpE,2CAAA,qDAAA,sDAAA,4DAOkD,WAAKA;AAAL,AAAU,OAAQA;WAPpE,2CAAA,qDAAA,qDAAA,4DAQkD,WAAKA;AAAL,AAAU,OAAQA;mBARpE,qDASuBH;;AAGvB,yBAAA,zBAAMI,0DAAgBC;AAAtB,AAAA,0FAAA,+DAAA,2CAAA,2DAAA,tHACMC;;AACf,AASA,AAUA,AAMA,AAKA,AAAKC,uBAAa,wEAAA,2CAAA,4DAAA,2CAAA,AAAA,1NAACC,gDAAQC,mPACoCC;AAE/D","names":["var_args","G__33846","app.t01/create-root","js/Error","node","app.t01.create_root","cljs.core.gensym","id-prefix","js/module$node_modules$react_dom$client.createRoot","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","app.t01/render","seq33847","G__33848","cljs.core/first","cljs.core/next","self__5754__auto__","root","args","reagent.core.as_element","cljs.core.into","app.t01/!state","cljs.core.atom","app.t01/reactive-btn","js/module$node_modules$reactive_button$dist$index_cjs","cljs.core.swap_BANG_","cljs.core/assoc-in","app.t01/table-data","app.t01/react-table","table-data","js/shadow.js.shim.module$react_data_table_component$default","v","row","app.t01/csv-downloader","data","app.t01/CSVLink","app.t01/read-edn-str","cljs.core.partial","clojure.edn/read-string","app.t01.goog$module$goog$math$Long.fromString"],"sourcesContent":["(ns app.t01\r\n  #?(:cljs (:import [goog.math Long]))\r\n  #?(:cljs (:require-macros [app.t01 :refer [with-reagent]]))\r\n  (:require clojure.edn\r\n            contrib.ednish\r\n            [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.history :as history]\r\n            #?(:cljs [\"react\" :as react])\r\n            #?(:cljs [\"reactive-button\" :as ReactiveButton])\r\n            #?(:cljs [\"react-dom/client\" :as ReactDom])\r\n            #?(:cljs [reagent.core :as r])\r\n            #?(:cljs [reagent.dom :as rdom])\r\n            #?(:cljs [\"react-data-table-component$default\" :as DataTable])\r\n            #?(:cljs [\"react-csv\"] :refer [CSVLink CSVDownload])))\r\n\r\n#?(:cljs (defn create-root\r\n           \"See https://reactjs.org/docs/react-dom-client.html#createroot\"\r\n           ([node] (create-root node (str (gensym))))\r\n           ([node id-prefix]\r\n            (ReactDom/createRoot node #js {:identifierPrefix id-prefix}))))\r\n#?(:cljs (defn render [root & args]\r\n           (.render root (r/as-element (into [:f>] args)))))\r\n\r\n\r\n(defmacro with-reagent [& args]\r\n  `(dom/div\r\n     (let [root# (create-root dom/node)]\r\n       (render root# ~@args)\r\n       (e/on-unmount #(.unmount root#)))))\r\n\r\n(def !state (atom {:clicker {:column \"\" :click false}\r\n                   :button false}))\r\n#?(:cljs (defn reactive-btn []\r\n           [:> ReactiveButton {:color \"green\" :idleText \"Button1\" :onClick (fn [] (swap! !state assoc-in [:button] true))}]))\r\n\r\n(def table-data [{:col1 1 :col2 2 :col3 3} {:col1 3 :col2 4 :col3 5}])\r\n\r\n#?(:cljs (defn react-table [table-data]\r\n           [:> DataTable {:allowRowEvents true\r\n                          :onRowClicked (fn [v]\r\n                                          (swap! !state assoc-in [:clicker] {:column (.-col1 v) :click true})\r\n                                          #_(swap! !state assoc-in [:clicker :column] (.-col1 v))\r\n                                          #_(swap! !state assoc-in [:clicker :click] true))\r\n                          :columns [{:name :Col1 :selector (fn [row] (.-col1 row))}\r\n                                    {:name :Col2 :selector (fn [row] (.-col2 row))}\r\n                                    {:name :Col3 :selector (fn [row] (.-col3 row))}]\r\n                          :data table-data}]))\r\n\r\n\r\n#?(:cljs (defn csv-downloader [data]\r\n           [:> CSVLink {:headers {}}]))\r\n(e/defn MainPage []\r\n  (e/client\r\n    (let [state (e/watch !state)]\r\n      (if (:button state)\r\n        (history/navigate! history/!history [::test1]))\r\n      (dom/text \"This is the main page!\")\r\n      (dom/div\r\n        (dom/text \"Page 2:\")\r\n        (with-reagent reactive-btn)))))\r\n(e/defn Test1 []\r\n  (e/client\r\n    (let [state (e/watch !state)]\r\n      (swap! !state assoc-in [:button] false)\r\n      (if (:click (:clicker state))\r\n        (history/navigate! history/!history [::test2 (:column (:clicker state))]))\r\n      (dom/text \"Page 2: Hello World\")\r\n\r\n      (with-reagent react-table table-data))))\r\n\r\n(e/defn Test2 [data]\r\n  (e/client\r\n    (swap! !state assoc-in [:clicker :click] false)\r\n    (dom/text \"Data is \" data)\r\n    (dom/div\r\n      (history/link [::main] (dom/text \"Home\")))))\r\n(e/defn Page [[page x]]\r\n  (case page\r\n    ::main (history/router 1 (e/server (MainPage.)))\r\n    ::test1 (history/router 1 (e/server (Test1.)))\r\n    ::test2 (history/router 2 (e/server (Test2. x)))))\r\n(def read-edn-str (partial clojure.edn/read-string\r\n                           {:readers #?(:cljs {'goog.math/Long goog.math.Long/fromString} ; datomic cloud long ids\r\n                                        :clj {})}))\r\n(e/defn Test []\r\n  (e/client\r\n    (binding [dom/node js/document.body\r\n              history/encode contrib.ednish/encode-uri\r\n              history/decode #(or (contrib.ednish/decode-path % clojure.edn/read-string) [::main])]\r\n      (history/router (history/HTML5-History.)\r\n                      #_(set! (.-title js/document) (str (clojure.string/capitalize (name (first history/route))))\r\n                              \" - Datomic Browser\")\r\n                      (dom/pre (dom/text (contrib.str/pprint-str history/route)))\r\n\r\n                      (Page. history/route)))))\r\n\r\n"]}