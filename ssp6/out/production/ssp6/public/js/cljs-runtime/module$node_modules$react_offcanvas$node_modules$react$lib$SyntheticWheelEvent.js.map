{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$SyntheticWheelEvent.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,8EAAA,CAAmG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiD3IC,QAASA,oBAAmB,CAACC,cAAD,CAAiBC,cAAjB,CAAiCC,WAAjC,CAA8CC,iBAA9C,CAAiE,CAC3FC,mBAAoBC,CAAAA,IAApB,CAAyB,IAAzB,CAA+BL,cAA/B,CAA+CC,cAA/C,CAA+DC,WAA/D,CAA4EC,iBAA5E,CAD2F,CAlC7F,IAAIC,oBAAsBR,OAAA,CAAQ,gFAAR,CAsC1BQ,oBAAoBE,CAAAA,YAApB,CAAiCP,mBAAjC,CAhC0BQ,CACxBC,OAAQA,QAAS,CAACC,KAAD,CAAQ,CACvB,MAAO,QAAA;AAAYA,KAAZ,CAAoBA,KAAMD,CAAAA,MAA1B,CAEP,aAAA,EAAiBC,MAAjB,CAAyB,CAACA,KAAMC,CAAAA,WAAhC,CAA8C,CAHvB,CADDH,CAMxBI,OAAQA,QAAS,CAACF,KAAD,CAAQ,CACvB,MAAO,QAAA,EAAYA,MAAZ,CAAoBA,KAAME,CAAAA,MAA1B,CAEP,aAAA,EAAiBF,MAAjB,CAAyB,CAACA,KAAMG,CAAAA,WAAhC,CAEA,YAAA,EAAgBH,MAAhB,CAAwB,CAACA,KAAMI,CAAAA,UAA/B,CAA4C,CALrB,CANDN,CAaxBO,OAAQ,IAbgBP,CAmBxBQ,UAAW,IAnBaR,CAgC1B,CAEAV,OAAOC,CAAAA,OAAP,CAAiBC,mBAvD0H;",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/SyntheticWheelEvent.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$SyntheticWheelEvent\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticWheelEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\n/**\n * @interface WheelEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar WheelEventInterface = {\n  deltaX: function (event) {\n    return 'deltaX' in event ? event.deltaX :\n    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\n    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;\n  },\n  deltaY: function (event) {\n    return 'deltaY' in event ? event.deltaY :\n    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\n    'wheelDeltaY' in event ? -event.wheelDeltaY :\n    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).\n    'wheelDelta' in event ? -event.wheelDelta : 0;\n  },\n  deltaZ: null,\n\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.\n  deltaMode: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticMouseEvent}\n */\nfunction SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);\n\nmodule.exports = SyntheticWheelEvent;\n};"],
"names":["shadow$provide","global","require","module","exports","SyntheticWheelEvent","dispatchConfig","dispatchMarker","nativeEvent","nativeEventTarget","SyntheticMouseEvent","call","augmentClass","WheelEventInterface","deltaX","event","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode"]
}
