{"version":3,"sources":["demo/demo_todos_simple.cljc"],"mappings":";AAMA,GAAA,QAAAA,iCAAAC,mDAAAC;AAAA;AAAA,AAAA,oCAAA,pCAASC;;AACT,AAEA,AA0BA","names":["js/demo","js/demo.demo-todos-simple","js/demo.demo-todos-simple.!conn","demo.demo-todos-simple/!conn"],"sourcesContent":["(ns demo.demo-todos-simple\r\n  (:require #?(:clj [datascript.core :as d]) ; database on server\r\n            [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.electric-ui4 :as ui]))\r\n\r\n(defonce !conn #?(:clj (d/create-conn {}) :cljs nil)) ; database on server\r\n(e/def db) ; injected database ref; Electric defs are always dynamic\r\n\r\n(e/defn TodoItem [id]\r\n  (e/server\r\n    (let [e (d/entity db id)\r\n          status (:task/status e)]\r\n      (e/client\r\n        (dom/div\r\n          (ui/checkbox\r\n            (case status :active false, :done true)\r\n            (e/fn [v]\r\n              (e/server\r\n                (e/discard\r\n                  (d/transact! !conn [{:db/id id\r\n                                       :task/status (if v :done :active)}]))))\r\n            (dom/props {:id id}))\r\n          (dom/label (dom/props {:for id}) (dom/text (e/server (:task/description e)))))))))\r\n\r\n#?(:clj (defn todo-count [db]\r\n          (count\r\n            (d/q '[:find [?e ...] :in $ ?status\r\n                   :where [?e :task/status ?status]] db :active))))\r\n\r\n#?(:clj (defn todo-records [db]\r\n          (->> (d/q '[:find [(pull ?e [:db/id :task/description]) ...]\r\n                      :where [?e :task/status]] db)\r\n            (sort-by :task/description))))\r\n\r\n(e/defn TodoList []\r\n  (e/server\r\n    (binding [db (e/watch !conn)]\r\n      (e/client\r\n        (dom/h1 (dom/text \"minimal todo list\"))\r\n        (dom/p (dom/text \"it's multiplayer, try two tabs\"))\r\n        (dom/div (dom/props {:class \"todo-list\"})\r\n          (dom/input (dom/props {:placeholder \"Buy milk\"})\r\n            (ui/on-submit (e/fn [v] (e/server (d/transact! !conn [{:task/description v, :task/status :active}]) nil))))\r\n          (dom/div {:class \"todo-items\"}\r\n            (e/server\r\n              (e/for-by :db/id [{:keys [db/id]} (todo-records db)]\r\n                (TodoItem. id))))\r\n          (dom/p (dom/props {:class \"counter\"})\r\n            (dom/span (dom/props {:class \"count\"}) (dom/text (e/server (todo-count db))))\r\n            (dom/text \" items left\")))))))"]}