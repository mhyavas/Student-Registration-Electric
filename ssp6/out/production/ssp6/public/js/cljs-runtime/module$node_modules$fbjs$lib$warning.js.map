{
"version":3,
"file":"module$node_modules$fbjs$lib$warning.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,oCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAuB7FC,MAAAA,CATgBH,OAAAI,CAAQ,4CAARA,CAYlBD,OAAA,CAAUA,QAAS,CAACE,SAAD,CAAYC,MAAZ,CAAoB,CACrC,IADqC,IAC5BC,KAAOC,SAAUC,CAAAA,MADW,CACHC,KAAOC,KAAA,CAAa,CAAP,CAAAJ,IAAA,CAAWA,IAAX,CAAkB,CAAlB,CAAsB,CAA5B,CADJ,CACoCK,KAAO,CAAhF,CAAmFA,IAAnF,CAA0FL,IAA1F,CAAgGK,IAAA,EAAhG,CACEF,IAAA,CAAKE,IAAL,CAAY,CAAZ,CAAA,CAAiBJ,SAAA,CAAUI,IAAV,CAGnB,IAAeC,IAAAA,EAAf,GAAIP,MAAJ,CACE,KAAUQ,MAAJ,CAAU,2EAAV,CAAN,CAGF,GAAsD,CAAtD,GAAIR,MAAOS,CAAAA,OAAP,CAAe,6BAAf,CAAJ,EAII,CAACV,SAJL,CAIgB,CACd,IAAIW,SAAW,CACXC,KAAAA,CAAU,WAAVA;AAAwBX,MAAOY,CAAAA,OAAP,CAAe,KAAf,CAAsB,QAAS,EAAG,CAC5D,MAAOR,KAAA,CAAKM,QAAA,EAAL,CADqD,CAAlC,CAGL,YAAvB,GAAI,MAAOG,QAAX,EACEA,OAAQC,CAAAA,KAAR,CAAcH,IAAd,CAEF,IAAI,CAIF,KAAUH,MAAJ,CAAUG,IAAV,CAAN,CAJE,CAKF,MAAOI,CAAP,CAAU,EAbE,CAbqB,CA+BzCpB,OAAOC,CAAAA,OAAP,CAAiBC,MAzDgF;",
"sources":["node_modules/fbjs/lib/warning.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fbjs$lib$warning\"] = function(global,require,module,exports) {\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule warning\n */\n\n'use strict';\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function (condition, format) {\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (format.indexOf('Failed Composite propType: ') === 0) {\n      return; // Ignore CompositeComponent proptype check.\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // --- Welcome to debugging React ---\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch (x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n};"],
"names":["shadow$provide","global","require","module","exports","warning","emptyFunction","condition","format","_len","arguments","length","args","Array","_key","undefined","Error","indexOf","argIndex","message","replace","console","error","x"]
}
