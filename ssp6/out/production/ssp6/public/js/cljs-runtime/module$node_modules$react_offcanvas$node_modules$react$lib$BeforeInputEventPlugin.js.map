{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$BeforeInputEventPlugin.js",
"lineCount":13,
"mappings":"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",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/BeforeInputEventPlugin.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$BeforeInputEventPlugin\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015 Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BeforeInputEventPlugin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar FallbackCompositionState = require('./FallbackCompositionState');\nvar SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\nvar SyntheticInputEvent = require('./SyntheticInputEvent');\n\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n\nvar documentMode = null;\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n}\n\n// Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;\n}\n\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onBeforeInput: null }),\n      captured: keyOf({ onBeforeInputCapture: null })\n    },\n    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]\n  },\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionEnd: null }),\n      captured: keyOf({ onCompositionEndCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionStart: null }),\n      captured: keyOf({ onCompositionStartCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionUpdate: null }),\n      captured: keyOf({ onCompositionUpdateCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  }\n};\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\n  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n  return null;\n}\n\n// Track the current IME composition fallback object, if any.\nvar currentComposition = null;\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticCompositionEvent.\n */\nfunction extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n  var eventType;\n  var fallbackData;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(topLevelType);\n  } else if (!currentComposition) {\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionStart;\n    }\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n    eventType = eventTypes.compositionEnd;\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!currentComposition && eventType === eventTypes.compositionStart) {\n      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n    } else if (eventType === eventTypes.compositionEnd) {\n      if (currentComposition) {\n        fallbackData = currentComposition.getData();\n      }\n    }\n  }\n\n  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);\n\n  if (fallbackData) {\n    // Inject data generated from fallback path into the synthetic event.\n    // This matches the property of native CompositionEventInterface.\n    event.data = fallbackData;\n  } else {\n    var customData = getDataFromCustomEvent(nativeEvent);\n    if (customData !== null) {\n      event.data = customData;\n    }\n  }\n\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.\n */\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionEnd:\n      return getDataFromCustomEvent(nativeEvent);\n    case topLevelTypes.topKeyPress:\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case topLevelTypes.topTextInput:\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data;\n\n      // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to blacklist it.\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.\n */\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  if (currentComposition) {\n    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n      var chars = currentComposition.getData();\n      FallbackCompositionState.release(currentComposition);\n      currentComposition = null;\n      return chars;\n    }\n    return null;\n  }\n\n  switch (topLevelType) {\n    case topLevelTypes.topPaste:\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n    case topLevelTypes.topKeyPress:\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n        return String.fromCharCode(nativeEvent.which);\n      }\n      return null;\n    case topLevelTypes.topCompositionEnd:\n      return useFallbackCompositionData ? null : nativeEvent.data;\n    default:\n      return null;\n  }\n}\n\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticInputEvent.\n */\nfunction extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n  var chars;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n  }\n\n  // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n  if (!chars) {\n    return null;\n  }\n\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);\n\n  event.data = chars;\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\nvar BeforeInputEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];\n  }\n};\n\nmodule.exports = BeforeInputEventPlugin;\n};"],
"names":["shadow$provide","global","require","module","exports","isPresto","opera","window","version","parseInt","isFallbackCompositionEnd","topLevelType","nativeEvent","topLevelTypes","topKeyUp","END_KEYCODES","indexOf","keyCode","topKeyDown","START_KEYCODE","topKeyPress","topMouseDown","topBlur","getDataFromCustomEvent","detail","data","getNativeBeforeInputChars","topCompositionEnd","SPACEBAR_CODE","which","hasSpaceKeypress","SPACEBAR_CHAR","topTextInput","chars","getFallbackBeforeInputChars","currentComposition","getData","FallbackCompositionState","release","topPaste","ctrlKey","altKey","metaKey","String","fromCharCode","useFallbackCompositionData","EventConstants","EventPropagators","ExecutionEnvironment","SyntheticCompositionEvent","SyntheticInputEvent","keyOf","canUseCompositionEvent","canUseDOM","documentMode","document","canUseTextInputEvent","eventTypes","beforeInput","phasedRegistrationNames","bubbled","onBeforeInput","captured","onBeforeInputCapture","dependencies","compositionEnd","onCompositionEnd","onCompositionEndCapture","compositionStart","onCompositionStart","onCompositionStartCapture","topCompositionStart","compositionUpdate","onCompositionUpdate","onCompositionUpdateCapture","topCompositionUpdate","BeforeInputEventPlugin","extractEvents","topLevelTarget","topLevelTargetID","nativeEventTarget","eventType","fallbackData","getPooled","event","customData","accumulateTwoPhaseDispatches"]
}
