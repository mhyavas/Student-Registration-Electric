{"version":3,"sources":["hyperfiddle/electric_svg.cljc"],"mappings":";AAQG,wCAAA,xCAAMA,wFAAcC,OAAOC;AAA3B,AACE,IAAMC,KAAG,AAAkBC,yBAAYC,AAAA,6BAAWH;AAAlD,AACE,AAAcD,mBAAOE;;AACrBA","names":["hyperfiddle.electric-svg/new-svg-node","parent","type","el","js/document","hyperfiddle.electric-dom2/SVG-NS"],"sourcesContent":["(ns hyperfiddle.electric-svg\r\n  \"SVG support is experimental, API subject to change\"\r\n  (:refer-clojure :exclude [filter set symbol use])\r\n  (:require [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.electric :as e])\r\n  #?(:cljs (:require-macros [hyperfiddle.electric-svg])))\r\n\r\n#?(:cljs\r\n   (defn new-svg-node [parent type]\r\n     (let [el (.createElementNS js/document dom/SVG-NS type)]\r\n       (.appendChild parent el)\r\n       el)))\r\n\r\n(defmacro svg-element [t & body] ; todo unify with dom/element\r\n  `(dom/with (new-svg-node dom/node ~(name t))\r\n                                        ; hack: speed up streamy unmount by removing from layout first\r\n                                        ; it also feels faster visually\r\n     (e/on-unmount #(set! (.. dom/node -style -display) \"none\")) ; hack\r\n     ~@body))\r\n\r\n(defmacro a                   [& body] `(svg-element :a ~@body))\r\n(defmacro altGlyph            [& body] `(svg-element :altGlyph ~@body))\r\n(defmacro altGlyphDef         [& body] `(svg-element :altGlyphDef ~@body))\r\n(defmacro altGlyphItem        [& body] `(svg-element :altGlyphItem ~@body))\r\n(defmacro animate             [& body] `(svg-element :animate ~@body))\r\n(defmacro animateMotion       [& body] `(svg-element :animateMotion ~@body))\r\n(defmacro animateTransform    [& body] `(svg-element :animateTransform ~@body))\r\n(defmacro circle              [& body] `(svg-element :circle ~@body))\r\n(defmacro clipPath            [& body] `(svg-element :clipPath ~@body))\r\n(defmacro color-profile       [& body] `(svg-element :color-profile ~@body))\r\n(defmacro cursor              [& body] `(svg-element :cursor ~@body))\r\n(defmacro defs                [& body] `(svg-element :defs ~@body))\r\n(defmacro desc                [& body] `(svg-element :desc ~@body))\r\n(defmacro ellipse             [& body] `(svg-element :ellipse ~@body))\r\n(defmacro feBlend             [& body] `(svg-element :feBlend ~@body))\r\n(defmacro feColorMatrix       [& body] `(svg-element :feColorMatrix ~@body))\r\n(defmacro feComponentTransfer [& body] `(svg-element :feComponentTransfer ~@body))\r\n(defmacro feComposite         [& body] `(svg-element :feComposite ~@body))\r\n(defmacro feConvolveMatrix    [& body] `(svg-element :feConvolveMatrix ~@body))\r\n(defmacro feDiffuseLighting   [& body] `(svg-element :feDiffuseLighting ~@body))\r\n(defmacro feDisplacementMap   [& body] `(svg-element :feDisplacementMap ~@body))\r\n(defmacro feDistantLight      [& body] `(svg-element :feDistantLight ~@body))\r\n(defmacro feFlood             [& body] `(svg-element :feFlood ~@body))\r\n(defmacro feFuncA             [& body] `(svg-element :feFuncA ~@body))\r\n(defmacro feFuncB             [& body] `(svg-element :feFuncB ~@body))\r\n(defmacro feFuncG             [& body] `(svg-element :feFuncG ~@body))\r\n(defmacro feFuncR             [& body] `(svg-element :feFuncR ~@body))\r\n(defmacro feGaussianBlur      [& body] `(svg-element :feGaussianBlur ~@body))\r\n(defmacro feImage             [& body] `(svg-element :feImage ~@body))\r\n(defmacro feMerge             [& body] `(svg-element :feMerge ~@body))\r\n(defmacro feMergeNode         [& body] `(svg-element :feMergeNode ~@body))\r\n(defmacro feMorphology        [& body] `(svg-element :feMorphology ~@body))\r\n(defmacro feOffset            [& body] `(svg-element :feOffset ~@body))\r\n(defmacro fePointLight        [& body] `(svg-element :fePointLight ~@body))\r\n(defmacro feSpecularLighting  [& body] `(svg-element :feSpecularLighting ~@body))\r\n(defmacro feSpotLight         [& body] `(svg-element :feSpotLight ~@body))\r\n(defmacro feTile              [& body] `(svg-element :feTile ~@body))\r\n(defmacro feTurbulence        [& body] `(svg-element :feTurbulence ~@body))\r\n(defmacro filter              [& body] `(svg-element :filter ~@body))\r\n(defmacro font                [& body] `(svg-element :font ~@body))\r\n(defmacro font-face           [& body] `(svg-element :font-face ~@body))\r\n(defmacro font-face-format    [& body] `(svg-element :font-face-format ~@body))\r\n(defmacro font-face-name      [& body] `(svg-element :font-face-name ~@body))\r\n(defmacro font-face-src       [& body] `(svg-element :font-face-src ~@body))\r\n(defmacro font-face-uri       [& body] `(svg-element :font-face-uri ~@body))\r\n(defmacro foreignObject       [& body] `(svg-element :foreignObject ~@body))\r\n(defmacro g                   [& body] `(svg-element :g ~@body))\r\n(defmacro glyph               [& body] `(svg-element :glyph ~@body))\r\n(defmacro glyphRef            [& body] `(svg-element :glyphRef ~@body))\r\n(defmacro hkern               [& body] `(svg-element :hkern ~@body))\r\n(defmacro image               [& body] `(svg-element :image ~@body))\r\n(defmacro line                [& body] `(svg-element :line ~@body))\r\n(defmacro linearGradient      [& body] `(svg-element :linearGradient ~@body))\r\n(defmacro marker              [& body] `(svg-element :marker ~@body))\r\n(defmacro mask                [& body] `(svg-element :mask ~@body))\r\n(defmacro metadata            [& body] `(svg-element :metadata ~@body))\r\n(defmacro missing-glyph       [& body] `(svg-element :missing-glyph ~@body))\r\n(defmacro mpath               [& body] `(svg-element :mpath ~@body))\r\n(defmacro path                [& body] `(svg-element :path ~@body))\r\n(defmacro pattern             [& body] `(svg-element :pattern ~@body))\r\n(defmacro polygon             [& body] `(svg-element :polygon ~@body))\r\n(defmacro polyline            [& body] `(svg-element :polyline ~@body))\r\n(defmacro radialGradient      [& body] `(svg-element :radialGradient ~@body))\r\n(defmacro rect                [& body] `(svg-element :rect ~@body))\r\n(defmacro script              [& body] `(svg-element :script ~@body))\r\n(defmacro set                 [& body] `(svg-element :set ~@body))\r\n(defmacro stop                [& body] `(svg-element :stop ~@body))\r\n(defmacro style               [& body] `(svg-element :style ~@body))\r\n(defmacro svg                 [& body] `(svg-element :svg ~@body))\r\n(defmacro switch              [& body] `(svg-element :switch ~@body))\r\n(defmacro symbol              [& body] `(svg-element :symbol ~@body))\r\n(defmacro text                [& body] `(svg-element :text ~@body))\r\n(defmacro textPath            [& body] `(svg-element :textPath ~@body))\r\n(defmacro title               [& body] `(svg-element :title ~@body))\r\n(defmacro tref                [& body] `(svg-element :tref ~@body))\r\n(defmacro tspan               [& body] `(svg-element :tspan ~@body))\r\n(defmacro use                 [& body] `(svg-element :use ~@body))\r\n(defmacro view                [& body] `(svg-element :view ~@body))\r\n(defmacro vkern               [& body] `(svg-element :vkern ~@body))\r\n\r\n\r\n"]}