shadow$provide.module$node_modules$react_offcanvas$node_modules$react$lib$findDOMNode=function(global,require,module,exports){var ReactCurrentOwner=require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactCurrentOwner"),ReactInstanceMap=require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactInstanceMap"),ReactMount=require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactMount"),invariant=require("module$node_modules$fbjs$lib$invariant"),warning=require("module$node_modules$fbjs$lib$warning");
module.exports=function(componentOrElement){var owner=ReactCurrentOwner.current;null!==owner&&(warning(owner._warnedAboutRefsInRender,"%s is accessing getDOMNode or findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",owner.getName()||"A component"),owner._warnedAboutRefsInRender=!0);if(null==componentOrElement)return null;
if(1===componentOrElement.nodeType)return componentOrElement;if(ReactInstanceMap.has(componentOrElement))return ReactMount.getNodeFromInstance(componentOrElement);null!=componentOrElement.render&&"function"===typeof componentOrElement.render?invariant(!1,"findDOMNode was called on an unmounted component."):void 0;invariant(!1,"Element appears to be neither ReactComponent nor DOMNode (keys: %s)",Object.keys(componentOrElement))}}
//# sourceMappingURL=module$node_modules$react_offcanvas$node_modules$react$lib$findDOMNode.js.map
