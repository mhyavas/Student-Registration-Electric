{"version":3,"sources":["contrib/hsluv.cljc"],"mappings":"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","names":["contrib.hsluv/MIN_F","contrib.hsluv/MAX_F","contrib.hsluv/M","contrib.hsluv/REF_Y","contrib.hsluv/REF_U","contrib.hsluv/REF_V","contrib.hsluv/KAPPA","contrib.hsluv/EPSILON","contrib.hsluv/dot-product","a0","a1","a2","b0","b1","b2","contrib.hsluv/from-linear","c","Math/pow","contrib.hsluv/lch->luv","lch","l","h","h-rad","Math/PI","G__34371","Math/cos","Math/sin","vec__34373","vec__34376","cljs.core.nth","vec__34379","vec__34382","m1a","m1b","m1c","m2a","m2b","m2c","m3a","m3b","m3c","contrib.hsluv/xyz->rgb","xyz","x","y","z","G__34386","contrib.hsluv/l-to-y","L","contrib.hsluv/luv->xyz","luv","u","v","G__34387","varU","varV","G__34392","vec__34393","vec__34396","vec__34399","vec__34402","mr0","mr1","mr2","mg0","mg1","mg2","mb0","mb1","mb2","ra","rb","rc","ga","gb","gc","ba","bb","bc","contrib.hsluv/bounding-lines","sub1","sub2","s1r","s2r","s3r","s1g","s2g","s3g","s1b","s2b","s3b","r0s","r0i","r1s","r1i","g0s","g0i","g1s","g1i","b0s","b0i","b1s","b1i","contrib.hsluv/distance-from-origin-angle","slope","intercept","angle","d","contrib.hsluv/max-chroma-hsluv","vec__34418","hue-rad","x__5133__auto__","y__5134__auto__","contrib.hsluv/hsluv->lch","hsl","s","G__34426","contrib.hsluv/hsluv->rgb","cljs.core/vec","cljs.core.double_array"],"sourcesContent":[";; Partial port of HSLuv\u2019s reference implementation written by Alexei Boronine\n;; under MIT license. https://www.hsluv.org/\n\n;; Supported features:\n;; - [X] hsluvToRgb\n;; - [ ] hpluvToRgb\n;; - [ ] rgbToHsluv\n;; - [ ] rgbToHpluv\n\n(ns contrib.hsluv\n  \"HSLuv is a human-friendly alternative to HSL. HSLuv colors have an almost\n  uniform hue and consistant contrasts. Text will stay readable no matter the\n  background color.\"\n  #?(:cljs (:require-macros [contrib.hsluv :refer [destructure-array set-array]])))\n\n(comment (set! *warn-on-reflection* true))\n\n(defmacro destructure-array [[bindings array] & body]\n  `(let [~@(mapcat (fn [sym idx] [sym `(aget ~array (int ~idx))]) bindings (range))]\n     ~@body))\n\n(defmacro set-array [arr & syms] `(doto ~arr ~@(map-indexed (fn [idx sym] `(aset (int ~idx) ~sym)) syms)))\n\n(def ^:const MIN_F 0.00000001)\n(def ^:const MAX_F 99.9999999)\n\n(def ^:const M\n  [[  3.240969941904521, -1.537383177570093, -0.498610760293    ]\n   [ -0.96924363628087,   1.87596750150772,   0.041555057407175 ]\n   [  0.055630079696993, -0.20397695888897,   1.056971514242878 ]])\n\n(def ^:const REF_Y 1.0)\n(def ^:const REF_U 0.19783000664283)\n(def ^:const REF_V 0.46831999493879)\n\n(def ^:const KAPPA 903.2962962)\n(def ^:const EPSILON 0.0088564516)\n\n(defn dot-product [a0 a1 a2, b0 b1 b2]\n  (+ (* a0 b0)\n     (* a1 b1)\n     (* a2 b2)))\n\n(defn from-linear ^double [c]\n  (double\n    (if (<= c 0.0031308)\n      (* 12.92 c)\n      (- (* 1.055 (Math/pow c (/ 1 2.4))) 0.055))))\n\n(defn lch->luv ^doubles [^doubles lch]\n  (destructure-array [[l c h] lch]\n    (let [h-rad (* (/ h 180) Math/PI)]\n      (set-array lch l (* (Math/cos h-rad) c) (* (Math/sin h-rad) c)))))\n\n(let [[[m1a m1b m1c] [m2a m2b m2c] [m3a m3b m3c]] M]\n  (defn xyz->rgb ^doubles [^doubles xyz]\n    (destructure-array [[x y z] xyz]\n      (set-array xyz\n        (from-linear (dot-product m1a m1b m1c x y z))\n        (from-linear (dot-product m2a m2b m2c x y z))\n        (from-linear (dot-product m3a m3b m3c x y z))))))\n\n(defn l-to-y [L]\n  (if (<= L 8)\n    (/ (* REF_Y L) KAPPA)\n    (* REF_Y (Math/pow (/ (+ L 16) 116) 3))))\n\n(defn luv->xyz ^doubles [^doubles luv]\n  (destructure-array [[l u v] luv]\n    (if (zero? l)\n      (set-array luv 0.0 0.0 0.0)\n      (let [varU (+ (/ u (* 13 l)) REF_U)\n            varV (+ (/ v (* 13 l)) REF_V)\n            y    (l-to-y l)\n            x    (- 0 (/ (* (* 9 y) varU) (- (* (- varU 4) varV) (* varU varV))))\n            z    (/ (- (- (* 9 y) (* (* 15 varV) y)) (* varV x)) (* 3 varV))]\n        (set-array luv (double x) (double y) (double z))))))\n\n(let [[[mr0 mr1 mr2]\n       [mg0 mg1 mg2]\n       [mb0 mb1 mb2]] M\n      ra              (- (* 284517 mr0) (* 94839 mr2))\n      rb              (+ (* 838422 mr2) (* 769860 mr1) (* 731718 mr0))\n      rc              (- (* 632260 mr2) (* 126452 mr1))\n\n      ga              (- (* 284517 mg0) (* 94839 mg2))\n      gb              (+ (* 838422 mg2) (* 769860 mg1) (* 731718 mg0))\n      gc              (- (* 632260 mg2) (* 126452 mg1))\n\n      ba              (- (* 284517 mb0) (* 94839 mb2))\n      bb              (+ (* 838422 mb2) (* 769860 mb1) (* 731718 mb0))\n      bc              (- (* 632260 mb2) (* 126452 mb1))]\n\n  (defn bounding-lines [l]\n    (let [sub1 (/ (Math/pow (+ l 16) 3) 1560896)\n          sub2 (if (> sub1 EPSILON) sub1 (/ l KAPPA))\n\n          s1r (* sub2 ra)\n          s2r (* sub2 rb)\n          s3r (* sub2 rc)\n\n          s1g (* sub2 ga)\n          s2g (* sub2 gb)\n          s3g (* sub2 gc)\n\n          s1b (* sub2 ba)\n          s2b (* sub2 bb)\n          s3b (* sub2 bc)\n\n          r0s (/ s1r s3r)\n          r0i (/ (* s2r l) s3r)\n          r1s (/ s1r (+ s3r 126452))\n          r1i (/ (* (- s2r 769860) l) (+ s3r 126452))\n\n          g0s (/ s1g s3g)\n          g0i (/ (* s2g l) s3g)\n          g1s (/ s1g (+ s3g 126452))\n          g1i (/ (* (- s2g 769860) l) (+ s3g 126452))\n\n          b0s (/ s1b s3b)\n          b0i (/ (* s2b l) s3b)\n          b1s (/ s1b (+ s3b 126452))\n          b1i (/ (* (- s2b 769860) l) (+ s3b 126452))\n          ]\n      [r0s r0i\n       r1s r1i\n       g0s g0i\n       g1s g1i\n       b0s b0i\n       b1s b1i])))\n\n(defn distance-from-origin-angle [slope intercept angle]\n  (let [d (/ intercept (- (Math/sin angle) (* slope (Math/cos angle))))]\n    (if (< d 0) ##Inf d)))\n\n(defn max-chroma-hsluv [l h]\n  (let [hue-rad     (* (/ h 360) Math/PI 2)\n        [r0s r0i\n         r1s r1i\n         g0s g0i\n         g1s g1i\n         b0s b0i\n         b1s b1i] (bounding-lines l)]\n    (min\n      (distance-from-origin-angle r0s r0i hue-rad)\n      (distance-from-origin-angle r1s r1i hue-rad)\n      (distance-from-origin-angle g0s g0i hue-rad)\n      (distance-from-origin-angle g1s g1i hue-rad)\n      (distance-from-origin-angle b0s b0i hue-rad)\n      (distance-from-origin-angle b1s b1i hue-rad))))\n\n(defn hsluv->lch [^doubles hsl]\n  (destructure-array [[h s l] hsl]\n    (if (> l MAX_F)\n      [100 0 h]\n      (if (< l MIN_F)\n        [0 0 h]\n        (set-array hsl l, (* (/ (max-chroma-hsluv l h) 100) s), h)))))\n\n(defn hsluv->rgb \"`hsluv->rgb` convert HSLuv components to RGB\"\n  [hsl]\n  (vec (-> (double-array hsl) hsluv->lch lch->luv luv->xyz xyz->rgb)))\n\n(comment\n  (hsluv->rgb [28.140599727630615 50 85])\n   := [0.9227355039080426 0.8083448671138809 0.7774746499934942]\n  )\n\n\n(comment\n  (require '[criterium.core :as perf])\n  (require '[clj-async-profiler.core :as prof])\n\n  (prof/serve-files 8080)\n  (perf/quick-bench (hsluv->rgb [28.140599727630615 50 85]))\n  (set! *warn-on-reflection* true)\n  )\n"]}