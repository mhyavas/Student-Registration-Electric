{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$setInnerHTML.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,uEAAA,CAA4F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAgBhIC,OAAAA,CAAuBH,OAAA,CAAQ,mDAAR,CAE3B,KAAII,gBAAkB,cAAtB,CACIC,gBAAkB,sDAUlBC,OAAAA,CAAeA,QAAS,CAACC,IAAD,CAAOC,IAAP,CAAa,CACvCD,IAAKE,CAAAA,SAAL,CAAiBD,IADsB,CAKpB,YAArB,GAAI,MAAOE,MAAX,EAAoCA,KAAMC,CAAAA,uBAA1C,GACEL,MADF,CACiBA,QAAS,CAACC,IAAD,CAAOC,IAAP,CAAa,CACnCE,KAAMC,CAAAA,uBAAN,CAA8B,QAAS,EAAG,CACxCJ,IAAKE,CAAAA,SAAL,CAAiBD,IADuB,CAA1C,CADmC,CADvC,CAQIL;OAAqBS,CAAAA,SAAzB,GAOMC,OAEJ,CAFkBC,QAASC,CAAAA,aAAT,CAAuB,KAAvB,CAElB,CADAF,OAAYJ,CAAAA,SACZ,CADwB,GACxB,CAA8B,EAA9B,GAAII,OAAYJ,CAAAA,SAAhB,GACEH,MADF,CACiBA,QAAS,CAACC,IAAD,CAAOC,IAAP,CAAa,CAM/BD,IAAKS,CAAAA,UAAT,EACET,IAAKS,CAAAA,UAAWC,CAAAA,YAAhB,CAA6BV,IAA7B,CAAmCA,IAAnC,CAOEH,gBAAgBc,CAAAA,IAAhB,CAAqBV,IAArB,CAAJ,EAA8C,MAA9C,GAAkCA,IAAA,CAAK,CAAL,CAAlC,EAAqDH,eAAgBa,CAAAA,IAAhB,CAAqBV,IAArB,CAArD,EAOED,IAAKE,CAAAA,SAKL,CALiBU,MAAOC,CAAAA,YAAP,CAAoB,KAApB,CAKjB,CAL+CZ,IAK/C,CADIa,IACJ,CADed,IAAKe,CAAAA,UACpB,CAA6B,CAA7B,GAAID,IAASE,CAAAA,IAAKC,CAAAA,MAAlB,CACEjB,IAAKkB,CAAAA,WAAL,CAAiBJ,IAAjB,CADF,CAGEA,IAASK,CAAAA,UAAT,CAAoB,CAApB,CAAuB,CAAvB,CAfJ,EAkBEnB,IAAKE,CAAAA,SAlBP,CAkBmBD,IAhCgB,CADvC,CATF,CAgDAP,OAAOC,CAAAA,OAAP,CAAiBI,MA1FmH;",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/setInnerHTML.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$setInnerHTML\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule setInnerHTML\n */\n\n/* globals MSApp */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar WHITESPACE_TEST = /^[ \\r\\n\\t\\f]/;\nvar NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \\r\\n\\t\\f\\/>]/;\n\n/**\n * Set the innerHTML property of a node, ensuring that whitespace is preserved\n * even in IE8.\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\nvar setInnerHTML = function (node, html) {\n  node.innerHTML = html;\n};\n\n// Win8 apps: Allow all html to be inserted\nif (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {\n  setInnerHTML = function (node, html) {\n    MSApp.execUnsafeLocalFunction(function () {\n      node.innerHTML = html;\n    });\n  };\n}\n\nif (ExecutionEnvironment.canUseDOM) {\n  // IE8: When updating a just created node with innerHTML only leading\n  // whitespace is removed. When updating an existing node with innerHTML\n  // whitespace in root TextNodes is also collapsed.\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html\n\n  // Feature detection; only IE8 is known to behave improperly like this.\n  var testElement = document.createElement('div');\n  testElement.innerHTML = ' ';\n  if (testElement.innerHTML === '') {\n    setInnerHTML = function (node, html) {\n      // Magic theory: IE8 supposedly differentiates between added and updated\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers\n      // from worse whitespace behavior. Re-adding a node like this triggers\n      // the initial and more favorable whitespace behavior.\n      // TODO: What to do on a detached node?\n      if (node.parentNode) {\n        node.parentNode.replaceChild(node, node);\n      }\n\n      // We also implement a workaround for non-visible tags disappearing into\n      // thin air on IE8, this only happens if there is no visible text\n      // in-front of the non-visible tags. Piggyback on the whitespace fix\n      // and simply check if any non-visible tags appear in the source.\n      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {\n        // Recover leading whitespace by temporarily prepending any character.\n        // \\uFEFF has the potential advantage of being zero-width/invisible.\n        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode\n        // in hopes that this is preserved even if \"\\uFEFF\" is transformed to\n        // the actual Unicode character (by Babel, for example).\n        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216\n        node.innerHTML = String.fromCharCode(0xFEFF) + html;\n\n        // deleteData leaves an empty `TextNode` which offsets the index of all\n        // children. Definitely want to avoid this.\n        var textNode = node.firstChild;\n        if (textNode.data.length === 1) {\n          node.removeChild(textNode);\n        } else {\n          textNode.deleteData(0, 1);\n        }\n      } else {\n        node.innerHTML = html;\n      }\n    };\n  }\n}\n\nmodule.exports = setInnerHTML;\n};"],
"names":["shadow$provide","global","require","module","exports","ExecutionEnvironment","WHITESPACE_TEST","NONVISIBLE_TEST","setInnerHTML","node","html","innerHTML","MSApp","execUnsafeLocalFunction","canUseDOM","testElement","document","createElement","parentNode","replaceChild","test","String","fromCharCode","textNode","firstChild","data","length","removeChild","deleteData"]
}
