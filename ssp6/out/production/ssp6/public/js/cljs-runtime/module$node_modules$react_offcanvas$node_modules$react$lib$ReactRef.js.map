{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$ReactRef.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,mEAAA,CAAwF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAchI,IAAIC,WAAaH,OAAA,CAAQ,uEAAR,CAgEjBC,OAAOC,CAAAA,OAAP,CA9DeE,CAoBf,WAAsBC,QAAS,CAACC,QAAD,CAAWC,OAAX,CAAoB,CACjD,GAAgB,IAAhB,GAAIA,OAAJ,EAAoC,CAAA,CAApC,GAAwBA,OAAxB,CAAA,CAGA,IAAIC,IAAMD,OAAQC,CAAAA,GACP,KAAX,EAAIA,GAAJ,GACmCC,OAvBnC,CAuB2BF,OAAQE,CAAAA,MAvBnC,CAAmB,UAAnB,GAAI,MAuBQD,IAvBZ,CAuBYA,GAtBV,CAsBeF,QAtBDI,CAAAA,iBAAV,EAAJ,CADF,CAIEP,UAAWQ,CAAAA,mBAAX,CAmBeL,QAnBf,CAmBUE,GAnBV,CAA+CI,OAA/C,CAkBF,CAJA,CADiD,CApBpCR,CA8Bf,iBAA4BS,QAAS,CAACC,WAAD;AAAcC,WAAd,CAA2B,CAgB9D,MAHgC,KAGhC,GAHgBD,WAGhB,EAHwD,CAAA,CAGxD,GAHwCA,WAGxC,EAFgC,IAEhC,GAFgBC,WAEhB,EAFwD,CAAA,CAExD,GAFwCA,WAExC,EAE4BA,WAAYN,CAAAA,MAFxC,GAEmDK,WAAYL,CAAAA,MAF/D,EAEyEM,WAAYP,CAAAA,GAFrF,GAE6FM,WAAYN,CAAAA,GAlB3C,CA9BjDJ,CAoDf,WAAsBY,QAAS,CAACV,QAAD,CAAWC,OAAX,CAAoB,CACjD,GAAgB,IAAhB,GAAIA,OAAJ,EAAoC,CAAA,CAApC,GAAwBA,OAAxB,CAAA,CAGA,IAAIC,IAAMD,OAAQC,CAAAA,GACP,KAAX,EAAIA,GAAJ,GACmCC,OA9CnC,CA8C2BF,OAAQE,CAAAA,MA9CnC,CAAmB,UAAnB,GAAI,MA8CQD,IA9CZ,CA8CYA,GA7CV,CAAI,IAAJ,CADF,CAIEL,UAAWc,CAAAA,wBAAX,CA0CeX,QA1Cf,CA0CUE,GA1CV,CAAoDI,OAApD,CAyCF,CAJA,CADiD,CApDpCR,CAhBiH;",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/ReactRef.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$ReactRef\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactRef\n */\n\n'use strict';\n\nvar ReactOwner = require('./ReactOwner');\n\nvar ReactRef = {};\n\nfunction attachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(component.getPublicInstance());\n  } else {\n    // Legacy ref\n    ReactOwner.addComponentAsRefTo(component, ref, owner);\n  }\n}\n\nfunction detachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(null);\n  } else {\n    // Legacy ref\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);\n  }\n}\n\nReactRef.attachRefs = function (instance, element) {\n  if (element === null || element === false) {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    attachRef(ref, instance, element._owner);\n  }\n};\n\nReactRef.shouldUpdateRefs = function (prevElement, nextElement) {\n  // If either the owner or a `ref` has changed, make sure the newest owner\n  // has stored a reference to `this`, and the previous owner (if different)\n  // has forgotten the reference to `this`. We use the element instead\n  // of the public this.props because the post processing cannot determine\n  // a ref. The ref conceptually lives on the element.\n\n  // TODO: Should this even be possible? The owner cannot change because\n  // it's forbidden by shouldUpdateReactComponent. The ref can change\n  // if you swap the keys of but not the refs. Reconsider where this check\n  // is made. It probably belongs where the key checking and\n  // instantiateReactComponent is done.\n\n  var prevEmpty = prevElement === null || prevElement === false;\n  var nextEmpty = nextElement === null || nextElement === false;\n\n  return(\n    // This has a few false positives w/r/t empty components.\n    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref\n  );\n};\n\nReactRef.detachRefs = function (instance, element) {\n  if (element === null || element === false) {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    detachRef(ref, instance, element._owner);\n  }\n};\n\nmodule.exports = ReactRef;\n};"],
"names":["shadow$provide","global","require","module","exports","ReactOwner","ReactRef","ReactRef.attachRefs","instance","element","ref","_owner","getPublicInstance","addComponentAsRefTo","owner","ReactRef.shouldUpdateRefs","prevElement","nextElement","ReactRef.detachRefs","removeComponentAsRefFrom"]
}
