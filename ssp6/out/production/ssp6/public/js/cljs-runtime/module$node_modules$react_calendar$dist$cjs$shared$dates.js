shadow$provide.module$node_modules$react_calendar$dist$cjs$shared$dates=function(global,require,module,exports){function getDayOfWeek(date,calendarType){void 0===calendarType&&(calendarType=const_js_1.CALENDAR_TYPES.ISO_8601);date=date.getDay();switch(calendarType){case const_js_1.CALENDAR_TYPES.ISO_8601:return(date+6)%7;case const_js_1.CALENDAR_TYPES.ISLAMIC:return(date+1)%7;case const_js_1.CALENDAR_TYPES.HEBREW:case const_js_1.CALENDAR_TYPES.GREGORY:return date;default:throw Error("Unsupported calendar type.");
}}function getBeginOfWeek(date,calendarType){void 0===calendarType&&(calendarType=const_js_1.CALENDAR_TYPES.ISO_8601);var year=(0,date_utils_1.getYear)(date),monthIndex=(0,date_utils_1.getMonth)(date);date=date.getDate()-getDayOfWeek(date,calendarType);return new Date(year,monthIndex,date)}function getBegin(rangeType,date){switch(rangeType){case "century":return(0,date_utils_1.getCenturyStart)(date);case "decade":return(0,date_utils_1.getDecadeStart)(date);case "year":return(0,date_utils_1.getYearStart)(date);
case "month":return(0,date_utils_1.getMonthStart)(date);case "day":return(0,date_utils_1.getDayStart)(date);default:throw Error("Invalid rangeType: ".concat(rangeType));}}function getEnd(rangeType,date){switch(rangeType){case "century":return(0,date_utils_1.getCenturyEnd)(date);case "decade":return(0,date_utils_1.getDecadeEnd)(date);case "year":return(0,date_utils_1.getYearEnd)(date);case "month":return(0,date_utils_1.getMonthEnd)(date);case "day":return(0,date_utils_1.getDayEnd)(date);default:throw Error("Invalid rangeType: ".concat(rangeType));
}}function toYearLabel(locale,formatYear,dates){void 0===formatYear&&(formatYear=dateFormatter_js_1.formatYear);return dates.map(function(date){return formatYear(locale,date)}).join(" â€“ ")}Object.defineProperty(exports,"__esModule",{value:!0});exports.isWeekend=exports.isCurrentDayOfWeek=exports.getDecadeLabel=exports.getCenturyLabel=exports.getValueRange=exports.getRange=exports.getEndPrevious2=exports.getEndPrevious=exports.getEnd=exports.getBeginNext2=exports.getBeginPrevious2=exports.getBeginNext=
exports.getBeginPrevious=exports.getBegin=exports.getWeekNumber=exports.getBeginOfWeek=exports.getBeginOfDecadeYear=exports.getBeginOfCenturyYear=exports.getDayOfWeek=void 0;var date_utils_1=require("module$node_modules$$wojtekmaj$date_utils$dist$cjs$index"),const_js_1=require("module$node_modules$react_calendar$dist$cjs$shared$const"),dateFormatter_js_1=require("module$node_modules$react_calendar$dist$cjs$shared$dateFormatter"),SUNDAY=const_js_1.WEEKDAYS[0],FRIDAY=const_js_1.WEEKDAYS[5],SATURDAY=
const_js_1.WEEKDAYS[6];exports.getDayOfWeek=getDayOfWeek;exports.getBeginOfCenturyYear=function(date){date=(0,date_utils_1.getCenturyStart)(date);return(0,date_utils_1.getYear)(date)};exports.getBeginOfDecadeYear=function(date){date=(0,date_utils_1.getDecadeStart)(date);return(0,date_utils_1.getYear)(date)};exports.getBeginOfWeek=getBeginOfWeek;exports.getWeekNumber=function(date,calendarType){void 0===calendarType&&(calendarType=const_js_1.CALENDAR_TYPES.ISO_8601);var calendarTypeForWeekNumber=calendarType===
const_js_1.CALENDAR_TYPES.GREGORY?const_js_1.CALENDAR_TYPES.GREGORY:const_js_1.CALENDAR_TYPES.ISO_8601,beginOfWeek=getBeginOfWeek(date,calendarType),year=(0,date_utils_1.getYear)(date)+1;do{var dayInWeekOne=new Date(year,0,calendarTypeForWeekNumber===const_js_1.CALENDAR_TYPES.ISO_8601?4:1);dayInWeekOne=getBeginOfWeek(dayInWeekOne,calendarType);--year}while(date<dayInWeekOne);return Math.round((beginOfWeek.getTime()-dayInWeekOne.getTime())/6048E5)+1};exports.getBegin=getBegin;exports.getBeginPrevious=
function(rangeType,date){switch(rangeType){case "century":return(0,date_utils_1.getPreviousCenturyStart)(date);case "decade":return(0,date_utils_1.getPreviousDecadeStart)(date);case "year":return(0,date_utils_1.getPreviousYearStart)(date);case "month":return(0,date_utils_1.getPreviousMonthStart)(date);default:throw Error("Invalid rangeType: ".concat(rangeType));}};exports.getBeginNext=function(rangeType,date){switch(rangeType){case "century":return(0,date_utils_1.getNextCenturyStart)(date);case "decade":return(0,date_utils_1.getNextDecadeStart)(date);
case "year":return(0,date_utils_1.getNextYearStart)(date);case "month":return(0,date_utils_1.getNextMonthStart)(date);default:throw Error("Invalid rangeType: ".concat(rangeType));}};exports.getBeginPrevious2=function(rangeType,date){switch(rangeType){case "decade":return(0,date_utils_1.getPreviousDecadeStart)(date,-100);case "year":return(0,date_utils_1.getPreviousYearStart)(date,-10);case "month":return(0,date_utils_1.getPreviousMonthStart)(date,-12);default:throw Error("Invalid rangeType: ".concat(rangeType));
}};exports.getBeginNext2=function(rangeType,date){switch(rangeType){case "decade":return(0,date_utils_1.getNextDecadeStart)(date,100);case "year":return(0,date_utils_1.getNextYearStart)(date,10);case "month":return(0,date_utils_1.getNextMonthStart)(date,12);default:throw Error("Invalid rangeType: ".concat(rangeType));}};exports.getEnd=getEnd;exports.getEndPrevious=function(rangeType,date){switch(rangeType){case "century":return(0,date_utils_1.getPreviousCenturyEnd)(date);case "decade":return(0,date_utils_1.getPreviousDecadeEnd)(date);
case "year":return(0,date_utils_1.getPreviousYearEnd)(date);case "month":return(0,date_utils_1.getPreviousMonthEnd)(date);default:throw Error("Invalid rangeType: ".concat(rangeType));}};exports.getEndPrevious2=function(rangeType,date){switch(rangeType){case "decade":return(0,date_utils_1.getPreviousDecadeEnd)(date,-100);case "year":return(0,date_utils_1.getPreviousYearEnd)(date,-10);case "month":return(0,date_utils_1.getPreviousMonthEnd)(date,-12);default:throw Error("Invalid rangeType: ".concat(rangeType));
}};exports.getRange=function(rangeType,date){switch(rangeType){case "century":return(0,date_utils_1.getCenturyRange)(date);case "decade":return(0,date_utils_1.getDecadeRange)(date);case "year":return(0,date_utils_1.getYearRange)(date);case "month":return(0,date_utils_1.getMonthRange)(date);case "day":return(0,date_utils_1.getDayRange)(date);default:throw Error("Invalid rangeType: ".concat(rangeType));}};exports.getValueRange=function(rangeType,date1,date2){date1=[date1,date2].sort(function(a,b){return a.getTime()-
b.getTime()});return[getBegin(rangeType,date1[0]),getEnd(rangeType,date1[1])]};exports.getCenturyLabel=function(locale,formatYear,date){return toYearLabel(locale,formatYear,(0,date_utils_1.getCenturyRange)(date))};exports.getDecadeLabel=function(locale,formatYear,date){return toYearLabel(locale,formatYear,(0,date_utils_1.getDecadeRange)(date))};exports.isCurrentDayOfWeek=function(date){return date.getDay()===(new Date).getDay()};exports.isWeekend=function(date,calendarType){void 0===calendarType&&
(calendarType=const_js_1.CALENDAR_TYPES.ISO_8601);date=date.getDay();switch(calendarType){case const_js_1.CALENDAR_TYPES.ISLAMIC:case const_js_1.CALENDAR_TYPES.HEBREW:return date===FRIDAY||date===SATURDAY;case const_js_1.CALENDAR_TYPES.ISO_8601:case const_js_1.CALENDAR_TYPES.GREGORY:return date===SATURDAY||date===SUNDAY;default:throw Error("Unsupported calendar type.");}}}
//# sourceMappingURL=module$node_modules$react_calendar$dist$cjs$shared$dates.js.map
