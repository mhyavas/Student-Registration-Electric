{"version":3,"sources":["wip/demo_custom_types.cljc"],"mappings":"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","names":["this__5343__auto__","k__5344__auto__","this__5345__auto__","k49876","else__5346__auto__","G__49880","cljs.core/Keyword","field","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__49894","vec__49895","k__5367__auto__","cljs.core.nth","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__49875","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this49877","other49878","cljs.core._EQ_","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__49919","this__5351__auto__","k__5352__auto__","pred__49924","cljs.core/keyword-identical?","expr__49925","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","wip.demo-custom-types/MyCustomType","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__49879","extmap__5385__auto__","G__49934","cljs.core/record?","wip.demo-custom-types/->MyCustomType","wip.demo-custom-types/map->MyCustomType","wip.demo-custom-types/write-handler","cognitect.transit.write_handler","_","x","wip.demo-custom-types/read-handler","cognitect.transit/read-handler","hyperfiddle.electric.impl.io/*read-handlers*"],"sourcesContent":["(ns wip.demo-custom-types\r\n  (:require [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [cognitect.transit :as t]))\r\n\r\n;; Demo shows how to serialize custom types in Electric\r\n\r\n(defrecord MyCustomType [field]) ; custom type\r\n\r\n(def write-handler (t/write-handler\r\n                     (fn [_] \"wip.demo-custom-types/MyCustomType\") ; this tag must be namespaced!\r\n                     (fn [x] (into {} x))))\r\n\r\n(def read-handler (t/read-handler map->MyCustomType))\r\n\r\n; Todo cleanup, there are better ways to do this\r\n#?(:clj (alter-var-root #'hyperfiddle.electric.impl.io/*write-handlers* assoc MyCustomType write-handler)) ; server: write only\r\n#?(:cljs (set! hyperfiddle.electric.impl.io/*read-handlers* (assoc hyperfiddle.electric.impl.io/*read-handlers* \"wip.demo-custom-types/MyCustomType\" read-handler))) ; client: read only\r\n\r\n(e/defn CustomTypes []\r\n  (e/server\r\n    (let [object (MyCustomType. \"value\")]\r\n      (e/client\r\n        (dom/dl\r\n          (dom/dt (dom/text \"type\"))  (dom/dd (dom/text (pr-str (type object))))\r\n          (dom/dt (dom/text \"value\")) (dom/dd (dom/text (pr-str object))))))))\r\n"]}