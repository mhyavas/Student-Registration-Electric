{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$ReactComponent.js",
"lineCount":5,
"mappings":"AAAAA,cAAA,CAAA,yEAAA,CAA8F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAwBtIC,QAASA,eAAc,CAACC,KAAD,CAAQC,OAAR,CAAiBC,OAAjB,CAA0B,CAC/C,IAAKF,CAAAA,KAAL,CAAaA,KACb,KAAKC,CAAAA,OAAL,CAAeA,OACf,KAAKE,CAAAA,IAAL,CAAYC,WAGZ,KAAKF,CAAAA,OAAL,CAAeA,OAAf,EAA0BG,oBANqB,CAVjD,IAAIA,qBAAuBT,OAAA,CAAQ,iFAAR,CAA3B,CAEIU,kBAAoBV,OAAA,CAAQ,8EAAR,CAFxB;AAGIQ,YAAcR,OAAA,CAAQ,0CAAR,CAHlB,CAIIW,UAAYX,OAAA,CAAQ,wCAAR,CAJhB,CAKIY,QAAUZ,OAAA,CAAQ,sCAAR,CAcdG,eAAeU,CAAAA,SAAUC,CAAAA,gBAAzB,CAA4C,EA2B5CX,eAAeU,CAAAA,SAAUE,CAAAA,QAAzB,CAAoCC,QAAS,CAACC,YAAD,CAAeC,QAAf,CAAyB,CAC1C,QAA1B,GAAE,MAAOD,aAAT,EAA8D,UAA9D,GAAsC,MAAOA,aAA7C,EAA4F,IAA5F,EAA4EA,YAA5E,CAA4IN,SAAA,CAAU,CAAA,CAAV,CAAiB,uHAAjB,CAA5I;AAAgTQ,IAAAA,EAEtQP,QAAA,CAAwB,IAAxB,EAAQK,YAAR,CAA8B,0FAA9B,CAE1C,KAAKX,CAAAA,OAAQc,CAAAA,eAAb,CAA6B,IAA7B,CAAmCH,YAAnC,CACIC,SAAJ,EACE,IAAKZ,CAAAA,OAAQe,CAAAA,eAAb,CAA6B,IAA7B,CAAmCH,QAAnC,CAPkE,CAyBtEf,eAAeU,CAAAA,SAAUS,CAAAA,WAAzB,CAAuCC,QAAS,CAACL,QAAD,CAAW,CACzD,IAAKZ,CAAAA,OAAQkB,CAAAA,kBAAb,CAAgC,IAAhC,CACIN,SAAJ,EACE,IAAKZ,CAAAA,OAAQe,CAAAA,eAAb,CAA6B,IAA7B,CAAmCH,QAAnC,CAHuD,CAarDO,OAAAA,CAAiB,CACnBC,WAAY,CAAC,YAAD,CAAe,8CAAf,CADO,CAEnBC,UAAW,CAAC,WAAD,CAAc,oHAAd,CAFQ;AAGnBC,aAAc,CAAC,cAAD,CAAiB,8CAAjB,CAHK,CAInBC,aAAc,CAAC,cAAD,CAAiB,iGAAjB,CAJK,CAKnBC,SAAU,CAAC,UAAD,CAAa,8CAAb,CALS,CAOjBC,QAAAA,CAA2BA,QAAS,CAACC,UAAD,CAAaC,IAAb,CAAmB,CACrDvB,iBAAJ,EACEwB,MAAOC,CAAAA,cAAP,CAAsBhC,cAAeU,CAAAA,SAArC,CAAgDmB,UAAhD,CAA4D,CAC1DI,IAAKA,QAAS,EAAG,CACyBxB,OAAA,CAAQ,CAAA,CAAR,CAAe,6DAAf,CAA8EqB,IAAA,CAAK,CAAL,CAA9E,CAAuFA,IAAA,CAAK,CAAL,CAAvF,CADzB,CADyC,CAA5D,CAFuD,CAU3D,KAAKI,IAAIA,MAAT,GAAmBZ,OAAnB,CACMA,MAAea,CAAAA,cAAf,CAA8BD,MAA9B,CAAJ;AACEN,OAAA,CAAyBM,MAAzB,CAAiCZ,MAAA,CAAeY,MAAf,CAAjC,CAKNpC,OAAOC,CAAAA,OAAP,CAAiBC,cA1HqH;",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/ReactComponent.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$ReactComponent\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponent\n */\n\n'use strict';\n\nvar ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\n\nvar canDefineProperty = require('./canDefineProperty');\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction ReactComponent(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nReactComponent.prototype.isReactComponent = {};\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nReactComponent.prototype.setState = function (partialState, callback) {\n  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;\n  }\n  this.updater.enqueueSetState(this, partialState);\n  if (callback) {\n    this.updater.enqueueCallback(this, callback);\n  }\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nReactComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this);\n  if (callback) {\n    this.updater.enqueueCallback(this, callback);\n  }\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\nif (process.env.NODE_ENV !== 'production') {\n  var deprecatedAPIs = {\n    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],\n    setProps: ['setProps', 'Instead, call render again at the top level.']\n  };\n  var defineDeprecationWarning = function (methodName, info) {\n    if (canDefineProperty) {\n      Object.defineProperty(ReactComponent.prototype, methodName, {\n        get: function () {\n          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;\n          return undefined;\n        }\n      });\n    }\n  };\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nmodule.exports = ReactComponent;\n};"],
"names":["shadow$provide","global","require","module","exports","ReactComponent","props","context","updater","refs","emptyObject","ReactNoopUpdateQueue","canDefineProperty","invariant","warning","prototype","isReactComponent","setState","ReactComponent.prototype.setState","partialState","callback","undefined","enqueueSetState","enqueueCallback","forceUpdate","ReactComponent.prototype.forceUpdate","enqueueForceUpdate","deprecatedAPIs","getDOMNode","isMounted","replaceProps","replaceState","setProps","defineDeprecationWarning","methodName","info","Object","defineProperty","get","fnName","hasOwnProperty"]
}
