{"version":3,"sources":["contrib/color.cljc"],"mappings":"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","names":["contrib.color/PHI","contrib.color/SEED-ANGLE","contrib.color/clamp","low","up","x","x__5133__auto__","y__5134__auto__","x__5130__auto__","y__5131__auto__","contrib.color/rgbint","p__34445","vec__34446","cljs.core.nth","contrib.color/hsluv->rgb","h","s","l","cljs.core.mapv","contrib.hsluv/hsluv->rgb","contrib.color/css-rgb-str","r","g","b","var_args","G__34454","contrib.color/color","js/Error","contrib.color.color","seed-angle","saturation","lightness","cljs.core.apply","cljs.core/mod","cljs.core/hash","p__34457","vec__34459","contrib.color/hsl->rgb*","H","S","L","vec__34463","C","Math/abs","X","m","R'","G'","B'","contrib.color/hsl->rgb","hsl","vec__34473","R","G","B","Math/round","p__34479","vec__34482","contrib.color/oklch->rgb","c","contrib.oklab/oklch->rgb"],"sourcesContent":["(ns contrib.color\n  (:require [contrib.hsluv :as hsluv]\n            [contrib.oklab :as oklab]\n            [hyperfiddle.rcf :refer [tests]]))\n\n(def PHI 0.618033988749895)  ; Golden ratio\n(def SEED-ANGLE (/ 125 360)) ; Rotate the chromatic circle like a pointer knob. 1/2 means half a turn.\n\n(defn clamp [low up x] (min (max low x) up))\n\n(tests\n  (clamp 5 10 4)  := 5\n  (clamp 5 10 11) := 10\n  (clamp 5 10 6)  := 6\n  )\n\n(defn rgbint [x] (clamp 0 255 (int (* x 255))))\n\n(defn hsluv->rgb [[h s l]]\n  (mapv rgbint (hsluv/hsluv->rgb [h s l])))\n\n(defn css-rgb-str [r g b] (str \"rgb(\"r\",\"g\",\"b\")\"))\n\n(defn color \"Hash a value into an harmonious color. Contrast is consistent. Plays well with text and colored backgrounds.\n  https://www.hsluv.org/\"\n  ([x] (color x SEED-ANGLE 50 70 #_85))\n  ([x seed-angle saturation lightness]\n   (apply css-rgb-str\n     (if (nil? x)\n       (hsluv->rgb [0 0 80])\n       (hsluv->rgb [(* 360 (mod (+ seed-angle (* (hash x) PHI)) 1)) ; Hue\n                    saturation lightness])))))\n\n;;; Misc\n\n(defn hsl->rgb* [[H S L]]\n  (let [S          (double (/ S 100))            ; scale to [0..1]\n        L          (double (/ L 100))\n        C          (* (- 1 (Math/abs (- (* L 2) 1))) S)\n        X          (* C (- 1 (Math/abs (- (mod (/ H 60) 2) 1))))\n        m          (- L (/ C 2))\n        [R' G' B'] (cond\n                     (< H 60)  [C X 0]\n                     (< H 120) [X C 0]\n                     (< H 180) [0 C X]\n                     (< H 240) [0 X C]\n                     (< H 300) [X 0 C]\n                     (< H 360) [C 0 X])]\n    [(* (+ R' m) 255)\n     (* (+ G' m) 255)\n     (* (+ B' m) 255)]))\n\n(defn hsl->rgb [hsl]\n  (let [[R G B] (hsl->rgb* hsl)]\n    [(Math/round ^float R)\n     (Math/round ^float G)\n     (Math/round ^float B)]))\n\n(tests\n  (hsl->rgb [0   0   0])   := [0 0 0]       ; black\n  (hsl->rgb [0   0   100]) := [255 255 255] ; white\n  (hsl->rgb [0   100 50])  := [255 0 0]     ; red\n  (hsl->rgb [120 100 50])  := [0 255 0]     ; lime\n  (hsl->rgb [240 100 50])  := [0 0 255]     ; blue\n  (hsl->rgb [60  100 50])  := [255 255 0]   ; yellow\n  (hsl->rgb [180 100 50])  := [0 255 255]   ; cyan\n  (hsl->rgb [300 100 50])  := [255 0 255]   ; magenta\n  (hsl->rgb [0   0   75])  := [191 191 191] ; silver\n  (hsl->rgb [0   0   50])  := [128 128 128] ; gray\n  (hsl->rgb [0   100 25])  := [128 0 0]     ; maroon\n  (hsl->rgb [60  100 25])  := [128 128 0]   ; olive\n  (hsl->rgb [120 100 25])  := [0 128 0]     ; green\n  (hsl->rgb [300 100 25])  := [128 0 128]   ; purple\n  (hsl->rgb [180 100 25])  := [0 128 128]   ; teal\n  (hsl->rgb [240 100 25])  := [0 0 128]     ; navy\n  )\n\n\n;; OKLCH\n\n(defn oklch->rgb [[l c h]] (mapv rgbint (oklab/oklch->rgb [(/ l 100) c h])))\n\n(comment\n  ;; XYZ\n  ;; Untested\n  (def ^:const Mxyz [[0.4124 0.3576 0.1805]\n                     [0.2126 0.7152 0.0722]\n                     [0.0193 0.1192 0.9505]])\n\n  (defn scale-rgb [C]\n    (let [var_C (/ C 255)]\n      (* (if (> var_C 0.04045)\n           (Math/pow (/ (+ var_C 0.055) 1.055) 2.4)\n           (/ var_C 12.92))\n        100)))\n\n  (let [[[xyz1a xyz1b xyz1c]\n         [xyz2a xyz2b xyz2c]\n         [xyz3a xyz3b xyz3c]] Mxyz]\n    (defn rgb->xyz [[R G B]]\n      (let [var_R (scale-rgb R)\n            var_G (scale-rgb G)\n            var_B (scale-rgb B)\n\n            X (+ (* var_R xyz1a) (* var_G xyz1b) (* var_B xyz1c))\n            Y (+ (* var_R xyz2a) (* var_G xyz2b) (* var_B xyz2c))\n            Z (+ (* var_R xyz3a) (* var_G xyz3b) (* var_B xyz3c))\n            ]\n        [X Y Z]))))\n"]}