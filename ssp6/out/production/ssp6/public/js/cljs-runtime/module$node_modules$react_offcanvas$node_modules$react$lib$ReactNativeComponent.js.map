{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$ReactNativeComponent.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,+EAAA,CAAoG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAc5I,IAAIC,OAASH,OAAA,CAAQ,0EAAR,CAAb,CACII,UAAYJ,OAAA,CAAQ,wCAAR,CADhB,CAIIK,sBAAwB,IAJ5B,CAMIC,oBAAsB,EAN1B,CAOIC,mBAAqB,IAyEzBN,OAAOC,CAAAA,OAAP,CAR2BM,CACzBC,4BAxCFA,QAAoC,CAACC,OAAD,CAAU,CAC5C,GAA4B,UAA5B,GAAI,MAAOA,QAAQC,CAAAA,IAAnB,CACE,MAAOD,QAAQC,CAAAA,IAEbC,QAAAA,CAAMF,OAAQC,CAAAA,IAClB;IAAIE,eAAiBP,mBAAA,CAAoBM,OAApB,CACC,KAAtB,EAAIC,cAAJ,GACEP,mBAAA,CAAoBM,OAApB,CADF,CAC6BC,cAD7B,CApC6BC,IAqCiB,CAAyBF,OAAzB,CAD9C,CAGA,OAAOC,eATqC,CAuCnBL,CAEzBO,wBAvBFA,QAAgC,CAACL,OAAD,CAAU,CACvCL,qBAAD,CAAwKW,IAAAA,EAAxK,CAAiEZ,SAAA,CAAU,CAAA,CAAV,CAAiB,iDAAjB,CAAoEM,OAAQC,CAAAA,IAA5E,CACjE,OAAO,KAAIN,qBAAJ,CAA0BK,OAAQC,CAAAA,IAAlC,CAAwCD,OAAQO,CAAAA,KAAhD,CAFiC,CAqBfT,CAGzBU,sBAfFA,QAA8B,CAACC,IAAD,CAAO,CACnC,MAAO,KAAIZ,kBAAJ,CAAuBY,IAAvB,CAD4B,CAYVX,CAIzBY,gBARFA,QAAwB,CAACC,SAAD,CAAY,CAClC,MAAOA,UAAP,WAA4Bd,mBADM,CAITC;AAKzBc,UApEkCC,CAGlCC,4BAA6BA,QAAS,CAACX,cAAD,CAAiB,CACrDR,qBAAA,CAAwBQ,cAD6B,CAHrBU,CAQlCE,yBAA0BA,QAAS,CAACZ,cAAD,CAAiB,CAClDN,kBAAA,CAAqBM,cAD6B,CARlBU,CAalCG,uBAAwBA,QAAS,CAACC,gBAAD,CAAmB,CAClDxB,MAAA,CAAOG,mBAAP,CAA4BqB,gBAA5B,CADkD,CAblBJ,CA+DTf,CAtFiH;",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/ReactNativeComponent.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$ReactNativeComponent\"] = function(global,require,module,exports) {\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeComponent\n */\n\n'use strict';\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\n\nvar autoGenerateWrapperClass = null;\nvar genericComponentClass = null;\n// This registry keeps track of wrapper classes around native tags.\nvar tagToComponentClass = {};\nvar textComponentClass = null;\n\nvar ReactNativeComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function (componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a text component class that takes the text string to be\n  // rendered as props.\n  injectTextComponentClass: function (componentClass) {\n    textComponentClass = componentClass;\n  },\n  // This accepts a keyed object with classes as values. Each key represents a\n  // tag. That particular tag will use this class instead of the generic one.\n  injectComponentClasses: function (componentClasses) {\n    assign(tagToComponentClass, componentClasses);\n  }\n};\n\n/**\n * Get a composite component wrapper class for a specific tag.\n *\n * @param {ReactElement} element The tag for which to get the class.\n * @return {function} The React class constructor function.\n */\nfunction getComponentClassForElement(element) {\n  if (typeof element.type === 'function') {\n    return element.type;\n  }\n  var tag = element.type;\n  var componentClass = tagToComponentClass[tag];\n  if (componentClass == null) {\n    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);\n  }\n  return componentClass;\n}\n\n/**\n * Get a native internal component class for a specific tag.\n *\n * @param {ReactElement} element The element to create.\n * @return {function} The internal class constructor function.\n */\nfunction createInternalComponent(element) {\n  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;\n  return new genericComponentClass(element.type, element.props);\n}\n\n/**\n * @param {ReactText} text\n * @return {ReactComponent}\n */\nfunction createInstanceForText(text) {\n  return new textComponentClass(text);\n}\n\n/**\n * @param {ReactComponent} component\n * @return {boolean}\n */\nfunction isTextComponent(component) {\n  return component instanceof textComponentClass;\n}\n\nvar ReactNativeComponent = {\n  getComponentClassForElement: getComponentClassForElement,\n  createInternalComponent: createInternalComponent,\n  createInstanceForText: createInstanceForText,\n  isTextComponent: isTextComponent,\n  injection: ReactNativeComponentInjection\n};\n\nmodule.exports = ReactNativeComponent;\n};"],
"names":["shadow$provide","global","require","module","exports","assign","invariant","genericComponentClass","tagToComponentClass","textComponentClass","ReactNativeComponent","getComponentClassForElement","element","type","tag","componentClass","autoGenerateWrapperClass","createInternalComponent","undefined","props","createInstanceForText","text","isTextComponent","component","injection","ReactNativeComponentInjection","injectGenericComponentClass","injectTextComponentClass","injectComponentClasses","componentClasses"]
}
