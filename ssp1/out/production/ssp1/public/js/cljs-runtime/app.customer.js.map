{"version":3,"sources":["app/customer.cljc"],"mappings":";;;;AAaA,AACA,AAES,uBAAA,vBAAMA;AAAN,AACE,OAACC;;AAEZ,AAAKC,mCAAe,6CAAA,2CAAA,2DAAA,2CAAA,sDAAA,GAAA,0DAAA,6DAAA,mEAAA,GAAA,oEAAA,GAAA,sDAAA,GAAA,6DAAA,jnBAACC;AAOrB,AAmBA,AASA,AAUA,AAgBA,AAAKC,4BAAa,wEAAA,2CAAA,4DAAA,2CAAA,AAAA,1NAACC,gDAAQC,mPACoCC;AAI/D","names":["app.customer/getTime","cljs-time.core/now","app.customer/!state-project","cljs.core.atom","app.customer/read-edn-str","cljs.core.partial","clojure.edn/read-string","app.customer.goog$module$goog$math$Long.fromString"],"sourcesContent":["(ns app.customer\r\n  #?(:cljs (:import [goog.math Long]\r\n                    goog.date.DateTime))\r\n  (:require\r\n    [hyperfiddle.electric :as e]\r\n    [hyperfiddle.electric-dom2 :as dom]\r\n    [hyperfiddle.history :as history]\r\n    #?(:clj [datomic.client.api :as dt])\r\n    #?(:cljs [cljs-time.core :as ct])))\r\n\r\n\r\n\r\n\r\n(e/def conn)\r\n(e/def db)\r\n\r\n#?(:cljs (defn getTime []\r\n           (ct/now)))\r\n\r\n(def !state-project (atom {:project {:title       \"\"\r\n                                     :status      :inactive\r\n                                     :create-date \"\"\r\n                                     :description \"\"\r\n                                     :types       \"\"\r\n                                     :customer    \"\"}}))\r\n\r\n(e/defn Main []\r\n        (e/client\r\n          (e/server\r\n            (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n              (binding [db (dt/db conn)]\r\n                (e/client\r\n                  (dom/h2 (dom/text \"Please Select Your Company\"))\r\n                  #_(dom/text (str (.toLocaleDateString (js/Date.))))\r\n                  (dom/text (str (getTime)))\r\n                  (dom/div\r\n                    (dom/table\r\n                      (dom/th (dom/text \"Name\"))\r\n                      (e/for [value (e/server (dt/q '[:find (pull ?e [*])\r\n                                                      :where [?e :customer/id _]] db))]\r\n                             (dom/tr\r\n                               (dom/td (history/link [::customer (:customer/name (first value))] (dom/text (:customer/name (first value)))))))))))))))\r\n\r\n\r\n\r\n(e/defn Create-Project [name]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n              (e/client\r\n                (dom/h2 (dom/text \"Creating New Project for \" name))\r\n                (dom/div))))))\r\n\r\n\r\n(e/defn CustomerPage [name]\r\n        (e/server\r\n         (e/client\r\n           (dom/div (dom/text \"Nav: \")\r\n                    (history/link [::create-project name] (dom/text \"Create-Project\")) (dom/text \" \"))\r\n\r\n           (dom/text \"Customer Page\" name))))\r\n\r\n\r\n\r\n(e/defn Page [[page x]]\r\n        (e/client\r\n          (dom/link (dom/props {:rel :stylesheet, :href \"gridsheet-optional.css\"}))\r\n          (dom/div (dom/props {:class \"user-gridsheet-demo\"})\r\n                   (dom/div (dom/text \"Nav: \")\r\n                            (history/link [::main] (dom/text \"Customer Home\")) (dom/text \" \"))\r\n\r\n\r\n                   (case page\r\n                     ::customer (history/router 2 (e/server (CustomerPage. x)))\r\n                     ::main (history/router 1 (e/server (Main.)))\r\n                     ::create-project (history/router 2 (e/server (Create-Project. x)))\r\n                     (e/client (dom/text \"no matching route: \" (pr-str page)))))))\r\n\r\n\r\n\r\n(def read-edn-str (partial clojure.edn/read-string\r\n                           {:readers #?(:cljs {'goog.math/Long goog.math.Long/fromString} ; datomic cloud long ids\r\n                                        :clj {})}))\r\n\r\n\r\n(e/defn Customer []\r\n        (e/client\r\n          (binding [dom/node js/document.body\r\n                    history/encode contrib.ednish/encode-uri\r\n                    history/decode #(or (contrib.ednish/decode-path % read-edn-str) [::main])]\r\n\r\n            (history/router (history/HTML5-History.)\r\n                            (dom/pre (dom/text (contrib.str/pprint-str history/route)))\r\n                            (e/server\r\n                              (e/client\r\n                                (Page. history/route)))))))\r\n"]}