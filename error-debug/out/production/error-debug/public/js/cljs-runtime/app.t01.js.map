{"version":3,"sources":["app/t01.cljc"],"mappings":";;;;;;;;AAgBA,AAIA,AAKA,AAkBA,AAAKA,uBAAa,wEAAA,2CAAA,4DAAA,2CAAA,AAAA,1NAACC,gDAAQC,mPACoCC;AAG/D","names":["app.t01/read-edn-str","cljs.core.partial","clojure.edn/read-string","app.t01.goog$module$goog$math$Long.fromString"],"sourcesContent":["(ns app.t01\r\n  #?(:cljs (:import [goog.math Long]))\r\n  #?(:cljs (:require-macros [app.t01 :refer [with-reagent]]))\r\n  (:require contrib.ednish\r\n            clojure.edn\r\n            [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.history :as history]\r\n            #?(:cljs [\"react\" :as react])\r\n            #?(:cljs [\"slate\" :refer [createEditor]])\r\n            #?(:cljs [\"slate-react\" :refer [Slate Editable withReact]])\r\n            #?(:cljs [reagent.core :as r])\r\n            #?(:cljs [reagent.dom :as rdom])\r\n            #?(:cljs [\"react-dom/client\" :as ReactDom])))\r\n\r\n\r\n(e/defn app01 []\r\n        (e/client\r\n          (dom/text \"Test1 Hello\")))\r\n\r\n(e/defn app02 [input]\r\n        (e/client\r\n          (dom/text input)))\r\n\r\n\r\n(e/defn Page [[page x]]\r\n        (e/client\r\n          (dom/h1 (dom/text \"Software Sourcing Platform\"))\r\n          (dom/link (dom/props {:rel :stylesheet, :href \"gridsheet-optional.css\"}))\r\n          (dom/div\r\n            (dom/ul\r\n                    (dom/li  (history/link [::summary] (dom/text \"home\")))\r\n                    (dom/li (history/link [::test1 \"input\"] (dom/text \"test1\"))))))\r\n\r\n\r\n        (case page\r\n          ::summary (history/router 1 (e/server (app01.)))\r\n          ::test1 (history/router 2 (e/server (app02. x)))\r\n\r\n          (e/client (dom/text \"no matching route: \" (pr-str page)))))\r\n\r\n\r\n\r\n(def read-edn-str (partial clojure.edn/read-string\r\n                           {:readers #?(:cljs {'goog.math/Long goog.math.Long/fromString} ; datomic cloud long ids\r\n                                        :clj {})}))\r\n\r\n(e/defn Main []\r\n        (e/client\r\n          (binding [dom/node js/document.body\r\n                    history/encode contrib.ednish/encode-uri\r\n                    history/decode #(or (contrib.ednish/decode-path % clojure.edn/read-string) [::summary])]\r\n            (history/router (history/HTML5-History.)\r\n                            #_(set! (.-title js/document) (str (clojure.string/capitalize (name (first history/route))))\r\n                                    \" - Datomic Browser\")\r\n                            (dom/pre (dom/text (contrib.str/pprint-str history/route)))\r\n\r\n                            (Page. history/route)))))\r\n"]}