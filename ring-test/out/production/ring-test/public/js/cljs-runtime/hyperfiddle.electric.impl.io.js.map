{"version":3,"sources":["hyperfiddle/electric/impl/io.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","com.cognitect.transit.types/UUID","hyperfiddle.electric.impl.io/default-write-handler","cognitect.transit.write_handler","x","hyperfiddle.electric.impl.io/-last-unserializable-for-repl","js/console.log","cljs.core.pr_str","cljs.core/type","_","hyperfiddle.electric.impl.io/->cache","size","G__29512","arr29513","cljs.core/identity","cljs.core.object_array","hyperfiddle.electric.impl.io/cache-add","cache","k","v","i","cljs.core/count","cljs.core._EQ_","hyperfiddle.electric.impl.array-fields/get","arr29515","widx","p1__29514#","hyperfiddle.electric.impl.array-fields/getswap","cljs.core/mod","arr29516","hyperfiddle.electric.impl.io/cache-get","hyperfiddle.electric.impl.io/cache->map","ac","cljs.core/transient","cljs.core.assoc_BANG_","cljs.core/persistent!","hyperfiddle.electric.impl.io/!ex-cache","hyperfiddle.electric.impl.io/save-original-ex!","fi","id","hyperfiddle.electric.debug/ex-id","temp__5808__auto__","cause","cljs.core/ex-cause","js/hyperfiddle.electric.FailureInfo","hyperfiddle.electric.impl.io/get-original-ex","hyperfiddle.electric.impl.io/*write-handlers*","hyperfiddle.electric.impl.io/failure-writer","err","js/missionary.Cancelled","js/hyperfiddle.electric.Pending","js/hyperfiddle.electric.Remote","hyperfiddle.electric.debug/serializable","cljs.core/ex-data","cljs.core/ex-message","hyperfiddle.electric.impl.io/write-opts","cljs.core.merge","js/hyperfiddle.electric.Failure","hyperfiddle.electric.impl.io/*read-handlers*","hyperfiddle.electric.impl.io/failure-reader","cognitect.transit/read-handler","p__29525","vec__29526","seq__29527","cljs.core/seq","first__29528","cljs.core/first","cljs.core/next","tag","args","G__29529","cljs.core/Keyword","js/Error","vec__29530","cljs.core.nth","message","data","hyperfiddle.electric.debug.ex_info_STAR_","vec__29533","or__5045__auto__","hyperfiddle.electric.impl.io/read-opts","hyperfiddle.electric.impl.io/set-ints","cljs.core.partial","cljs.core/reduce-kv","r","n","offset","G__29542","hyperfiddle.electric.impl.io/encode-numbers","xs","required","G__29544","js/ArrayBuffer","js/DataView","hyperfiddle.electric.impl.io/decode-numbers","b","cljs.core/vec","hyperfiddle.electric.impl.io/t_hyperfiddle$electric$impl$io29546","rf","l","G__29552","G__29553","!cache","cljs.core.atom","hyperfiddle.electric.impl.io/transit-writer","cljs.core.swap_BANG_","p__29557","map__29558","cljs.core/--destructure-map","cljs.core.get","write-handlers","writer","cljs.core.assoc","cognitect.transit.writer","hyperfiddle.electric.impl.io/encode","cognitect.transit/write","hyperfiddle.electric.impl.io/transit-reader","p__29563","map__29565","read-handlers","reader","cognitect.transit.reader","hyperfiddle.electric.impl.io/decode","s","cognitect.transit/read","hyperfiddle.electric.impl.io/decode-str","e29566","G__29568","js/console.debug","t","cljs.core.ex_info","hyperfiddle.electric.impl.io/chunk-size","hyperfiddle.electric.impl.io/message-reader","?read","cr29569-state","cr29569-place-4","missionary.core/unpark","cr29569-place-5","cr29569-place-6","cr29569-place-7","cr29569-block-9","cr29569-block-3","cr29569-exception","e29630","cr29569-place-22","cr29569-place-30","cr29569-place-31","cr29569-block-4","e29631","cr29569-place-0","cr29569-place-1","cljs.core/IVector","cr29569-place-2","cr29569-block-1","e29632","e29639","cr29569-place-8","cr29569-place-9","cr29569-place-10","cr29569-place-11","cr29569-place-12","cr29569-place-13","cr29569-place-14","e29641","cr29569-place-28","cr29569-place-35","cr29569-place-36","cr29569-block-10","e29644","cr29569-place-29","cr29569-block-6","missionary.core/park","e29651","cr29569-place-15","cr29569-place-16","cr29569-place-17","cr29569-place-18","cr29569-place-19","cr29569-place-20","cr29569-place-21","cr29569-place-23","cr29569-place-24","cr29569-place-25","cr29569-place-26","cr29569-place-27","cr29569-block-7","cr29569-block-5","e29652","cr29569-place-37","cr29569-place-38","cr29569-place-39","cr29569-place-40","cr29569-place-41","cr29569-place-42","e29661","cr29569-place-3","cr29569-block-2","e29667","cr29569-place-32","cr29569-place-33","cr29569-place-34","cr29569-block-8","e29668","cloroutine.impl/coroutine","G__29671","cr29569-block-0","missionary.core/sp-run","G__29637","fexpr__29636","G__29665","G__29666","fexpr__29664","cljs.core/conj!","G__29663","fexpr__29662","G__29650","fexpr__29649","G__29647","G__29648","fexpr__29646","G__29643","fexpr__29642","G__29654","fexpr__29653","G__29656","G__29657","G__29658","fexpr__29655","cljs.core/reduce","G__29660","fexpr__29659","G__29670","fexpr__29669","p1__29672#","hyperfiddle.electric.impl.io/message-writer","write","cr29673-state","cr29673-place-5","cr29673-place-10","cr29673-place-11","cr29673-place-12","cr29673-place-13","cr29673-place-14","cr29673-place-15","cr29673-place-16","cr29673-place-17","cr29673-place-18","cr29673-place-19","cr29673-place-20","cr29673-place-21","cr29673-place-22","cr29673-place-23","cr29673-place-24","cr29673-place-25","cr29673-place-26","cr29673-place-27","cr29673-block-3","cr29673-exception","e29772","cr29673-place-54","cr29673-block-14","e29783","cr29673-place-0","cr29673-place-1","cr29673-place-2","cr29673-place-3","cr29673-place-4","cr29673-block-1","e29784","cr29673-place-48","cr29673-place-62","cr29673-place-63","cr29673-place-64","cr29673-place-65","cr29673-place-66","cr29673-place-67","cr29673-place-68","cr29673-place-69","cr29673-place-70","cr29673-place-71","cr29673-block-12","e29789","cr29673-place-46","cr29673-place-47","cr29673-block-8","e29798","cr29673-place-49","cr29673-place-50","cr29673-place-51","cr29673-place-52","cr29673-place-53","cr29673-block-11","cr29673-block-9","e29801","cr29673-place-72","cr29673-place-73","cr29673-place-74","cr29673-place-75","cr29673-place-76","e29806","cr29673-place-44","cr29673-place-45","e29811","cr29673-place-28","cr29673-place-29","cr29673-place-30","cr29673-block-5","e29812","cr29673-block-4","cr29673-place-40","cr29673-place-41","cr29673-place-42","cr29673-place-43","cr29673-block-6","e29815","cr29673-place-9","e29818","cr29673-place-61","cr29673-block-13","e29819","cr29673-place-31","cr29673-place-32","cr29673-place-33","cr29673-place-34","cr29673-place-35","cr29673-place-36","cljs.core/IMap","cr29673-place-37","cr29673-place-38","cr29673-place-39","e29820","cr29673-place-6","cr29673-place-7","cr29673-place-8","cr29673-block-7","cr29673-block-2","e29825","cr29673-place-55","cr29673-place-56","cr29673-place-57","cr29673-place-58","cr29673-place-59","cr29673-place-60","cr29673-block-10","e29828","G__29834","cr29673-block-0","G__29788","fexpr__29787","G__29786","fexpr__29785","cljs.core/pop","G__29775","fexpr__29774","G__29777","fexpr__29776","G__29779","fexpr__29778","G__29781","G__29782","fexpr__29780","G__29817","fexpr__29816","G__29814","fexpr__29813","G__29822","G__29823","G__29824","fexpr__29821","cljs.core/ex-info","G__29800","fexpr__29799","cljs.core/peek","G__29803","fexpr__29802","G__29797","fexpr__29796","G__29795","fexpr__29794","G__29791","G__29792","G__29793","fexpr__29790","cljs.core/subvec","G__29809","G__29810","fexpr__29808","G__29833","fexpr__29832","G__29830","fexpr__29829","hyperfiddle.electric.impl.io/decoder","G__29836","cljs.core.conj","cljs.core.into","hyperfiddle.electric.impl.io/encoder","cljs.core.reduce","cljs.core.eduction","cljs.core.map","cljs.core.partition_all","G__29837","G__29838","G__29839","var_args","G__29841","hyperfiddle.electric.impl.io/foreach"],"sourcesContent":[";; Facilities for encoding/decoding of Electric protocol messages.\n;; * Data frames can be arbitrary clojure data or Electric failures. Serialization is done via transit json, the failure\n;; error is preserved if it's an instance of `hyperfiddle.electric.Pending` or `hyperfiddle.electric.Cancelled`, otherwise\n;; the error is logged and turned into an instance of `hyperfiddle.electric.Remote`.\n;; * Control frames are vectors of signed integers. Serialization is the concatenation of the binary representation of\n;; these numbers as fixed-length 32-bit, big endian.\n\n(ns ^:no-doc hyperfiddle.electric.impl.io\n  (:require [missionary.core :as m]\n            [cognitect.transit :as t]\n            #?(:clj [clojure.tools.logging :as log])\n            [hyperfiddle.electric.debug :as dbg]\n            [hyperfiddle.rcf :as rcf :refer [tests with tap %]]\n            #?(:cljs [com.cognitect.transit.types])\n            [hyperfiddle.electric.impl.array-fields :as a])\n  (:import (missionary Cancelled)\n           (hyperfiddle.electric Failure Pending Remote FailureInfo)\n           #?(:clj (java.nio ByteBuffer))\n           #?(:clj (java.io ByteArrayInputStream ByteArrayOutputStream))\n           #?(:clj (clojure.lang IReduceInit))))\n\n#?(:cljs (extend-type com.cognitect.transit.types/UUID IUUID)) ; https://github.com/hyperfiddle/hyperfiddle/issues/728\n\n(def default-write-handler ; Intercepts unserializable values, logs and return nil\n  (t/write-handler ; Adapted from `com.cognitect.transit.impl.WriteHandlers.NullWriteHandler`\n    (fn [x]\n      (def -last-unserializable-for-repl x)\n      (#?(:clj log/info, :cljs js/console.log) \"Unserializable reference transfer:\" (pr-str (type x)) (str x))\n      \"_\")\n    (fn [x] nil)\n    (fn [_] \"\")))\n\n(defn ->cache \"Builds a minimal, cljc map/bounded-queue cache.\n  One slot per key (map).\n  Reaching `size` pops oldest value (bounded-queue).\" [size]\n  (doto (object-array (inc (* size 2))) (a/set (* size 2) 0)))\n(defn cache-add [cache k v]\n  (when-not (loop [i 0]\n              (when (< i (dec (count cache)))\n                (if (= k (a/get cache i))\n                  (do (a/set cache (inc i) v) true)\n                  (recur (+ i 2)))))\n    (let [widx (a/getswap cache (dec (count cache)) #(mod (+ % 2) (dec (count cache))))]\n      (a/set cache widx k, (inc widx) v))))\n(defn cache-get [cache k]\n  (loop [i 0]\n    (when (< i (dec (count cache)))\n      (if (= k (a/get cache i))\n        (a/get cache (inc i))\n        (recur (+ i 2))))))\n(defn cache->map [cache]\n  (loop [i 0, ac (transient {})]\n    (if (< i (dec (count cache)))\n      (recur (+ i 2) (assoc! ac (a/get cache i) (a/get cache (inc i))))\n      (persistent! ac))))\n\n(tests \"keyed cache\"\n  (def !c (->cache 1))\n  (cache-add !c 1 2) (cache-get !c 1) := 2\n  (cache-add !c 1 3) (cache-get !c 1) := 3\n  (cache-add !c 2 4) (cache-get !c 2) := 4\n  (cache->map !c) := {2 4}\n\n  \"size 2\"\n  (def !c (->cache 2))\n  (cache-add !c 1 1)\n  (cache-add !c 2 2)\n  (cache-add !c 2 2)\n  (cache->map !c) := {1 1, 2 2})\n\n(def !ex-cache (->cache 16))\n(defn save-original-ex! [fi]\n  (let [id (dbg/ex-id fi)]\n    (when-some [cause (ex-cause fi)]\n      (when-not (instance? FailureInfo cause)\n        (cache-add !ex-cache id cause)))\n    id))\n(defn get-original-ex [id] (cache-get !ex-cache id))\n\n(def ^:dynamic *write-handlers* nil)\n\n(def failure-writer (t/write-handler\n                      (fn [_] \"failure\")\n                      (fn [x]\n                        (let [err (.-error ^Failure x)]\n                          (cond (instance? Cancelled err) [:cancelled]\n                                (instance? Pending err)   [:pending]\n                                (instance? Remote err)    [:remote (dbg/serializable (ex-data err))]\n                                :else                     [:exception (ex-message err) (dbg/serializable (ex-data err))\n                                                           (save-original-ex! err)])))))\n\n(defn write-opts []\n  {:handlers (merge *write-handlers*\n               {Failure failure-writer\n                :default default-write-handler}) ; cljs\n   :default-handler default-write-handler}) ; clj\n\n(def ^:dynamic *read-handlers* nil)\n\n(def failure-reader (t/read-handler\n                      (fn [[tag & args]]\n                        (case tag\n                          :exception (let [[message data id] args]\n                                       (Failure. (dbg/ex-info* message data id nil)))\n                          :remote    (let [[data] args]\n                                       (Failure. (dbg/ex-info* \"Remote error\" (or data {}))))\n                          :pending   (Failure. (Pending.))\n                          :cancelled (Failure. (Cancelled.))))))\n\n(defn read-opts [] {:handlers (merge *read-handlers* {\"failure\" failure-reader})})\n\n(def set-ints\n  (partial reduce-kv\n    (fn [r i n]\n      (let [offset (bit-shift-left i 2)]\n        #?(:clj  (.putInt ^ByteBuffer r offset n)\n           :cljs (doto r (.setInt32 offset n)))))))\n\n(defn encode-numbers\n  \"Encode a control frame to a binary segment.\"\n  [xs]\n  (let [required (bit-shift-left (count xs) 2)] ; size of bytebuffer is 4 \u00d7 (count xs), so shift by 2\n    #?(:clj (set-ints (ByteBuffer/allocate required) xs)\n       :cljs (doto (js/ArrayBuffer. required)\n               (-> (js/DataView.) (set-ints xs))))))\n\n(defn decode-numbers\n  \"Decode a control frame from a binary segment.\"\n  [b]\n  (vec\n    (reify\n      #?(:clj IReduceInit :cljs IReduce)\n      #?(:clj (reduce [_ rf r]\n                (let [l (.limit ^ByteBuffer b)]\n                  (loop [r r, i (int 0)]\n                    (if (< i l)\n                      (recur (rf r (.getInt ^ByteBuffer b i))\n                        (unchecked-add-int i 4)) r))))\n         :cljs (-reduce [_ rf r]\n                 (let [l (.-byteLength b)\n                       v (js/DataView. b)]\n                   (loop [r r, i 0]\n                     (if (< i l)\n                       (recur (rf r (.getInt32 v i))\n                         (+ i 4)) r))))))))\n\n\n;; #?(:cljs (def transit-writer (t/writer :json (write-opts))))\n#?(:cljs (let [!cache (atom {:write-handlers *write-handlers*, :writer nil})]\n           (defn transit-writer []\n             (:writer (swap! !cache (fn [{:keys [write-handlers writer] :as cache}]\n                                      (if (= write-handlers *write-handlers*)\n                                        (if writer\n                                          cache\n                                          (assoc cache :writer (t/writer :json (write-opts))))\n                                        {:write-handlers *write-handlers*\n                                         :writer         (t/writer :json (write-opts))})))))))\n\n(defn encode\n  \"Encode a data frame to transit json\"\n  [x]\n  #?(:clj (let [out (ByteArrayOutputStream.)]\n            (t/write (t/writer out :json (write-opts)) x)\n            (.toString out))\n     :cljs (t/write (transit-writer) x)))\n\n;; #?(:cljs (def transit-reader (t/reader :json (read-opts))))\n#?(:cljs (let [!cache (atom {:read-handlers *read-handlers*, :reader nil})]\n           (defn transit-reader []\n             (:reader (swap! !cache (fn [{:keys [read-handlers reader] :as cache}]\n                                      (if (= read-handlers *read-handlers*)\n                                        (if reader\n                                          cache\n                                          (assoc cache :reader (t/reader :json (read-opts))))\n                                        {:read-handlers *read-handlers*\n                                         :reader        (t/reader :json (read-opts))})))))))\n\n\n(defn decode\n  \"Decode a data frame from transit json\"\n  [^String s]\n  #?(:clj (t/read (t/reader (ByteArrayInputStream. (.getBytes s \"UTF-8\")) :json (read-opts)))\n     :cljs (t/read (transit-reader) s)))\n\n(defn decode-str [x]\n  (try (doto (decode x) (->> (#?(:clj log/trace, :cljs js/console.debug) \"\ud83d\udd3d\")))\n    (catch #?(:clj Throwable :cljs :default) t\n      (throw (ex-info \"Failed to decode\" {:value x} t)))))\n\n(tests \"FailureInfo\"\n  (def cause (ex-info \"boom\" {}))\n  (def ex (dbg/ex-info* \"x\" {} cause))\n  (def sent (-> ex Failure. encode decode .-error))\n  \"keeps the ID across the wire\"\n  (dbg/ex-id ex) := (dbg/ex-id sent)\n  \"can restore cause\"\n  (get-original-ex (dbg/ex-id sent)) := cause\n  nil)\n\n; Jetty rejects websocket payloads larger than 65536 bytes by default\n; We\u2019ll chop messages if needed\n(def chunk-size (bit-shift-right 65536 2))\n\n(defn ^:deprecated message-reader [?read]\n  \"Returns a discrete flow of read Electric messages from provided task, emitting individual frames.\"\n  (m/sp\n    (loop [data (transient [])]\n      (let [x (m/? ?read)]\n        (if (string? x)\n          (recur (conj! data (decode-str x)))\n          (persistent!\n            (conj! data\n              (loop [x       x\n                     control (transient [])]\n                (let [xs      (decode-numbers x)\n                      control (reduce conj! control xs)]\n                  (if (< (count xs) chunk-size) ; final frame\n                    (persistent! control)\n                    (recur (m/? ?read) control)))))))))))\n\n\n(defn ^:deprecated message-writer\n  \"Returns a function taking an Electric message and returning a task writing it as individual frames using provided\n   function. Might cut a message into chunks if its size would exceed the server payload limit.\n   An empty message (0b) is written to notify the end of frame.\"\n  [write]\n  #(m/sp\n     (loop [xs (seq (pop %))]\n       (if-some [[x & xs] xs]\n         (do (#?(:clj log/trace, :cljs js/console.debug) \"\ud83d\udd3c\" x)\n           (m/? (write\n                  (try (encode x)\n                    (catch #?(:clj Throwable :cljs :default) t\n                      (throw (ex-info \"Failed to encode\" {:value x} t))))))\n           (recur xs))\n         (loop [xs (peek %)]\n           (if (>= (count xs) chunk-size)\n             (do (m/? (write (encode-numbers (subvec xs 0 chunk-size))))\n               (recur (subvec xs chunk-size)))\n             (m/? (write (encode-numbers xs)))))))))\n\n(defn ^:deprecated decoder\n  \"A transducer partitioning a sequence of network messages into Electric events.\"\n  [rf]\n  (let [data (doto (object-array 2)\n               (aset 0 []) (aset 1 []))]\n    (fn\n      ([] (rf))\n      ([r]\n       (assert (= [] (aget data 0) (aget data 1)))\n       (rf r))\n      ([r x]\n       (if (string? x)\n         (do (assert (= [] (aget data 1)))\n             (aset data 0 (conj (aget data 0) (decode-str x))) r)\n         (let [xs (decode-numbers x)]\n           (aset data 1 (into (aget data 1) xs))\n           (if (< (count xs) chunk-size)                  ; final frame\n             (let [x (conj (aget data 0) (aget data 1))]\n               (aset data 0 [])\n               (aset data 1 [])\n               (rf r x)) r)))))))\n\n(defn ^:deprecated encoder\n  \"A transducer expanding Electric events to a sequence of network messages.\"\n  [rf]\n  (fn\n    ([] (rf))\n    ([r] (rf r))\n    ([r x]\n     (let [r (reduce rf r (eduction (map encode) (pop x)))\n           r (reduce rf r (eduction (partition-all chunk-size) (map encode-numbers) (peek x)))]\n       (case (mod (count (peek x)) chunk-size)\n         0 (rf r (encode-numbers [])) r)))))\n\n(defn foreach\n  ([r] r)\n  ([r x] (r x) r))\n"],"x_google_ignoreList":[0]}