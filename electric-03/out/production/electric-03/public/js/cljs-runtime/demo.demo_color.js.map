{"version":3,"sources":["demo/demo_color.cljc"],"mappings":";AAWA,+BAAA,/BAAKA;AACL,gCAAA,hCAAKC;AAEL,6BAAA,qCAAAC,lEAAMG;AAAN,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAmBG;QAAnB,AAAAF,4CAAAD,WAAA,IAAA,/DAAqBI;QAArB,AAAAH,4CAAAD,WAAA,IAAA,/DAAuBK;AAAvB,AAA2B,QAAA,sDAAA,mDAAA,mDAAA,zGAAWF,mDAAIC,mDAAIC;;AAG3C,6BAAA,7BAAMC,kEAAWC,OAAOC;AAAxB,AACE,IAAMC,MAAI,kBAAA,lBAAaF;AAAvB,AACE,YAAA,RAAOG;;AAAP,AACE,CAAM,AAAeD,kBAAK,CAACD,uCAAAA,8CAAAA,TAAOE,0BAAAA;;AAClC,AAAYD;;AACZ,iBAAA,jBAASA,WAAIC;;AACb,AAASD,WAAIC,MAAMZ;;AACnB,AAAYW;;AACZ,AAASA;;AACT,GAAM,SAAA,RAAGC;AAAT,AACE,eAAO,SAAA,RAAKA;;;;AADd;;;;;AAIN,sCAAA,tCAAMC,oFAAgBJ,OAAOK,IAAIJ;AAAjC,AACE,OAACF,2BAAMC,OAAO,WAAKG;AAAL,AAAY,OAACR,2BAAW,2DAAA,mFAAA,MAAA,MAAA,xJAAI,AAACW,6CAAEH,MAAME,mHAAmB,CAACJ,uCAAAA,8CAAAA,TAAOE,0BAAAA;;;AAEnF,wCAAA,xCAAMI,wFAAoBC;AAA1B,AAAsC,QAAA,QAAS,cAAA,bAAGA;;AAElD,AAWA","names":["demo.demo-color/CANVAS-WIDTH","demo.demo-color/CANVAS-HEIGHT","p__35753","vec__35754","cljs.core.nth","demo.demo-color/format-rgb","r","g","b","demo.demo-color/draw!","canvas","colorf","ctx","angle","demo.demo-color/draw-gradient!","hue","cljs.core._EQ_","demo.demo-color/saturation->chroma","saturation"],"sourcesContent":["(ns demo.demo-color\r\n  (:require [contrib.data :refer [assoc-vec]]\r\n            [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.history :as router]\r\n            [contrib.color :as c]))\r\n\r\n;; Goal is to demonstrate:\r\n;; - fine-grained reactivity on CSS properties\r\n;; - Non-trivial DOM api usage (canvas)\r\n\r\n(def CANVAS-WIDTH 360)                  ; px\r\n(def CANVAS-HEIGHT 100)                 ; px\r\n\r\n(defn format-rgb [[r g b]] (str \"rgb(\"r\",\"g\",\"b\")\"))\r\n\r\n#?(:cljs\r\n   (defn draw! [^js canvas colorf]\r\n     (let [ctx (.getContext canvas \"2d\")]\r\n       (loop [angle 0]\r\n         (set! (.-strokeStyle ctx) (colorf angle))\r\n         (.beginPath ctx)\r\n         (.moveTo ctx angle 0)\r\n         (.lineTo ctx angle CANVAS-HEIGHT)\r\n         (.closePath ctx)\r\n         (.stroke ctx)\r\n         (when (< angle 360)\r\n           (recur (inc angle)))))))\r\n\r\n#?(:cljs\r\n   (defn draw-gradient! [canvas hue colorf]\r\n     (draw! canvas (fn [angle] (format-rgb (if (= angle hue) [255 255 255] (colorf angle)))))))\r\n\r\n(defn saturation->chroma [saturation] (* 0.158 (/ saturation 100)))\r\n\r\n(e/defn Tile [color]\r\n  (dom/div (dom/props {:style {:display          :flex\r\n                               :align-items      :center\r\n                               :justify-content  :center\r\n                               :color            :white\r\n                               :background-color (format-rgb color)\r\n                               :width            \"100px\"\r\n                               :height           \"100%\"\r\n                               }})\r\n    (dom/text \"Contrast\")))\r\n\r\n(e/defn Color []\r\n  (e/client\r\n    (let [[self h s l] router/route\r\n          h (or h 180)\r\n          s (or s 80)\r\n          l (or l 70)\r\n          swap-route! router/swap-route!]\r\n      (dom/div (dom/props {:style {:display               :grid\r\n                                   :grid-template-columns \"auto 1fr auto\"\r\n                                   :gap                   \"0 1rem\"\r\n                                   :align-items           :center\r\n                                   :justify-items         :stretch\r\n                                   :max-width             \"600px\"}})\r\n        (dom/p (dom/text \"Lightness\"))\r\n        (dom/input (dom/props {:type  :range\r\n                               :min   0\r\n                               :max   100\r\n                               :step  1\r\n                               :value l})\r\n          (dom/on! \"input\" (fn [^js e] (swap-route! assoc-vec 3 (js/parseInt (.. e -target -value))))))\r\n        (dom/p (dom/text l \"%\"))\r\n\r\n        (dom/p (dom/text \"Saturation\"))\r\n        (dom/input (dom/props {:type  :range\r\n                               :min   0\r\n                               :max   100\r\n                               :step  1\r\n                               :value s})\r\n          (dom/on! \"input\" (fn [^js e] (swap-route! assoc-vec 2 (js/parseInt (.. e -target -value))))))\r\n        (dom/p (dom/text s \"%\"))\r\n\r\n\r\n        (dom/p (dom/text \"Hue\"))\r\n        (dom/input (dom/props {:type  :range\r\n                               :min   0\r\n                               :max   360\r\n                               :step  1\r\n                               :value h})\r\n          (dom/on! \"input\" (fn [^js e] (swap-route! assoc-vec 1 (js/parseInt (.. e -target -value))))))\r\n        (dom/p (dom/text h \"\u00b0\"))\r\n\r\n\r\n        (dom/p (dom/text \"HSL\"))\r\n        (dom/canvas (dom/props {:width  360\r\n                                :height 100})\r\n          (draw-gradient! dom/node h (fn [h] (c/hsl->rgb [h s l])))\r\n          )\r\n        (Tile. (c/hsl->rgb [h s l]))\r\n\r\n        (dom/p (dom/text \"OKLCH\"))\r\n        (dom/canvas (dom/props {:width  360\r\n                                :height 100})\r\n          (draw-gradient! dom/node h (fn [h] (c/oklch->rgb [l (saturation->chroma s) h]))))\r\n        (Tile. (c/oklch->rgb [l (saturation->chroma s) h]))\r\n\r\n        (dom/p (dom/text \"HSLuv\"))\r\n        (dom/canvas (dom/props {:width  360\r\n                                :height 100})\r\n          (draw-gradient! dom/node h (fn [h] (c/hsluv->rgb [h s l]))))\r\n        (Tile. (c/hsluv->rgb [h s l]))))))\r\n"]}