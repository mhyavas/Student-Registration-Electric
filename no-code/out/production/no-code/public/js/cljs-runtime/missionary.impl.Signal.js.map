{"version":3,"sources":["missionary/impl/Signal.cljs"],"mappings":";AAIA,AAAA;AAAA;AAAA;AAAA,AAEA,AAAA;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,4CAAA,WAAAA,vDAASU;;AAAT,AAAA,IAAAT,SAAA;AAAA,AAAA,IAAAC,WAAA,CAAA,AAAA,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAD;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,6CAAA,WAAAF,OAAAG,/DAASM;;AAAT,AAAA,IAAAT,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAI,iBAAAD;;;AAAA,CAAA,AAAA,qEAAA,rEAASM;;AAAT,AAAA,QAAA,JAEYQ;AAFZ,AAEe,2CAAA,pCAACC,0CAA0BC;;;AAF1C,CAAA,AAAA,uEAAA,vEAASV,kFAIEW;;AAJX,AAAA,gBAAA,ZAIWA;AAJX,AAIiB,QAACC,2DAAAA,sEAAAA,bAAID,kDAAAA;;;AAJtB,CAAA,sCAAA,tCAASX;AAAT,AAAA,AAAA;;;AAAA,CAAA,4CAAA,5CAASA;;AAAT,CAAA,+CAAA,/CAASA;;AAAT,CAAA,oDAAA,WAAAJ,mBAAAC,qBAAAC,vGAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;kCAAA,lCAASI,4EAAKC,KAAKC,QAAQC,MAAMC,KAAKC,OAAOC;AAA7C,AAAA,YAAAP,2BAAcE,KAAKC,QAAQC,MAAMC,KAAKC,OAAOC;;;AAApCP,AAMT,AAAA;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,4CAAA,WAAAV,vDAASyB;;AAAT,AAAA,IAAAxB,SAAA;AAAA,AAAA,IAAAsB,WAAA,CAAA,AAAA,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAtB;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,6CAAA,WAAAF,OAAAuB,/DAASC;;AAAT,AAAA,IAAAxB,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAI,iBAAAmB;;;AAAA,CAAA,AAAA,qEAAA,rEAASC;;AAAT,AAAA,YAAA,RAEYJ;AAFZ,AAEkB,QAACO,6DAAAA,oEAAAA,TAAMP,gDAAAA;;;AAFzB,CAAA,AAAA,uEAAA,vEAASI,kFAIEJ;;AAJX,AAAA,gBAAA,ZAIWA;AAJX,AAIiB,QAACQ,gEAAAA,2EAAAA,bAASR,uDAAAA;;;AAJ3B,CAAA,sCAAA,tCAASI;AAAT,AAAA,AAAA;;;AAAA,CAAA,4CAAA,5CAASA;;AAAT,CAAA,+CAAA,/CAASA;;AAAT,CAAA,oDAAA,WAAAnB,mBAAAC,qBAAAC,vGAASiB;AAAT,AAAA,OAAAhB,iBAAAF,qBAAA;;;AAAA;;;kCAAA,lCAASmB,4EAAKC;AAAd,AAAA,YAAAF,2BAAcE;;;AAALF,AAMT,6BAAA,7BAAMH,kEAAUK;AAAhB,AACE,GAAM,gBAAA,fAAM,AAAWA;AAAvB,AACE,CAAM,AAAWA,cACf,iBAAAG,WACC,gCAAA,hCAACG;AAAD,AACG,GAAI,CAAY,AAASN,cAAKA;AAC5B,oBAAA,ZAAM,AAASA;;AACf,AAAI,CAAM,AAASA,YAAKA;;AACpB,OAACO;;;IALXH,WAMC,gCAAA,hCAACE;AAAD,AACG,AAAI,YAAA,XAAM,AAAQN;;AACd,2CAAA,pCAACR,yCAAyBC;;IARlCY,eAAC,AAAQL;AAAT,AAAA,QAAAK,6CAAAA,2CAAAF,SAAAC,YAAAC,uBAAAF,SAAAC;;;AASF,GAAI,CAAY,AAASJ,cAAKA;AAC5B,AAAA;AACA,CAAM,AAASA,YAAKA;;;AAbxB;;AAcA,AAACQ;;AACD,kCAAA,lCAACC,wCAAwBhB;;AACzB,CAAM,AAASO,YAAK,aAAA,ZAAK,AAASA;;AAClC,OAACD,gCAAMC;;AAET,+BAAA,/BAAMC,sEAAYS;AAAlB,AACE,IAAAC,qBAAgB,AAAOD;AAAvB,AAAA,GAAA,CAAAC,sBAAA;AAAA;;AAAA,UAAAA,NAAYX;AAAZ,AACE,IAAMb,QAAM,AAASa;AAArB,AACE,GAAI,CAAA,QAAMb;AACR,IAAAwB,yBAAiB,AAAQX;AAAzB,AAAA,GAAA,CAAAW,0BAAA;AAAA;;AAAA,WAAAA,PAAY1B;AAAZ,AACE,YAAA,XAAM,AAAQe;;AACd,AAACY,iCAAiB,CAACC,4DAAAA,kEAAAA,RAAK5B,8CAAAA;;AACxB,IAAA6B,eAAC,AAAWd;AAAZ,AAAA,QAAAc,6CAAAA,+CAAAA;;;AACF,AAAI,WAAA,VAAM,AAAOJ;;AACb,CAAM,AAASV,YAAK,SAAA,RAAKb;;AACzB,GAAM,AAAC4B;AAAP,AACE,yCAAA,lCAACN,wCAAwBhB;;AAD3B;;;;;AAGZ,kCAAA,lCAAMS,4EAAeQ;AAArB,AACE,IAAAM,qBAAc,AAAON;AAArB,AAAA,GAAA,CAAAM,sBAAA;AAcE,AAAI,AAACR;;AACD,kCAAA,lCAACC,uCAAuBhB;;AACxB,MAAO,KAAA4B,qBAAA;;AAhBb,UAAAL,NAAUhB;AAAV,AACE,IAAMiB,IAAE,AAASjB;IACXiB,QAAE,EAAI,CAAYA,MAAEjB,MAChB,CAAM,AAASA,YACb,iBAAA,AAAK;AAAA,AACE,YAAA,AAAAmB,RAAMF,wBAAG,AAAWjB;AAApB,AACE,GAAI,CAAY,AAASA,cAAKA;AAC5BiB;;AAAE,AAAI,CAAM,AAASjB,YAAKA;;AACpB;;;;gBAJjB,QAAAkB,JAKqBE;AALrB,AAMO,cAAA,bAAM,AAAUpB;;AAAWoB;OAAKH;AATnD,AAUE,AAACT;;AACD,oBAAM,AAAQR;AAAd,AAAmB,kCAAA,lCAACS,uCAAuBhB;;AAA3C;;AACA,oBAAI,AAAUO;AAAK,MAAOiB;;AAAGA;;;;AAKnC,8BAAA,9BAAMJ,oEAAM5B;AAAZ,AACE,IAAMe,MAAI,qCAAA,KAAA,IAAA,MAAA,MAAA,1DAAChB,gCAAMC;AAAjB,AACE,QAAM,AAASe,YAAKA","names":["unused__13625__auto__","self__","G__43105","js/Error","args43101","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Signal/Pub","missionary.impl.Signal/->Pub","flow","process","alive","done","failed","value","_","missionary.impl.Propagator/dispatch","missionary.impl.Propagator/none","this","missionary.impl.Signal/sub","G__43113","args43110","missionary.impl.Signal/Sub","missionary.impl.Signal/->Sub","pub","missionary.impl.Signal/unsub","missionary.impl.Signal/transfer","G__43128","G__43129","fexpr__43127","missionary.impl.Propagator/bind","missionary.impl.Propagator/schedule","missionary.impl.Propagator/attach","missionary.impl.Propagator/detach","sub","temp__5808__auto__","missionary.impl.Propagator/reset","missionary.impl.Signal/make","fexpr__43140","missionary.impl.Propagator/attached","temp__5806__auto__","x","e43148","cljs.core/deref","e","js/missionary.Cancelled"],"sourcesContent":["(ns missionary.impl.Signal\n  (:import missionary.impl.Propagator\n           missionary.Cancelled))\n\n(declare sub unsub transfer make)\n\n(deftype Pub [flow process alive done failed value]\n  IFn\n  (-invoke [_] (Propagator/dispatch false Propagator/none))\n  IDeref\n  (-deref [this] (sub this)))\n\n(deftype Sub [pub]\n  IFn\n  (-invoke [this] (unsub this))\n  IDeref\n  (-deref [this] (transfer this)))\n\n(defn sub [^Pub pub]\n  (when (nil? (.-process pub))\n    (set! (.-process pub)\n      ((.-flow pub)\n       (Propagator/bind\n         #(if (identical? (.-value pub) pub)\n            (set! (.-value pub) nil)\n            (do (set! (.-value pub) pub)\n                (Propagator/schedule))))\n       (Propagator/bind\n         #(do (set! (.-done pub) true)\n              (Propagator/dispatch true Propagator/none)))))\n    (if (identical? (.-value pub) pub)\n      (do)                                                  ;; TODO\n      (set! (.-value pub) pub)))\n  (Propagator/attach)\n  (Propagator/detach false Propagator/none)\n  (set! (.-alive pub) (inc (.-alive pub)))\n  (->Sub pub))\n\n(defn unsub [^Sub sub]\n  (when-some [pub (.-pub sub)]\n    (let [alive (.-alive pub)]\n      (if (== 1 alive)\n        (when-some [flow (.-flow pub)]\n          (set! (.-flow pub) nil)\n          (Propagator/reset (make flow))\n          ((.-process pub)))\n        (do (set! (.-pub sub) nil)\n            (set! (.-alive pub) (dec alive))\n            (when (Propagator/attached)\n              (Propagator/detach false Propagator/none)))))))\n\n(defn transfer [^Sub sub]\n  (if-some [pub (.-pub sub)]\n    (let [x (.-value pub)\n          x (if (identical? x pub)\n              (set! (.-value pub)\n                (try (loop []\n                       (let [x @(.-process pub)]\n                         (if (identical? (.-value pub) pub)\n                           x (do (set! (.-value pub) pub)\n                                 (recur)))))\n                     (catch :default e\n                       (set! (.-failed pub) true) e))) x)]\n      (Propagator/attach)\n      (when (.-done pub) (Propagator/detach true Propagator/none))\n      (if (.-failed pub) (throw x) x))\n    (do (Propagator/attach)\n        (Propagator/detach true Propagator/none)\n        (throw (Cancelled. \"Signal subscription cancelled.\")))))\n\n(defn make [flow]\n  (let [pub (->Pub flow nil 0 false false nil)]\n    (set! (.-value pub) pub)))"]}