{"version":3,"sources":["contrib/ednish.cljc"],"mappings":";AAWA,uCAAA,2CAAA,IAAA,IAAA,KAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,/HAAKA;AAYL;;;;wBAAA,xBAAMC,wDAEHC;AAFH,AAGE,OAACC,+CAAO,aAAAC,FAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAQG;QAAR,AAAAF,4CAAAD,WAAA,IAAA,/DAAUI;AAAV,AACE,OAACC,uBAAuBH,EAAEC,EAAEC;GAC9BP,QACAF;;AAEV,wBAAA,xBAAMW,wDAAQC;AAAd,AACE,OAACT,+CAAO,aAAAU,FAAKN;AAAL,AAAA,IAAAO,aAAAD;QAAA,AAAAP,4CAAAQ,WAAA,IAAA,/DAAQN;QAAR,AAAAF,4CAAAQ,WAAA,IAAA,/DAAUL;AAAV,AAAc,OAACC,uBAAuBH,EAAEC,EAAEC;GAC1CG,WACA,AAACG,uBAAuBf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+DAG/BC,sBAAQoB;;;;;;;;;;;;;+DACRpB,sBAAQoB;;;;;;;;;;;;;+DACRpB,sBAAQoB;;;;;;;;;;;;;+DACRpB,sBAAQoB;;;;;;;;;;;;;yDACRpB,sBAAQoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AALX,AAAA,AAAAL,8CAAA;AAAA,AAAA,YAAAC,qCAAA;;;AAAA,GAAAC;AAAA,AAAA,AAAAC,oBAAA,AAAAC,+BAAA,kFAAA,AAAA,qIAAA,2CAAA,6DAAA,AAAA,iDAAA,sDAAA,AAAA,sBAAA,gDAAA,AAAA,6EAAA,mDAAA,AAAA,KAAA,oDAAA,AAAA,GAAA,yDAAA,AAAA,EAAA,qDAAA,AAAA,0GAAA,oDAAA,kBAAAJ,6CAAA,AAAA,AAAAA,2DAAA,eAAAA;;AAAA;AAQA,AAAKM,4BAAW,AAACC,6CAAKC,6BAA6BvB,sBAAOwB;AAC1D,AAAKC,4BAAW,AAACH,6CAAKI,wBAAwBhB,sBAAOiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mEAIlDN;;;;;;;;;;;;;+DACAI;;;;;;;;;;;;;yDAEAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AALH,AAAA,AAAAO,8CAAA;AAAA,AAAA,YAAAC,qCAAA;;;AAAA,GAAAZ;AAAA,AAAA,AAAAC,oBAAA,AAAAC,+BAAA,kFAAA,AAAA,mIAAA,2CAAA,6DAAA,AAAA,iDAAA,sDAAA,AAAA,sBAAA,gDAAA,AAAA,6EAAA,mDAAA,AAAA,KAAA,oDAAA,AAAA,GAAA,yDAAA,AAAA,EAAA,qDAAA,AAAA,uGAAA,oDAAA,kBAAAS,6CAAA,AAAA,AAAAA,2DAAA,eAAAA;;AAAA;AAmBA,uCAAA,vCAAME,sFAAuBC;AAA7B,AACE,GAAI,uCAAA,vCAACC,kCAA4BD;AAAU,yDAAA,lDAACE,6CAAKF;;AAAQA;;;AAE3D,6BAAA,7BAAMI,kEAAaJ,KAAKK;AAAxB,AAAA,GACU,OAASL;AADnB;AAAA,AAAA,MAAA,KAAAG,MAAA;;;AAAA,GACyB,GAAA,iBAAA,hBAAOE;AADhC;AAAA,AAAA,MAAA,KAAAF,MAAA;;;AAEG,GAAU,kDAAA,lDAACG,6CAAEN;AAAb;;AAAA,AACE,IAAMA,WAAK,AAACD,qCAAsBC;AAAlC,AACE,OAACN,0BAAWM","names":["contrib.ednish/-edn-dialect-mappings","contrib.ednish/encode","edn-str","cljs.core.reduce","p__47501","vec__47502","cljs.core.nth","a","k","v","clojure.string/replace","contrib.ednish/decode","ednish-str","p__47505","vec__47506","clojure.set/map-invert","contrib.ednish/generated__contrib_ednish_37","contrib.ednish/t_contrib$ednish47510","hyperfiddle.rcf/*enabled*","cljs.test/run-block","cljs.test/test-var-block*","cljs.core.pr_str","contrib.ednish/encode-uri","cljs.core.comp","contrib.rfc3986/encode-pchar","cljs.core/pr-str","contrib.ednish/decode-uri","clojure.edn/read-string","contrib.rfc3986/decode-pchar","contrib.ednish/generated__contrib_ednish_48","contrib.ednish/t_contrib$ednish47521","contrib.ednish/discard-leading-slash","path","clojure.string/starts-with?","cljs.core.subs","js/Error","contrib.ednish/decode-path","read-edn-str","cljs.core._EQ_"],"sourcesContent":["(ns contrib.ednish\n  (:require clojure.set\n            clojure.string\n            clojure.edn\n            contrib.rfc3986\n            [hyperfiddle.rcf :refer [tests]]))\n\n; https://tools.ietf.org/html/rfc2396#section-2.4.3\n;\n; unwise = \"{\" | \"}\" | \"|\" | \"\\\" | \"^\" | \"[\" | \"]\" | \"`\"\n\n(def -edn-dialect-mappings\n  {\\space \\,\n   \\\" \\'\n   \\# \\~\n   \\/ \\!\n   ;\\{ \\( \\} \\)\n   \\[ \\( \\] \\)\n   })\n\n; Paste this into chrome and it will display properly\n; https://ko.wikipedia.org/wiki/%EC%9C%84%ED%82%A4%EB%B0%B1%EA%B3%BC:%EB%8C%80%EB%AC%B8\n\n(defn encode \"Re-encode an edn-string to url-safe dialect of edn-ish. Vectors, sets and maps\ncoalesce into lists and are not disambiguated.\"\n  [edn-str]\n  (reduce (fn [a [k v]]\n            (clojure.string/replace a k v))\n          edn-str\n          -edn-dialect-mappings))\n\n(defn decode [ednish-str]\n  (reduce (fn [a [k v]] (clojure.string/replace a k v))\n          ednish-str\n          (clojure.set/map-invert -edn-dialect-mappings)))\n\n(tests\n  (encode (pr-str :hyperfiddle.blog/post)) := \":hyperfiddle.blog!post\"\n  (encode (pr-str :a!b)) := \":a!b\"\n  (encode (pr-str \"kobe\")) := \"'kobe'\"\n  (encode (pr-str #{\"events\" \"news\"})) := \"~{'news','events'}\"\n  (encode (pr-str #uuid \"07655f77-608d-472b-bc5e-86fcecc40b00\"))\n  := \"~uuid,'07655f77-608d-472b-bc5e-86fcecc40b00'\")\n\n(def encode-uri (comp contrib.rfc3986/encode-pchar encode pr-str))\n(def decode-uri (comp clojure.edn/read-string decode contrib.rfc3986/decode-pchar))\n\n(tests\n  \"url encoding\"\n  (encode-uri \"|\") := \"'%7C'\"\n  (decode-uri \"'%7C'\") := \"|\"\n\n  (encode-uri \"!$&'[]()*+,;=|\") := \"'!$&'()()*+,;=%7C'\"\n  ;(decode-uri \"'!$&'()()*+,;=%7C'\") := \"!$&'()()*+,;=|\" -- todo why broken?\n  )\n\n;(tests -- No reader function for tag uri -- this test passes in hf-2020\n;  \"ednish-tunneling\"\n;  (def v #uri \"datomic:free://datomic:4334/~dustin.getz\")\n;  (def encoded (encode-ednish (pr-str v)))\n;  (pr-str v) := _\n;  (encode-ednish (pr-str v)) := \"~uri,'datomic:free:!!datomic:4334!~dustin.getz'\"\n;  ;(is (= (decode-ednish encoded) (pr-str v)))\n;  ; \"#uri \\\"datomic:free://datomic:4334/#dustin.getz\\\"\"\n;  )\n\n(defn discard-leading-slash [path]\n  (if (clojure.string/starts-with? path \"/\") (subs path 1) path))\n\n(defn decode-path [path read-edn-str]\n   {:pre [(string? path) (some? read-edn-str)]}\n   (when-not (= path \"/\")\n     (let [path (discard-leading-slash path)]\n       (decode-uri path))))\n"],"x_google_ignoreList":[0]}