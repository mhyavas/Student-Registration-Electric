{"version":3,"sources":["contrib/rfc3986.cljc"],"mappings":";AAYA,8BAAA,kFAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,1MAAKA;AACL,AAAKC,8BAAY,2SAAA,iFAAA,SAAA,SAAA,SAAA,vZAACC,uDAAkB,AAACC,cAAI,4DAAA,5DAACC,4CAAIC,+CACV,AAACF,cAAI,4DAAA,5DAACC,4CAAIC;AAE9C,AAAKC,yBAAO,iKAAA,iFAAA,SAAA,3PAACJ,uDAAkBD,4BAAYD;AAE3C;;;;;+BAAA,/BAAMO,sEAIHC;AAJH,yDAMO,AAACJ,4CAAI,WAAKK,hHAIV,OAACE;AAJI,AACE,oBAAI,CAACL,uDAAAA,0DAAAA,LAAOG,sCAAAA;AACVA;;AACA,QAAA,IAAS,AAACC,+BAAcD;;GAJjCD;;AAOP,+BAAA,/BAAMI,sEAAcJ;AAApB,AACE,yDAAI,2BAAA,VAAOe,nEAOPZ;IAPAE,WACgBL;IADhBM,aAAAD;IAAAE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;QAAAE,JACQR;SADRM,LACYS;AADZ,AAAA,IAAOD,cAAAA;IAAPV,eAAAA;;AAAA,AAAA,IAAOU,cAAAA;IAAPH,aAAAP;IAAAQ,aAAA,AAAAL,cAAAI;IAAAE,eAAA,AAAAJ,gBAAAG;IAAAA,iBAAA,AAAAF,eAAAE;YAAAC,RACQb;aADRY,TACYG;AADZ,AAEE,GAAA,AAAAC,cAAQhB;AACNc;;AACA,GAAI,6CAAA,7CAACG,kDAAK,AAACC,wBAAUlB;AACnB,eAAO,AAACmB,6CAAKL,YAAQ,AAACM,+BAAc,AAAClB,kDAAY,6CAAA,7CAACmB,iDAAON;eAAO,6CAAA,7CAACO,iDAAOP;;;;;AACxE,eAAO,AAACI,6CAAKL,YAAQd;eAAGe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mEAKjCjB;;;;;;;;;;;;;+DAGAK;;;;;;;;;;;;;;;mEAIAL;;;;;;;;;;;;;+DACAK;;;;;;;;;;;;;;;6DAGCyB,6CAAKzB,6BAAaL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAbtB,AAAA,AAAAyB,gDAAA;AAAA,AAAA,YAAAC,uCAAA;;;AAAA,GAAAC;AAAA,AAAA,AAAAC,oBAAA,AAAAC,+BAAA,oFAAA,AAAA,wIAAA,2CAAA,6DAAA,AAAA,iDAAA,sDAAA,AAAA,uBAAA,gDAAA,AAAA,gFAAA,mDAAA,AAAA,KAAA,oDAAA,AAAA,GAAA,yDAAA,AAAA,EAAA,qDAAA,AAAA,4GAAA,oDAAA,kBAAAJ,+CAAA,AAAA,AAAAA,6DAAA,eAAAA;;AAAA","names":["contrib.rfc3986/-sub-delims","contrib.rfc3986/-unreserved","clojure.set.union","cljs.core/set","cljs.core.map","cljs.core/char","contrib.rfc3986/-pchar","contrib.rfc3986/encode-pchar","s","c","contrib.char$/char->hex-str","clojure.string.join","contrib.rfc3986/decode-pchar","G__47463","vec__47464","seq__47465","cljs.core/seq","first__47466","cljs.core/first","cljs.core/next","vec__47470","seq__47471","first__47472","decoded","ss","cljs.core/not","cljs.core._EQ_","contrib.char$/char-code","cljs.core.conj","contrib.char$/hex-str->char","cljs.core.take","cljs.core.drop","contrib.rfc3986/generated__contrib_rfc3986_41","contrib.rfc3986/t_contrib$rfc398647474","hyperfiddle.rcf/*enabled*","cljs.test/run-block","cljs.test/test-var-block*","cljs.core.comp"],"sourcesContent":["(ns contrib.rfc3986\n  (:require clojure.set\n            [clojure.string :as string]\n            [contrib.char$ :refer [char-code char->hex-str hex-str->char]]\n            [hyperfiddle.rcf :refer [tests]]))\n\n; https://tools.ietf.org/html/rfc3986#appendix-A\n;\n; pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n; unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n; sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n\n(def -sub-delims #{\\! \\$ \\& \\' \\( \\) \\* \\+ \\, \\; \\=})\n(def -unreserved (clojure.set/union (set (map char \"abcdefghijklmnopqrstuvwxyz\"))\n                                    (set (map char \"0123456789\"))\n                                    #{\\- \\. \\_ \\~}))\n(def -pchar (clojure.set/union -unreserved -sub-delims #{\\: \\@}))\n\n(defn encode-pchar\n  \"percent-encode a url path segment without over-encoding (which many platform url decoders do).\n  Notably, this impl is compatible with java.net.URI which fails on some chars in the 'unwise set',\n  which are probably safe today.\"\n  [s]\n  (->> s\n       (map (fn [c]\n              (if (-pchar c) ; whitelist\n                c\n                (str \"%\" (char->hex-str c)))))\n       (string/join)))\n\n(defn decode-pchar [s]\n  (-> (loop [decoded []\n             [c & ss] s]\n        (if-not c\n          decoded ; done\n          (if (= 37 (char-code c)) ; 37 is \\% written portably\n            (recur (conj decoded (hex-str->char (string/join (take 2 ss)))) (drop 2 ss))\n            (recur (conj decoded c) ss))))\n      string/join))\n\n(tests\n  \"pchar encoding and decoding\"\n  (encode-pchar \"google-oauth2|116635422485042503270\")\n  := \"google-oauth2%7C116635422485042503270\"\n\n  (decode-pchar \"google-oauth2%7C116635422485042503270\")\n  := \"google-oauth2|116635422485042503270\"\n\n  \"non-ascii characters\"\n  (encode-pchar \"!$&'[]()*+,;=|\") := \"!$&'%5B%5D()*+,;=%7C\"\n  (decode-pchar \"!$&'%5B%5D()*+,;=%7C\") := \"!$&'[]()*+,;=|\"\n\n  \"bijection\"\n  ((comp decode-pchar encode-pchar) \"google-oauth2|116635422485042503270\")\n  := \"google-oauth2|116635422485042503270\"\n\n  ;\"unicode\" ; broken, not sure why\n  ;(encode-rfc3986-pchar \"\uc704\ud0a4\ubc31\uacfc:\ub300\ubb38\") := \"%4%4%1%C:%0%8\"\n  ;(decode-rfc3986-pchar \"%4%4%1%C:%0%8\") := \"\uc704\ud0a4\ubc31\uacfc:\ub300\ubb38\"\n  ;((comp decode-rfc3986-pchar encode-rfc3986-pchar) \"\uc704\ud0a4\ubc31\uacfc:\ub300\ubb38\")\n  )\n"],"x_google_ignoreList":[0]}