{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$findDOMNode.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,sEAAA,CAA2F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAenI,IAAIC,kBAAoBH,OAAA,CAAQ,8EAAR,CAAxB,CACII,iBAAmBJ,OAAA,CAAQ,6EAAR,CADvB,CAEIK,WAAaL,OAAA,CAAQ,uEAAR,CAFjB,CAIIM,UAAYN,OAAA,CAAQ,wCAAR,CAJhB,CAKIO,QAAUP,OAAA,CAAQ,sCAAR,CA6BdC;MAAOC,CAAAA,OAAP,CArBAM,QAAoB,CAACC,kBAAD,CAAqB,CAErC,IAAIC,MAAQP,iBAAkBQ,CAAAA,OAChB,KAAd,GAAID,KAAJ,GAC0CH,OAAA,CAAQG,KAAME,CAAAA,wBAAd,CAAwC,8RAAxC,CAA4VF,KAAMG,CAAAA,OAAN,EAA5V,EAA+W,aAA/W,CACxC,CAAAH,KAAME,CAAAA,wBAAN,CAAiC,CAAA,CAFnC,CAKF,IAA0B,IAA1B,EAAIH,kBAAJ,CACE,MAAO,KAET;GAAoC,CAApC,GAAIA,kBAAmBK,CAAAA,QAAvB,CACE,MAAOL,mBAET,IAAIL,gBAAiBW,CAAAA,GAAjB,CAAqBN,kBAArB,CAAJ,CACE,MAAOJ,WAAWW,CAAAA,mBAAX,CAA+BP,kBAA/B,CAEsB,KAA/B,EAAEA,kBAAmBQ,CAAAA,MAArB,EAA4E,UAA5E,GAAuC,MAAOR,mBAAmBQ,CAAAA,MAAjE,CAAkIX,SAAA,CAAU,CAAA,CAAV,CAAiB,mDAAjB,CAAlI,CAA6NY,IAAAA,EAC5KZ,UAAA,CAAU,CAAA,CAAV,CAAiB,qEAAjB,CAAwFa,MAAOC,CAAAA,IAAP,CAAYX,kBAAZ,CAAxF,CAlBV,CA5B0F;",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/findDOMNode.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$findDOMNode\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule findDOMNode\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactMount = require('./ReactMount');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Returns the DOM node rendered by this element.\n *\n * @param {ReactComponent|DOMElement} componentOrElement\n * @return {?DOMElement} The root node of this element.\n */\nfunction findDOMNode(componentOrElement) {\n  if (process.env.NODE_ENV !== 'production') {\n    var owner = ReactCurrentOwner.current;\n    if (owner !== null) {\n      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;\n      owner._warnedAboutRefsInRender = true;\n    }\n  }\n  if (componentOrElement == null) {\n    return null;\n  }\n  if (componentOrElement.nodeType === 1) {\n    return componentOrElement;\n  }\n  if (ReactInstanceMap.has(componentOrElement)) {\n    return ReactMount.getNodeFromInstance(componentOrElement);\n  }\n  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;\n  !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;\n}\n\nmodule.exports = findDOMNode;\n};"],
"names":["shadow$provide","global","require","module","exports","ReactCurrentOwner","ReactInstanceMap","ReactMount","invariant","warning","findDOMNode","componentOrElement","owner","current","_warnedAboutRefsInRender","getName","nodeType","has","getNodeFromInstance","render","undefined","Object","keys"]
}
