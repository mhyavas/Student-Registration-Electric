{"version":3,"sources":["app/datomic_browser.cljc"],"mappings":";;;;AAoBA,AACA,AACA,AAEA,AAAKA,0CAAe,6CAAA,2CAAA,0DAAA,lJAACC;AAarB,uCAAA,vCAAMC,sFAAaC;AAAnB,AACE,qHAAA,mFAAA,jMAACC,mDAAMJ,wCAAeK,wKAAoBF;;AAC5C,AA6BA,AAgEA,AA0BA,AAgBA,AAcA,AA4BA,AAoBA,AAoBA,AAmBA,AAuBA,AAIA,AAIA,AAMA,AAsDA,AAAKG,mCAAa,wEAAA,2CAAA,4DAAA,2CAAA,AAAA,1NAACC,gDAAQC,mPAC6BC;AAKxD,AAiBA","names":["app.datomic-browser/!state-student","cljs.core.atom","app.datomic-browser/set-search!","name","cljs.core.swap_BANG_","cljs.core/assoc-in","app.datomic-browser/read-edn-str","cljs.core.partial","clojure.edn/read-string","app.datomic_browser.goog$module$goog$math$Long.fromString"],"sourcesContent":["(ns app.datomic-browser\r\n  \"must have datomic on classpath, and must load 'test ns\"\r\n  #?(:cljs (:import [goog.math Long])) ; only this require syntax passes shadow in this file, why?\r\n  (:require clojure.edn\r\n            contrib.ednish\r\n            app.create-data\r\n            app.create-course\r\n            [contrib.str :refer [any-matches?]]\r\n            [contrib.data :refer [unqualify treelister]]\r\n            [hyperfiddle.electric-ui4 :as ui4]\r\n            #?(:clj [contrib.datomic-contrib :as dx])\r\n            #?(:cljs contrib.datomic-cloud-contrib)\r\n            [contrib.datomic-m #?(:clj :as :cljs :as-alias) d]\r\n            [contrib.gridsheet :as gridsheet :refer [Explorer]]\r\n            [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.history :as history]\r\n            [missionary.core :as m]\r\n            #?(:clj [datomic.client.api :as dt])))\r\n\r\n(e/def conn)\r\n(e/def db)\r\n(e/def schema)\r\n\r\n(def !state-student (atom {:keyword \"\"}))\r\n\r\n#?(:clj (defn query-name [db dept]\r\n          (dt/q '[:find (pull ?e [*])\r\n                  :in $ ?dept\r\n                  :where [?e :student/name ?dept]]\r\n\r\n                db dept)))\r\n#?(:clj (defn query-dept [db dept]\r\n          (dt/q '[:find (pull ?e [*])\r\n                  :in $ ?id\r\n                  :where [?e :student/department ?id]] db dept)))\r\n\r\n(defn set-search! [name]\r\n  (swap! !state-student assoc-in [:keyword] name))\r\n(e/defn CourseSearch []\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n              (e/client\r\n                (dom/div\r\n                  (let [!filter-course (atom \"\"), filter-course (e/watch !filter-course)]\r\n                     (dom/span  (dom/text \"Course Search by Name:\"))\r\n                     (ui4/input filter-course (e/fn [v] (reset! !filter-course v)))\r\n                     (dom/table\r\n                       (dom/th (dom/text \"Name\"))\r\n                       (dom/th (dom/text \"Code\"))\r\n                       (dom/th (dom/text \"Department\"))\r\n                       (dom/th (dom/text \"Class\"))\r\n                       (dom/th (dom/text \"Instructor\"))\r\n                       (e/for [value (e/server (dt/q '[:find (pull ?e [*])\r\n                                                       :in $ ?name\r\n                                                       :where [?e :course/name ?name]] db filter-course))]\r\n                              (dom/tr\r\n                                (dom/td (dom/text (:course/name (first value))))\r\n                                (dom/td (dom/text (:course/code (first value))))\r\n                                (dom/td (dom/text (e/server (map (fn [m] (ffirst (dt/q '[:find ?name\r\n                                                                                         :in $ ?dept-id\r\n                                                                                         :where [?dept-id :department/name ?name]] db (:db/id m)))) (:course/department (first value))))))\r\n                                (dom/td (dom/text (:course/class (first value))))\r\n                                (dom/td (dom/text (e/server (dt/q '[:find ?name\r\n                                                                    :in $ ?instructor-id\r\n                                                                    :where [?insturctor-id :instructor/name ?name]] db (:db/id (first (:course/instructor (first value))))))))))))))))))\r\n\r\n(e/defn StudentSearch []\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n              (e/client\r\n                (dom/div\r\n                  (let [state (e/watch !state-student)]\r\n                    #_(dom/div\r\n                        (let [stage (:keyword state)]\r\n                          (dom/h1 (dom/text \"Student Search\"))\r\n                          (dom/span (dom/props {:style {:grid-area \"i\"}}) (dom/text \"Student Name\"))\r\n                          (ui4/input stage (e/fn [v] (set-search! v)))))\r\n                    (dom/div\r\n                      (let [!filter-dept (atom \"\"), filter-dept (e/watch !filter-dept)]\r\n                        (dom/span (dom/text \"Student Search by Name:\"))\r\n                        (ui4/input filter-dept (e/fn [v] (reset! !filter-dept v)))\r\n\r\n\r\n                        (dom/ul\r\n                          (dom/table\r\n                            (dom/th (dom/text \"Id\"))\r\n                            (dom/th (dom/text \"Name\"))\r\n                            (dom/th (dom/text \"Department\"))\r\n                            (e/for [entry (e/server (query-name db filter-dept))]\r\n                                   (let [value entry]\r\n\r\n                                     #_(dom/li (dom/text (:student/id value) \", \" (:student/name value) \",\" (:student/department value)))\r\n                                     (dom/tr (dom/props {:style {:border-style :solid :border-collapse :collapse}})\r\n\r\n                                             (dom/td (dom/text (:student/id (first value))))\r\n                                             (dom/td (dom/text (:student/name (first value))))\r\n                                             (dom/td (dom/text (ffirst (e/server (dt/q '[:find ?name\r\n                                                                                         :in $ ?dept-id\r\n                                                                                         :where [?dept-id :department/name ?name]] db (:db/id (:student/department (first value)))))))))))))))\r\n                    (dom/div\r\n                      (let [!filter-dept (atom \"\"), filter-dept (e/watch !filter-dept)]\r\n                        (dom/span (dom/text \"Student Search by Department:\"))\r\n                        (ui4/input filter-dept (e/fn [v] (reset! !filter-dept v)))\r\n\r\n                        #_(dom/text (e/server (dt/q '[:find (pull ?e [*])\r\n                                                      :in $ ?id\r\n                                                      :where [?e :student/department ?id]] db (ffirst (dt/q '[:find ?dept-id\r\n                                                                                                              :in $ ?name\r\n                                                                                                              :where [?dept-id :department/name ?name]] db \"Fizik\")))))\r\n\r\n\r\n                        (dom/ul\r\n                          (dom/table\r\n                            (dom/th (dom/text \"Id\"))\r\n                            (dom/th (dom/text \"Name\"))\r\n                            (dom/th (dom/text \"Department\"))\r\n                            (e/for [entry (e/server (query-dept db (ffirst (dt/q '[:find ?dept-id\r\n                                                                                   :in $ ?name\r\n                                                                                   :where [?dept-id :department/name ?name]] db (clojure.string/capitalize filter-dept)))))]\r\n                                   (let [value entry]\r\n\r\n                                     #_(dom/li (dom/text (:student/id value) \", \" (:student/name value) \",\" (:student/department value)))\r\n                                     (dom/tr (dom/props {:style {:border-style :solid :border-collapse :collapse}})\r\n\r\n                                             (dom/td (dom/text (:student/id (first value))))\r\n                                             (dom/td (dom/text (:student/name (first value))))\r\n                                             (dom/td (dom/text (ffirst (e/server (dt/q '[:find ?name\r\n                                                                                         :in $ ?dept-id\r\n                                                                                         :where [?dept-id :department/name ?name]] db (:db/id (:student/department (first value))))))))))))))))))))))\r\n(e/defn Attributes []\r\n  (e/client (dom/h1 (dom/text \"Attributes\")))\r\n  (let [cols [:db/ident :db/valueType :db/cardinality :db/unique :db/isComponent\r\n              #_#_#_#_:db/fulltext :db/tupleType :db/tupleTypes :db/tupleAttrs]]\r\n    (Explorer.\r\n      (treelister (->> (dx/attributes> db cols)\r\n                    (m/reductions conj [])\r\n                    (m/relieve {})\r\n                    new\r\n                    (sort-by :db/ident)) ; sort by db/ident which isn't available\r\n        (fn [_]) any-matches?)\r\n      {::gridsheet/page-size 15\r\n       ::gridsheet/row-height 24\r\n       ::gridsheet/columns cols\r\n       ::gridsheet/grid-template-columns \"auto 6em 4em 4em 4em\"\r\n       ::gridsheet/Format\r\n       (e/fn [row col]\r\n         (e/client\r\n           (let [v (col row)]\r\n             (case col\r\n               :db/ident (history/link [::attribute v] (dom/text v))\r\n               :db/valueType (some-> v :db/ident name dom/text)\r\n               :db/cardinality (some-> v :db/ident name dom/text)\r\n               :db/unique (some-> v :db/ident name dom/text)\r\n               (dom/text (str v))))))})))\r\n\r\n(e/defn Format-entity [[k v :as row] col]\r\n  (assert (some? schema))\r\n  (case col\r\n    ::k (cond\r\n          (= :db/id k) (e/client (dom/text k)) ; :db/id is our schema extension, can't nav to it\r\n          (contains? schema k) (e/client (history/link [::attribute k] (dom/text k)))\r\n          () (e/client (dom/text (str k)))) ; str is needed for Long db/id, why?\r\n    ::v (if-not (coll? v) ; don't render card :many intermediate row\r\n          (let [[valueType cardinality]\r\n                ((juxt (comp unqualify dx/identify :db/valueType)\r\n                   (comp unqualify dx/identify :db/cardinality)) (k schema))]\r\n            (cond\r\n              (= :db/id k) (e/client (history/link [::entity v] (dom/text v)))\r\n              (= :ref valueType) (e/client (history/link [::entity v] (dom/text v)))\r\n              () (e/client (dom/text (pr-str v))))))))\r\n\r\n(e/defn EntityDetail [e]\r\n  (assert e)\r\n  (e/client (dom/h1 (dom/text \"Entity detail: \" e))) ; treeview on the entity\r\n  (Explorer.\r\n    ;; TODO inject sort\r\n    (treelister (new (e/task->cp (d/pull db {:eid e :selector ['*] :compare compare})))\r\n      (partial dx/entity-tree-entry-children schema)\r\n      any-matches?)\r\n    {::gridsheet/page-size 15\r\n     ::gridsheet/row-height 24\r\n     ::gridsheet/columns [::k ::v]\r\n     ::gridsheet/grid-template-columns \"15em auto\"\r\n     ::gridsheet/Format Format-entity}))\r\n\r\n(e/defn EntityHistory [e]\r\n  (assert e)\r\n  (e/client (dom/h1 (dom/text \"Entity history: \" (pr-str e))))\r\n  (Explorer.\r\n    ; accumulate what we've seen so far, for pagination. Gets a running count. Bad?\r\n    (treelister (new (->> (dx/entity-history-datoms> db e)\r\n                       (m/reductions conj []) ; track a running count as well?\r\n                       (m/relieve {})))\r\n      (fn [_]) any-matches?)\r\n    {::gridsheet/page-size 20\r\n     ::gridsheet/row-height 24\r\n     ::gridsheet/columns [::e ::a ::op ::v ::tx-instant ::tx]\r\n     ::gridsheet/grid-template-columns \"10em 10em 3em auto auto 9em\"\r\n     ::gridsheet/Format\r\n     (e/fn [[e aa v tx op :as row] a]\r\n       (when row ; when this view unmounts, somehow this fires as nil\r\n         (case a\r\n           ::op (e/client (dom/text (name (case op true :db/add false :db/retract))))\r\n           ::e (e/client (history/link [::entity e] (dom/text e)))\r\n           ::a (if (some? aa)\r\n                 (let [ident (:db/ident (new (e/task->cp (d/pull db {:eid aa :selector [:db/ident]}))))]\r\n                   (e/client (dom/text (pr-str ident)))))\r\n           ::v (e/client (some-> v pr-str dom/text))\r\n           ::tx (e/client (history/link [::tx tx] (dom/text tx)))\r\n           ::tx-instant (let [x (:db/txInstant (new (e/task->cp (d/pull db {:eid tx :selector [:db/txInstant]}))))]\r\n                          (e/client (pr-str (dom/text x))))\r\n           (str v))))}))\r\n\r\n(e/defn AttributeDetail [a]\r\n  (e/client (dom/h1 (dom/text \"Attribute detail: \" a)))\r\n  (Explorer.\r\n    (treelister (new (->> (d/datoms> db {:index :aevt, :components [a]})\r\n                       (m/reductions conj [])\r\n                       (m/relieve {})))\r\n      (fn [_]) any-matches?)\r\n    {::gridsheet/page-size 20\r\n     ::gridsheet/row-height 24\r\n     ::gridsheet/columns [:e :a :v :tx]\r\n     ::gridsheet/grid-template-columns \"15em 15em calc(100% - 15em - 15em - 9em) 9em\"\r\n     ::gridsheet/Format\r\n     (e/fn [[e _ v tx op :as x] k]\r\n       (e/client\r\n         (case k\r\n           :e (history/link [::entity e] (dom/text e))\r\n           :a (dom/text (pr-str a)) #_(let [aa (new (e/task->cp (dx/ident! db aa)))] aa)\r\n           :v (some-> v str dom/text) ; todo when a is ref, render link\r\n           :tx (history/link [::tx tx] (dom/text tx)))))}))\r\n\r\n(e/defn TxDetail [e]\r\n  (e/client (dom/h1 (dom/text \"Tx detail: \" e)))\r\n  (Explorer.\r\n    (treelister (new (->> (d/tx-range> conn {:start e, :end (inc e)}) ; global\r\n                       (m/eduction (map :data) cat)\r\n                       (m/reductions conj [])\r\n                       (m/relieve {})))\r\n      (fn [_]) any-matches?)\r\n    {::gridsheet/page-size 20\r\n     ::gridsheet/row-height 24\r\n     ::gridsheet/columns [:e :a :v :tx]\r\n     ::gridsheet/grid-template-columns \"15em 15em calc(100% - 15em - 15em - 9em) 9em\"\r\n     ::gridsheet/Format\r\n     (e/fn [[e aa v tx op :as x] a]\r\n       (case a\r\n         :e (let [e (new (e/task->cp (dx/ident! db e)))] (e/client (history/link [::entity e] (dom/text e))))\r\n         :a (let [aa (new (e/task->cp (dx/ident! db aa)))] (e/client (history/link [::attribute aa] (dom/text aa))))\r\n         :v (pr-str v) ; when a is ref, render link\r\n         (str tx)))}))\r\n\r\n(e/defn StudentList []\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n              (e/client\r\n                (dom/text \"Student List\")\r\n\r\n                (dom/div\r\n                  (dom/table\r\n                    (dom/th (dom/text \"Name\"))\r\n                    (dom/th (dom/text \"Department\"))\r\n                    (e/for [value (e/server (dt/q '[:find (pull ?e [*])\r\n                                                    :where [?e :student/id _]] db))]\r\n                           (dom/tr\r\n                             #_(history/link [::attribute v] (dom/text v))\r\n                             (dom/td (history/link [::student (:student/name (first value))] (dom/text (:student/name (first value)))))\r\n                             (dom/td (dom/text (ffirst (e/server (dt/q '[:find ?name\r\n                                                                         :in $ ?dept-id\r\n                                                                         :where [?dept-id :department/name ?name]] db (:db/id (:student/department (first value)))))))))))))))))\r\n(e/defn StudentInfo [name]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n              (e/client\r\n                (dom/h2 (dom/text \"Student Info - \" name))\r\n                (dom/div\r\n                  (dom/table\r\n                    (dom/th (dom/text \"Name\"))\r\n                    (dom/th (dom/text \"Department\"))\r\n                    (dom/th (dom/text \"Courses\"))\r\n                    (let [value (e/server (ffirst (dt/q '[:find (pull ?e [*])\r\n                                                          :in $ ?student-name\r\n                                                          :where [?e :student/name ?student-name]] db name)))]\r\n                      (dom/tr\r\n                        (dom/td (dom/text name))\r\n                        (dom/td (dom/text (ffirst (e/server (dt/q '[:find ?name\r\n                                                                    :in $ ?dept-id\r\n                                                                    :where [?dept-id :department/name ?name]] db (:db/id (:student/department value)))))))\r\n                        (dom/td (dom/text (e/server (map (fn [m] (flatten (dt/q '[:find ?name\r\n                                                                                  :in $ ?course-id\r\n                                                                                  :where [?course-id :course/name ?name]] db (:db/id m)))) (:student/course value))))))))))))))\r\n\r\n(e/defn CourseList []\r\n        (e/client\r\n          (dom/text \"Course List\")))\r\n\r\n(e/defn InstructorList []\r\n        (e/client\r\n          (dom/text \"Insturctor List\")))\r\n\r\n(e/defn Test []\r\n        (e/client (dom/h1 (dom/text \"TEST\"))))\r\n\r\n\r\n\r\n\r\n(e/defn Page [[page x]]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n              (e/client\r\n                (dom/h1 (dom/text \"Student Registration App\"))\r\n                (dom/div\r\n                  (dom/h2 (dom/text \"Statistics\"))\r\n                  (dom/span (dom/text \"Number of Students:\"))\r\n                  (history/link [::student-list] (dom/text (ffirst (e/server (dt/q '[:find (count ?e)\r\n                                                                                     :where [?e :student/id _]] db))))))\r\n                (dom/div\r\n                  (dom/span (dom/text \"Number of Courses:\"))\r\n                  (history/link [::course-list] (dom/text (ffirst (e/server (dt/q '[:find (count ?e)\r\n                                                                                    :where [?e :course/id _]] db))))))\r\n                (dom/div\r\n                  (dom/span (dom/text \"Number of Instructors:\"))\r\n                  (history/link [::instructor-list] (dom/text (ffirst (e/server (dt/q '[:find (count ?e)\r\n                                                                                        :where [?e :instructor/id _]] db))))))\r\n                (dom/div\r\n                  (history/link [::course-search] (dom/text \"Course Search\")) (dom/text \" \")\r\n                  (history/link [::student-search] (dom/text \"Student Search\")) (dom/text \" \")\r\n                  (history/link [::student-list] (dom/text \"Student List\")) (dom/text \" \")\r\n                  (history/link [::create-page] (dom/text \"Create Student\")) (dom/text \" \")\r\n                  (history/link [::create-course] (dom/text \"Create Course\") (dom/text \" \")))))))\r\n\r\n  (dom/link (dom/props {:rel :stylesheet, :href \"gridsheet-optional.css\"}))\r\n  (dom/div (dom/props {:class \"user-gridsheet-demo\"})\r\n    #_(dom/div (dom/text \"Nav: \")\r\n               (history/link [::summary] (dom/text \"home\")) (dom/text \" \")\r\n               (history/link [::test] (dom/text \"test\")) (dom/text \" \")\r\n               (history/link [::course-search] (dom/text \"Course Search\")) (dom/text \" \")\r\n               (history/link [::student-search] (dom/text \"Student Search\")) (dom/text \" \")\r\n               (history/link [::student-list] (dom/text \"Student List\")) (dom/text \" \"))\r\n\r\n\r\n    (case page\r\n      ::summary (history/router 1 (e/server (Attributes.)))\r\n      ::attribute (history/router 2 (e/server (AttributeDetail. x)))\r\n      ::student (history/router 2 (e/server (StudentInfo. x)))\r\n      ::tx (history/router 2 (e/server (TxDetail. x)))\r\n      ::entity (do (history/router 2\r\n                     (history/router ::entity-detail (e/server (EntityDetail. x)))\r\n                     (history/router ::entity-history (e/server (EntityHistory. x)))))\r\n      ::test (history/router 1 (e/server (Test.)))\r\n      ::course-search (history/router 1 (e/server (CourseSearch.)))\r\n      ::student-search (history/router 1 (e/server (StudentSearch.)))\r\n      ::student-list (history/router 1 (e/server (StudentList.)))\r\n      ::course-list (history/router 1 (e/server (CourseList.)))\r\n      ::instructor-list (history/router 1 (e/server (InstructorList.)))\r\n      ::create-page (history/router 1 (e/server (app.create-data/CreateData.)))\r\n      ::create-course (history/router 1 (e/server (app.create-course/CreateData.)))\r\n      (e/client (dom/text \"no matching route: \" (pr-str page))))))\r\n\r\n(def read-edn-str (partial clojure.edn/read-string\r\n                    {:readers #?(:cljs {'goog.math/Long goog.math.Long/fromString} ; datomic cloud long ids\r\n                                 :clj {})}))\r\n\r\n\r\n\r\n(e/defn DatomicBrowser []\r\n        (e/client\r\n          (binding [dom/node js/document.body\r\n                    history/encode contrib.ednish/encode-uri\r\n                    history/decode #(or (contrib.ednish/decode-path % read-edn-str) [::summary])]\r\n\r\n            (history/router (history/HTML5-History.)\r\n                            (dom/pre (dom/text (contrib.str/pprint-str history/route)))\r\n                            (e/server\r\n                              (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n                                (binding [db (datomic.client.api/db conn)]\r\n                                  (e/client (Page. history/route)))))))))\r\n\r\n\r\n\r\n\r\n\r\n(comment\r\n\r\n\r\n  ;end\r\n  ,)"]}