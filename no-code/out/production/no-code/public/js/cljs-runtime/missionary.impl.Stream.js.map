{"version":3,"sources":["missionary/impl/Stream.cljs"],"mappings":"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","names":["unused__13625__auto__","self__","G__43106","js/Error","args43102","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Stream/Pub","missionary.impl.Stream/->Pub","flow","process","ready","failed","done","value","attached","pending","step","this","missionary.impl.Stream/run","missionary.impl.Stream/sub","G__43112","args43109","missionary.impl.Stream/Sub","missionary.impl.Stream/->Sub","pub","missionary.impl.Stream/unsub","missionary.impl.Stream/transfer","missionary.impl.Stream/emit","missionary.impl.Propagator/step","missionary.impl.Propagator/dispatch","missionary.impl.Propagator/none","G__43138","G__43139","fexpr__43137","missionary.impl.Propagator/bind","missionary.impl.Propagator/schedule","missionary.impl.Propagator/attach","missionary.impl.Propagator/detach","sub","temp__5808__auto__","missionary.impl.Propagator/reset","missionary.impl.Stream/make","fexpr__43150","missionary.impl.Propagator/attached","temp__5806__auto__","x","cljs.core/deref","e43159","e","js/missionary.Cancelled"],"sourcesContent":["(ns missionary.impl.Stream\n  (:import missionary.impl.Propagator\n           missionary.Cancelled))\n\n(declare run sub unsub transfer make)\n\n(deftype Pub [flow process ^boolean ready ^boolean failed ^boolean done value ^number attached ^number pending ^number step]\n  IFn\n  (-invoke [this] (run this))\n  IDeref\n  (-deref [this] (sub this)))\n\n(deftype Sub [pub]\n  IFn\n  (-invoke [this] (unsub this))\n  IDeref\n  (-deref [this] (transfer this)))\n\n(defn emit [^Pub pub]\n  (set! (.-pending pub) (.-attached pub))\n  (set! (.-attached pub) 0)\n  (set! (.-value pub) pub)\n  (set! (.-ready pub) false)\n  (set! (.-step pub) (Propagator/step))\n  (Propagator/dispatch false Propagator/none))\n\n(defn run [^Pub pub]\n  (set! (.-ready pub) true)\n  (when (zero? (.-pending pub))\n    (emit pub)))\n\n(defn sub [^Pub pub]\n  (when (nil? (.-process pub))\n    (set! (.-process pub)\n      ((.-flow pub)\n       (Propagator/bind\n         #(if (nil? (.-process pub))\n            (emit pub) (Propagator/schedule)))\n       (Propagator/bind\n         #(do (set! (.-done pub) true)\n              (set! (.-attached pub) 0)\n              (Propagator/dispatch true Propagator/none))))))\n  (Propagator/attach)\n  (if (== (.-step pub) (Propagator/step))\n    (do (set! (.-pending pub) (inc (.-pending pub)))\n        (Propagator/detach false Propagator/none))\n    (set! (.-attached pub) (inc (.-attached pub))))\n  (->Sub pub))\n\n(defn unsub [^Sub sub]\n  (when-some [pub (.-pub sub)]\n    (when-not (.-done pub)\n      (let [attached (.-attached pub)\n            pending (.-pending pub)]\n        (if (== 1 (+ attached pending))\n          (when-some [flow (.-flow pub)]\n            (set! (.-flow pub) nil)\n            (Propagator/reset (make flow))\n            ((.-process pub)))\n          (do (set! (.-pub sub) nil)\n              (if (Propagator/attached)\n                (do (set! (.-attached pub) (dec attached))\n                    (Propagator/detach false Propagator/none))\n                (do (set! (.-pending pub) (dec pending))\n                    (when (== 1 pending) (when (.-ready pub) (emit pub)))))))))))\n\n(defn transfer [^Sub sub]\n  (if-some [pub (.-pub sub)]\n    (let [x (.-value pub)\n          x (if (identical? x pub)\n              (set! (.-value pub)\n                (try @(.-process pub)\n                     (catch :default e\n                       (set! (.-failed pub) true)\n                       e))) x)]\n      (Propagator/attach)\n      (if (.-done pub)\n        (Propagator/detach true Propagator/none)\n        (do (set! (.-attached pub) (inc (.-attached pub)))\n            (when (zero? (set! (.-pending pub) (dec (.-pending pub))))\n              (when (.-ready pub) (emit pub)))))\n      (if (.-failed pub) (throw x) x))\n    (do (Propagator/attach)\n        (Propagator/detach true Propagator/none)\n        (throw (Cancelled. \"Stream subscription cancelled.\")))))\n\n(defn make [flow]\n  (->Pub flow nil false false false nil 0 0 -1))"]}