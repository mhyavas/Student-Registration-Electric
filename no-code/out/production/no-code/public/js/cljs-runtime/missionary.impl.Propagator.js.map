{"version":3,"sources":["missionary/impl/Propagator.cljs"],"mappings":"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","names":["unused__13625__auto__","self__","G__43034","js/Error","args43033","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Propagator/Subscription","missionary.impl.Propagator/->Subscription","lcb","rcb","pub","sub","flag","value","state","prev","next","this","ctx","missionary.impl.Propagator/context","ps","held","missionary.impl.Propagator/enter","busy","node","edge","fexpr__43036","missionary.impl.Propagator/exit","cljs.core/deref","G__43047","args43044","missionary.impl.Propagator/Publisher","missionary.impl.Propagator/->Publisher","ranks","children","current","prop","child","sibling","s","that","G__43052","G__43053","missionary.impl.Propagator/lt","missionary.impl.Propagator/Process","missionary.impl.Propagator/->Process","parent","subs","missionary.impl.Propagator/Context","missionary.impl.Propagator/->Context","step","emitter","reacted","delayed","missionary.impl.Propagator/children","x","y","xl","yl","ml","x__5133__auto__","y__5134__auto__","i","xi","yi","missionary.impl.Propagator/link","missionary.impl.Propagator/dequeue","head","heap","missionary.impl.Propagator/enqueue","r","p","missionary.impl.Propagator/flip","missionary.impl.Propagator/callback","cb","n","missionary.impl.Propagator/none","missionary.impl.Propagator/tick","fexpr__43079","temp__5806__auto__","temp__5808__auto__","missionary.impl.Propagator/step","missionary.impl.Propagator/reset","missionary.impl.Propagator/attached","missionary.impl.Propagator/detach","missionary.impl.Propagator/dispatch","missionary.impl.Propagator/schedule","fexpr__43090","missionary.impl.Propagator/attach","missionary.impl.Propagator/bind","f","missionary.impl.Propagator/publisher","a","js/Array","n__5636__auto__","G__43097","G__43098","G__43095","G__43096"],"sourcesContent":["(ns missionary.impl.Propagator)\n\n(declare context enter exit lt none)\n\n(deftype Subscription [lcb rcb pub sub ^boolean flag value state prev next]\n  IFn\n  (-invoke [this]\n    (let [ctx context\n          ps (.-pub this)\n          pub (.-parent ps)\n          held (enter pub)\n          busy (.-busy ctx)\n          node (.-node ctx)\n          edge (.-edge ctx)]\n      (set! (.-busy ctx) true)\n      (set! (.-node ctx) ps)\n      (set! (.-edge ctx) this)\n      ((.-state this)) (exit pub ctx held busy node edge)))\n  IDeref\n  (-deref [this]\n    (let [ctx context\n          ps (.-pub this)\n          pub (.-parent ps)\n          held (enter pub)\n          busy (.-busy ctx)\n          node (.-node ctx)\n          edge (.-edge ctx)]\n      (set! (.-busy ctx) true)\n      (set! (.-node ctx) ps)\n      (set! (.-edge ctx) this)\n      (try @(.-state this)\n           (finally (exit pub ctx held busy node edge))))))\n\n(deftype Publisher [ranks held children current prop child sibling]\n  IFn\n  (-invoke [this lcb rcb]\n    (let [ctx context\n          held (enter this)\n          busy (.-busy ctx)\n          node (.-node ctx)\n          edge (.-edge ctx)\n          ps (.-current this)\n          s (->Subscription lcb rcb ps node false nil nil nil nil)]\n      (set! (.-busy ctx) true)\n      (set! (.-node ctx) ps)\n      (set! (.-edge ctx) s)\n      (set! (.-state s) @(.-state ps))\n      (exit this ctx held busy node edge) s))\n\n  IComparable\n  (-compare [this that]\n    (if (identical? this that)\n      0 (if (lt (.-ranks this) (.-ranks that))\n          -1 +1))))\n\n(deftype Process [parent state subs])\n\n(deftype Context [^number step ^boolean busy node edge emitter reacted delayed])\n\n(def context (->Context 0 false nil nil nil nil nil))\n\n(def children 0)\n\n(defn ^boolean lt [x y]\n  (let [xl (alength x)\n        yl (alength y)\n        ml (min xl yl)]\n    (loop [i 0]\n      (if (< i ml)\n        (let [xi (aget x i)\n              yi (aget y i)]\n          (if (== xi yi)\n            (recur (inc i))\n            (< xi yi)))\n        (> xl yl)))))\n\n(defn link [^Publisher x ^Publisher y]\n  (if (lt (.-ranks x) (.-ranks y))\n    (do (set! (.-sibling y) (.-child x))\n        (set! (.-child x) y) x)\n    (do (set! (.-sibling x) (.-child y))\n        (set! (.-child y) x) y)))\n\n(defn dequeue [^Publisher pub]\n  (let [head (.-child pub)]\n    (set! (.-child pub) nil)\n    (loop [heap nil\n           prev nil\n           head head]\n      (if (nil? head)\n        (if (nil? prev) heap (if (nil? heap) prev (link heap prev)))\n        (let [next (.-sibling head)]\n          (set! (.-sibling head) nil)\n          (if (nil? prev)\n            (recur heap head next)\n            (let [head (link prev head)]\n              (recur (if (nil? heap) head (link heap head)) nil next))))))))\n\n(defn enqueue [^Publisher r ^Publisher p]\n  (if (nil? r) p (link p r)))\n\n(defn enter [pub]\n  (let [held (.-held pub)]\n    (set! (.-held pub) true)\n    held))\n\n(defn flip [ctx]\n  (let [pub (.-delayed ctx)]\n    (set! (.-delayed ctx) nil)\n    (set! (.-step ctx) (inc (.-step ctx)))\n    pub))\n\n(defn callback [ctx s]\n  (set! (.-edge ctx) nil)\n  (loop [s s]\n    (when-not (nil? s)\n      (let [cb (if (.-flag s) (.-rcb s) (.-lcb s))\n            value (.-value s)\n            n (.-next s)]\n        (set! (.-value s) nil)\n        (set! (.-next s) nil)\n        (set! (.-node ctx) (.-sub s))\n        (if (identical? none value)\n          (cb) (cb value))\n        (recur n)))))\n\n(defn tick [^Publisher pub ^Context ctx]\n  (set! (.-held pub) true)\n  (let [ps (.-current pub)]\n    (set! (.-reacted ctx) (dequeue pub))\n    (set! (.-emitter ctx) pub)\n    (set! (.-node ctx) ps)\n    ((.-state ps)))\n  (let [s (.-prop pub)]\n    (set! (.-prop pub) nil)\n    (set! (.-held pub) false)\n    (callback ctx s)))\n\n(defn exit [^Publisher pub ^Context ctx ^boolean held ^boolean busy ^Process node ^Subscription edge]\n  (let [s (when-not held\n            (let [s (.-prop pub)]\n              (set! (.-prop pub) nil) s))]\n    (set! (.-held pub) held)\n    (callback ctx s)\n    (when-not busy\n      (set! (.-edge ctx) nil)\n      (loop []\n        (if-some [pub (.-reacted ctx)]\n          (do (tick pub ctx) (recur))\n          (do (set! (.-step ctx) (inc (.-step ctx)))\n              (when-some [pub (.-delayed ctx)]\n                (set! (.-delayed ctx) nil)\n                (tick pub ctx) (recur)))))\n      (set! (.-emitter ctx) nil))\n    (set! (.-busy ctx) busy)\n    (set! (.-node ctx) node)\n    (set! (.-edge ctx) edge)\n    nil))\n\n(def none (js-obj))\n\n(defn step [] (.-step context))\n\n(defn reset [state]\n  (let [pub (.-parent (.-node context))]\n    (set! (.-current pub) (->Process pub state nil))))\n\n(defn attached []\n  (some? (.-prev (.-edge context))))\n\n(defn detach [flag value]\n  (let [ctx context\n        ps (.-node ctx)\n        s (.-edge ctx)\n        p (.-prev s)\n        n (.-next s)\n        pub (.-parent ps)]\n    (set! (.-value s) value)\n    (set! (.-flag s) flag)\n    (set! (.-prev s) nil)\n    (set! (.-next s) (.-prop pub))\n    (set! (.-prop pub) s)\n    (if (identical? p s)\n      (set! (.-subs ps) nil)\n      (do (set! (.-prev n) p)\n          (set! (.-next p) n)\n          (set! (.-subs ps) n)))))\n\n(defn dispatch [flag value]\n  (let [ctx context\n        ps (.-node ctx)\n        pub (.-parent ps)]\n    (when-some [subs (.-subs ps)]\n      (set! (.-subs ps) nil)\n      (set! (.-next (loop [s subs]\n                      (set! (.-value s) value)\n                      (set! (.-flag s) flag)\n                      (set! (.-prev s) nil)\n                      (let [n (.-next s)]\n                        (if (identical? n subs)\n                          s (recur n))))))\n      (set! (.-prop pub) subs))))\n\n(defn schedule []\n  (let [ctx context\n        ps (.-node ctx)\n        pub (.-parent ps)]\n    (if (identical? ps (.-current pub))\n      (let [emitter (.-emitter ctx)]\n        (if (or (nil? emitter) (lt (.-ranks emitter) (.-ranks pub)))\n          (set! (.-reacted ctx) (enqueue (.-reacted ctx) pub))\n          (set! (.-delayed ctx) (enqueue (.-delayed ctx) pub))))\n      ((.-state ps)))))\n\n(defn attach []\n  (let [ctx context\n        ps (.-node ctx)\n        s (.-edge ctx)]\n    (if-some [n (.-subs ps)]\n      (let [p (.-prev n)]\n        (set! (.-next s) n)\n        (set! (.-prev s) p)\n        (set! (.-next p) s)\n        (set! (.-prev n) s))\n      (do (set! (.-subs ps) s)\n          (set! (.-prev s) s)\n          (set! (.-next s) s)))))\n\n(defn bind [f]\n  (let [ps (.-node context)]\n    (fn\n      ([]\n       (let [ctx context\n             pub (.-parent ps)\n             held (enter pub)\n             busy (.-busy ctx)\n             node (.-node ctx)\n             edge (.-edge ctx)]\n         (set! (.-busy ctx) true)\n         (set! (.-node ctx) ps)\n         (set! (.-edge ctx) nil)\n         (f)\n         (exit pub ctx held busy node edge)))\n      ([x]\n       (let [ctx context\n             pub (.-parent ps)\n             held (enter pub)\n             busy (.-busy ctx)\n             node (.-node ctx)\n             edge (.-edge ctx)]\n         (set! (.-busy ctx) true)\n         (set! (.-node ctx) ps)\n         (set! (.-edge ctx) nil)\n         (f x)\n         (exit pub ctx held busy node edge))))))\n\n(defn publisher [state]\n  (let [pub (->Publisher\n              (if-some [^Process ps (.-node context)]\n                (let [p (.-parent ps)\n                      r (.-ranks p)\n                      n (alength r)\n                      a (make-array (inc n))]\n                  (dotimes [i n] (aset a i (aget r i)))\n                  (doto a (aset n (doto (.-children p) (->> (inc) (set! (.-children p)))))))\n                (doto (make-array 1) (aset 0 (doto children (->> (inc) (set! children))))))\n              false 0 nil nil nil nil)]\n    (set! (.-current pub) (->Process pub state nil)) pub))"]}