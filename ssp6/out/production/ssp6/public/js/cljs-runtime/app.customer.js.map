{"version":3,"sources":["app/customer.cljc"],"mappings":";;;;;;;AAkCS,AAAA;;;2BAAA,mCAAAA,9DAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yDAAA,zDAAMD,oEAEFE;AAFJ,AAEU,OAACC,uDAAYD,KAAK,4CAAK,AAACE;;;AAFlC,CAAA,yDAAA,zDAAMJ,oEAGFE,KAAKG;AAHT,AAIG,4DAAA,rDAACC,gDAAoBJ,2BAA4BG;;;AAJpD,CAAA,mDAAA,nDAAML;;AAAN,AAKA,AAAA,sBAAA,8BAAAF,pDAAMc;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,yDAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,2DAAA,3DAAME,sEAAQM,KAAOC;AAArB,AACE,OAASD,YAAK,AAACE,sDAAa,6CAAA,mFAAA,hIAACC,yLAAWF;;;AAD1C,CAAA,8CAAA,9CAAMP;;AAAN;AAAA,CAAA,wCAAA,WAAAC,nDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAaT,AACA,AAEA,AAAKS,mCAAe,6CAAA,wCAAA,uEAAA,4DAAA,yDAAA,4DAAA,qFAAA,8DAAA,yDAAA,8EAAA,2DAAA,4DAAA,+EAAA,GAAA,IAAA,2CAAA,uDAAA,IAAA,mDAAA,IAAA,4DAAA,yCAAA,2CAAA,0DAAA,MAAA,sDAAA,MAAA,0DAAA,MAAA,2DAAA,WAAA,iCAAA,GAAA,2CAAA,qDAAA,GAAA,2DAAA,GAAA,4DAAA,WAAA,2CAAA,+DAAA,GAAA,4DAAA,GAAA,uEAAA,WAAA,2CAAA,sDAAA,GAAA,0DAAA,6DAAA,mEAAA,GAAA,oEAAA,GAAA,sDAAA,iCAAA,6DAAA,GAAA,yDAAA,WAAA,2CAAA,yEAAA,2CAAA,sDAAA,iCAAA,uDAAA,cAAA,2DAAA,2CAAA,sDAAA,GAAA,uDAAA,sBAAA,v9FAACC;AA2BrB,kCAAA,lCAAMC,4EAAeC;AAArB,AACE,8GAAA,mFAAA,8EAAA,xQAACC,mDAAMJ,iCAAeK,2PAAyCF;;AAEjE,kCAAA,lCAAMG,4EAAeC;AAArB,AACE,8GAAA,mFAAA,8EAAA,xQAACH,mDAAMJ,iCAAeK,wPAAwCE;;AAEhE,iCAAA,jCAAMC,0EAAcL;AAApB,AACE,8GAAA,mFAAA,1LAACC,mDAAMJ,iCAAeK,2LAA6BF;;AAGrD,uCAAA,vCAAMM,sFAAoBC;AAA1B,AACE,8GAAA,mFAAA,2DAAA,rPAACN,mDAAMJ,iCAAeK,+NAA2BK;;AACnD,6CAAA,7CAAMC,kGAA0BC;AAAhC,AACE,8GAAA,mFAAA,2DAAA,rPAACR,mDAAMJ,iCAAeK,6OAAiCO;;AAEzD,uCAAA,vCAAMC,sFAAoBC;AAA1B,AACE,8GAAA,mFAAA,2DAAA,rPAACV,mDAAMJ,iCAAeK,+NAA2BS;;AAEnD,+BAAA,/BAAMC,sEAAYD;AAAlB,AACE,8GAAA,mFAAA,1LAACV,mDAAMJ,iCAAeK,oKAAkBS;;AAE1C,qCAAA,rCAAME,kFAAkBb;AAAxB,AACE,8GAAA,mFAAA,yDAAA,nPAACC,mDAAMJ,iCAAeK,4NAAyBF;;AAEjD,AAqBA,AA6FA,6BAAA,7BAAMc,kEAAeC;AAArB,AAAA,0FAAA,wGAAA,2CAAA,0EAAA,KAAA,nLAEiBC,wPAC2B,WAAKC;AAAL,AAAQ,uGAAA,mFAAA,4DAAA,2DAAA,jTAAChB,mDAAMJ,iCAAeK,2RAAoC,AAASe;;AACzE,8GAAA,mFAAA,4DAAA,2DAAA,+DAAA,hXAAChB,mDAAMJ,iCAAeK;GAJpE,2DAAA,mFAAA,2CAAA,qDAAA,uDAAA,4DAKqE,WAAKgB;AAAL,AAAU,OAASA;WALxF,2CAAA,qDAAA,0DAAA,4DAMsE,WAAKA;AAAL,AAAU,OAAUA;mBAN1F,qDAO4CH;;AAEnC,oCAAA,pCAAMI,gFAAsBJ;AAA5B,AAAA,0FAAA,wGAAA,2CAAA,0EAAA,KAAA,nLACMC,wPACyB,WAAKC;AAAL,AAAQ,uGAAA,mFAAA,4DAAA,yEAAA,/TAAChB,mDAAMJ,iCAAeK,ySAA2C,AAACkB,mDAAQ,AAASH;;AACzF,8GAAA,mFAAA,4DAAA,yEAAA,+DAAA,9XAAChB,mDAAMJ,iCAAeK;GAHvD,2DAAA,mFAAA,2CAAA,qDAAA,uDAAA,4DAImD,WAAKgB;AAAL,AAAU,OAASA;WAJtE,2CAAA,qDAAA,0DAAA,4DAKoD,WAAKA;AAAL,AAAU,OAAUA;WALxE,2CAAA,qDAAA,oEAAA,4DAMyD,WAAKA;AAAL,AAAU,OAAeA;WANlF,2CAAA,qDAAA,mEAAA,4DAOyD,WAAKA;AAAL,AAAU,OAAeA;WAPlF,2CAAA,qDAAA,uDAAA,4DAQmD,WAAKA;AAAL,AAAU,oEAAA,7DAACG,mDAAU,AAASH;mBARjF,qDAQ6GH;;AAE7G,8BAAA,9BAAMO,oEAAgBP;AAAtB,AAAA,0FAAA,wGAAA,2CAAA,2DAAA,mFAAA,2CAAA,qDAAA,4DAAA,9YACMC,0cAAgD,WAAKE;AAAL,AAAU,OAAYA;WAD5E,2CAAA,qDAAA,sDAAA,4DAEmD,WAAKA;AAAL,AAAU,OAASA;WAFtE,2CAAA,qDAAA,gEAAA,4DAGuD,WAAKA;AAAL,AAAU,OAAaA;mBAH9E,qDAIuBH;;AA+ChC,AAuDA,AAqCA,AA0BA,AAmBA,AAMA,AAyDS,sBAAA,tBAAMQ;AAAN,AAAA,0FAAA,mDAAA,mFAAA,+FAAA,2CAAA,3FAGOC,wJAAsB,WAAKP;AAAL,AAAQ,iEAAA,1DAACQ,8CAAM,AAAOC,+FAAaT;;;AAkBhE,4BAAA,5BAAMU,gEAAcpB,MAAMQ;AAA1B,AAAA,0FAAA,wGAAA,2CAAA,0EAAA,KAAA,4DAAA,yEAAA,KAAA,7TACMC,yOACkBT,yKAEe,WAAKU;AAAL,AAAQ,8GAAA,mFAAA,yDAAA,nPAAChB,mDAAMJ,iCAAeK,mOAA6B,AAACkB,mDAAQ,AAAgBH;GAJ3H,2DAAA,mFAAA,2CAAA,qDAAA,uDAAA,4DAKmD,WAAKC;AAAL,AAAU,OAASA;WALtE,2CAAA,qDAAA,0DAAA,4DAMoD,WAAKA;AAAL,AAAU,OAAUA;WANxE,2CAAA,qDAAA,oEAAA,4DAOyD,WAAKA;AAAL,AAAU,OAAeA;WAPlF,2CAAA,qDAAA,mEAAA,4DAQyD,WAAKA;AAAL,AAAU,OAAeA;WARlF,2CAAA,qDAAA,uDAAA,4DASmD,WAAKA;AAAL,AAAU,oEAAA,7DAACG,mDAAU,AAASH;mBATjF,qDAS6GH;;AAC7G,yBAAA,zBAAMa,0DAAWb;AAAjB,AAAA,0FAAA,oEAAA,2CAAA,hEACMc,qHAAed;;AAC9B,AAmFA,AAKS,4BAAA,5BAAMe,gEAAcC;AAApB,AACE,IAAAC,WAAMD;AAAN,AAAA,QAAAC;KAAA;AAAA,0FAAA,2EAAA,2CAAA,uDAAA,MAAA,6DAAA,SAAA,1MACeC,sQAAyD;AAAA,AAAO,8GAAA,mFAAA,4DAAA,kEAAA,xTAAChC,mDAAMJ,iCAAeK;;;;KADrG;AAAA,0FAAA,2EAAA,2CAAA,uDAAA,SAAA,6DAAA,OAAA,3MAEe+B,uQAA0D;AAAA,AAAO,8GAAA,mFAAA,4DAAA,8DAAA,pTAAChC,mDAAMJ,iCAAeK;;;;KAFtG;AAAA,0FAAA,2EAAA,2CAAA,uDAAA,QAAA,6DAAA,SAAA,5MAGe+B,wQAA2D;AAAA,AAAO,8GAAA,mFAAA,4DAAA,kEAAA,xTAAChC,mDAAMJ,iCAAeK;;;;;AAHvG,MAAA,KAAA1B,MAAA,CAAA,mEAAAwD;;;;AAIX,AAsCS,gCAAA,hCAAME,wEAAkBnB;AAAxB,AAAA,0FAAA,wGAAA,2CAAA,0EAAA,KAAA,yEAAA,KAAA,jQACMC,sVAEiC,WAAKC;AAAL,AAAQ,8GAAA,mFAAA,1LAAChB,mDAAMJ,iCAAeK,mMAAiC,AAACkB,mDAAQ,AAAgBH;GAH/H,2DAAA,mFAAA,2CAAA,qDAAA,oDAAA,6DAAA,KAAA,4DAI8E,WAAKC;AAAL,AAAU,OAAQA;WAJhG,2CAAA,qDAAA,6DAAA,4DAKoE,WAAKA;AAAL,AAAU,OAAYA;WAL1F,2CAAA,qDAAA,wDAAA,6DAAA,KAAA,4DAM+E,WAAKA;AAAL,AAAU,mDAAK,AAASA;mBANvG,qDAOuCH;;AAChD","names":["var_args","G__59100","app.customer/create-root","js/Error","node","app.customer.create_root","cljs.core.gensym","id-prefix","js/module$node_modules$react_dom$client.createRoot","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","app.customer/render","seq59101","G__59102","cljs.core/first","cljs.core/next","self__5754__auto__","root","args","reagent.core.as_element","cljs.core.into","app.customer/!state-project","cljs.core.atom","app.customer/set-username!","name","cljs.core.swap_BANG_","cljs.core/assoc-in","app.customer/set-password!","password","app.customer/set-company!","app.customer/set-project-title!","title","app.customer/set-project-description!","description","app.customer/set-project-types!","types","app.customer/set-types!","app.customer/set-author-name!","app.customer/project-table","data","js/shadow.js.shim.module$react_data_table_component$default","v","row","app.customer/project-detail-table","cljs.core.js__GT_clj","clojure.string.split","app.customer/proposal-table","app.customer/picker","js/shadow.js.shim.module$react_date_picker$default","cljs.core.apply","js/console","app.customer/report-table","app.customer/CSVButton","app.customer/CSVLink","app.customer/reactive-btn","action","G__59113","app.customer/ReactiveButton","app.customer/admin-user-table"],"sourcesContent":["(ns app.customer\r\n  #?(:cljs (:require-macros [app.customer :refer [with-reagent]]))\r\n  (:require clojure.edn\r\n            app.supplier\r\n            app.admin\r\n            contrib.ednish\r\n            [hyperfiddle.electric-ui4 :as ui4]\r\n            #?(:clj [contrib.datomic-contrib :as dx])\r\n            #?(:cljs contrib.datomic-cloud-contrib)\r\n            [contrib.gridsheet :as gridsheet :refer [Explorer]]\r\n            [hyperfiddle.electric :as e]\r\n            [contrib.str :refer [empty->nil]]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.history :as history]\r\n            [missionary.core :as m]\r\n            #?(:clj [datomic.client.api :as dt])\r\n            #?(:cljs [\"react\" :as react])\r\n            #?(:cljs [\"slate\" :refer [createEditor]])\r\n            #?(:cljs [\"slate-react\" :refer [Slate Editable withReact]])\r\n            #?(:cljs [reagent.core :as r])\r\n            #?(:cljs [reagent.dom :as rdom])\r\n            #?(:cljs [\"react-awesome-button\" :as AwesomeButton])\r\n            #?(:cljs [\"react-dom/client\" :as ReactDom])\r\n            #?(:cljs [\"react-data-table-component$default\" :as DataTable])\r\n            #?(:cljs [\"reactjs-popup$default\" :as Popup])\r\n            ;#?(:cljs [\"react-datepicker\" :as DatePicker])\r\n            #?(:cljs [\"react-date-picker$default\" :as DatePicker])\r\n            #?(:cljs [\"react-calendar$default\" :as Calendar])\r\n            #?(:cljs [garden.core :refer [css]])\r\n            #?(:cljs [stylefy.core :as stylefy :refer [use-style]])\r\n            #?(:cljs [\"react-csv\"] :refer [CSVLink CSVDownload])\r\n            [clojure.string :as str]))\r\n\r\n\r\n#?(:cljs (defn create-root\r\n           \"See https://reactjs.org/docs/react-dom-client.html#createroot\"\r\n           ([node] (create-root node (str (gensym))))\r\n           ([node id-prefix]\r\n            (ReactDom/createRoot node #js {:identifierPrefix id-prefix}))))\r\n#?(:cljs (defn render [root & args]\r\n           (.render root (r/as-element (into [:f>] args)))))\r\n\r\n\r\n(defmacro with-reagent [& args]\r\n  `(dom/div\r\n     (let [root# (create-root dom/node)]\r\n       (render root# ~@args)\r\n       (e/on-unmount #(.unmount root#)))))\r\n\r\n\r\n\r\n\r\n(e/def conn)\r\n(e/def db)\r\n\r\n(def !state-project (atom {:project          {:title       \"\"\r\n                                              :status      :inactive\r\n                                              :create-date \"\"\r\n                                              :description \"\"\r\n                                              :types       []\r\n                                              :customer    \"\"\r\n                                              :author \"\"}\r\n                           :author {:name \"\"\r\n                                    :company \"\"\r\n                                    :password \"\"}\r\n                           :selected-company \"\"\r\n                           :selected-user \"\"\r\n                           :login-credentials {:user-name \"\" :password \"\" :login-message \"\"}\r\n                           :msg/reply 0\r\n                           :msg/author \"\"\r\n                           :clicker {:project-detail {:types [] :click false}\r\n                                     :project {:title \"\" :click false}}\r\n                           :admin-user-selection []\r\n                           :buttons {:delete false\r\n                                     :edit false\r\n                                     :create false\r\n                                     :message \"\"}\r\n                           :report {:start 0\r\n                                    :end 0\r\n                                    :selected []}}))\r\n\r\n\r\n(defn set-username! [name]\r\n  (swap! !state-project assoc-in [:login-credentials :user-name] name))\r\n\r\n(defn set-password! [password]\r\n  (swap! !state-project assoc-in [:login-credentials :password] password))\r\n\r\n(defn set-company! [name]\r\n  (swap! !state-project assoc-in [:selected-company] name))\r\n\r\n\r\n(defn set-project-title! [title]\r\n  (swap! !state-project assoc-in [:project :title] title))\r\n(defn set-project-description! [description]\r\n  (swap! !state-project assoc-in [:project :description] description))\r\n\r\n(defn set-project-types! [types]\r\n  (swap! !state-project assoc-in [:project :types] types))\r\n\r\n(defn set-types! [types]\r\n  (swap! !state-project assoc-in [:types] types))\r\n\r\n(defn set-author-name! [name]\r\n  (swap! !state-project assoc-in [:author :name] name))\r\n\r\n(e/defn CompanySelect []\r\n        ((e/server\r\n           (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n             (e/client\r\n               (let [state (e/watch !state-project)]\r\n                 (if (< 0 (count (:selected-company state)))\r\n                   (dom/div\r\n                     (do\r\n                       (history/navigate! history/!history [:app.main/customer-user-select (:selected-company state)])))\r\n                   (dom/div\r\n                     (dom/h2 (dom/text \"Select Company:\"))\r\n                     (dom/div\r\n                       (dom/table\r\n                         (dom/th (dom/text \"Name\"))\r\n                         (e/for [value (e/server (dt/q '[:find (pull ?e [*])\r\n                                                         :where [?e :customer/id _]] (dt/db conn)))]\r\n                                (dom/tr\r\n                                  (dom/td (history/link [:app.main/customer-user-select (:customer/name (first value))] (dom/text (:customer/name (first value)))))))))))))))))\r\n\r\n\r\n\r\n(e/defn UserSelect [company]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (e/client\r\n              (let [state (e/watch !state-project)]\r\n                (let [login (:login-credentials state)]\r\n                  (swap! !state-project assoc-in [:selected-company] company)\r\n                  (if (< 0 (count (:selected-user state)))\r\n                    (dom/div\r\n                      (do (history/navigate! history/!history [:app.main/customer-projects (:selected-company state)])))\r\n\r\n                    (dom/div\r\n                      (dom/h2 (dom/text \"User Login:\"))\r\n                      (dom/text (:login-message login))\r\n                      (dom/div\r\n                        (dom/span (dom/text \"Name:\"))\r\n                        (ui4/input (:user-name login)  (e/fn [v] (set-username! v)))\r\n                        (dom/span (dom/text \"Password:\"))\r\n                        (ui4/input  (:password login) (e/fn [v] (set-password! v)))\r\n                        (ui4/button (e/fn []\r\n                                          (e/server\r\n                                            (if (empty? (dt/q '[:find ?e\r\n                                                                :in $ ?name\r\n                                                                :where [?e :author/name ?name]] (dt/db conn) (:user-name login)))\r\n                                              (e/client (swap! !state-project assoc-in [:login-credentials :login-message] \"Wrong username!\"))\r\n                                              (e/client (swap! !state-project assoc-in [:login-credentials :login-message] \"\")\r\n                                                        (e/server\r\n                                                          (if (= (:password login) (ffirst (dt/q '[:find ?password\r\n                                                                                                   :in $ ?user\r\n                                                                                                   :where [?e :password/user ?user]\r\n                                                                                                   [?e :password/password ?password]] (dt/db conn) (ffirst (dt/q '[:find ?e\r\n                                                                                                                                                                   :in $ ?name ?company\r\n                                                                                                                                                                   :where [?e :author/name ?name]\r\n                                                                                                                                                                       [?e :author/company ?company]] (dt/db conn) (:user-name login) (ffirst (dt/q '[:find ?e :in $ ?company :where [?e :customer/name ?company]] (dt/db conn) company)))))))\r\n                                                            (e/client\r\n                                                              (history/navigate! history/!history [:app.main/customer-projects (:selected-company state)])\r\n                                                              (swap! !state-project assoc-in [:selected-user] (:user-name login)))\r\n                                                            (e/client (swap! !state-project assoc-in [:login-credentials :login-message] \"Wrong password!\")))))))) (dom/text \"Login\")))))))))))\r\n\r\n\r\n\r\n\r\n\r\n#?(:clj (defn project-data [db company]\r\n          (vec (map (fn [[id title status]]\r\n                      {:id      id\r\n                       :title   title\r\n                       :status status})\r\n                    (vec (->>\r\n                           (dt/q\r\n                             '[:find ?id ?title ?status\r\n                               :in $ ?company\r\n                               :where\r\n                               [?e :customer/name ?company]\r\n                               [?p :project/customer ?e]\r\n                               [?p :project/id ?id]\r\n                               [?p :project/title ?title]\r\n                               [?p :project/status ?status]]\r\n                             db company)))))))\r\n\r\n#?(:clj (defn project-next-id [db]\r\n          (if (empty? (dt/q '[:find (max ?id)\r\n                              :where [_ :project/id ?id]] db))\r\n            1\r\n            (inc (ffirst (dt/q '[:find (max ?id)\r\n                                 :where [_ :project/id ?id]] db))))))\r\n\r\n#?(:clj (defn next-password-id [db]\r\n          (if (empty? (dt/q '[:find (max ?id)\r\n                              :where [_ :password/id ?id]] db))\r\n            1\r\n            (inc (ffirst (dt/q '[:find (max ?id)\r\n                                 :where [_ :password/id ?id]] db))))))\r\n#?(:clj (defn type-finder [v db]\r\n          (into [] (flatten (map (fn [s] (into [] (flatten (dt/q '[:find ?e\r\n                                                                   :in $ ?name :where [?e :type/name ?name]] db s)))) v)))))\r\n#?(:clj (defn project-detail-data [db detail-data]\r\n          (into [] (map (fn [m] {:title       (:project/title m)\r\n                                 :status      (:project/status m)\r\n                                 :create_date (if (and\r\n                                                    (and\r\n                                                      (= (.getMonth (java.util.Date.)) (.getMonth (java.util.Date. (:project/create_date m))))\r\n                                                      (= (.getYear (java.util.Date.)) (.getYear (java.util.Date. (:project/create_date m)))))\r\n                                                    (= (.getDate (java.util.Date.)) (.getDate (java.util.Date. (:project/create_date m)))))\r\n                                                (.format (java.text.SimpleDateFormat. \"HH:mm:ss\") (java.util.Date. (:project/create_date m)))\r\n                                                (.format (java.text.SimpleDateFormat. \"MM/dd/yyyy\") (java.util.Date. (:project/create_date m))))\r\n                                 :description (:project/description m)\r\n                                 :types       (into [] (flatten (map (fn [mt] (flatten (dt/q '[:find ?name\r\n                                                                                               :in $ ?e\r\n                                                                                               :where [?e :type/name ?name]] db (:db/id mt)))) (:project/types m))))}) [detail-data]))))\r\n\r\n\r\n\r\n(defn project-table [data]\r\n  #?(:cljs\r\n             [:> DataTable {:allowRowEvents true\r\n                            :onRowClicked   (fn [v] (swap! !state-project assoc-in [:clicker :project :title] (.-title v))\r\n                                              (swap! !state-project assoc-in [:clicker :project :click] true))\r\n                            :columns        [{:name :Title :selector (fn [row] (.-title row))}\r\n                                             {:name :Status :selector (fn [row] (.-status row))}]\r\n                            :data           data}]))\r\n\r\n#?(:cljs (defn project-detail-table [data]\r\n           [:> DataTable {:allowRowEvents true\r\n                          :onRowClicked (fn [v] (swap! !state-project assoc-in [:clicker :project-detail :types] (js->clj (.-types v)))\r\n                                          (swap! !state-project assoc-in [:clicker :project-detail :click] true))\r\n                          :columns [{:name :Title :selector (fn [row] (.-title row))}\r\n                                    {:name :Status :selector (fn [row] (.-status row))}\r\n                                    {:name :Create_Date :selector (fn [row] (.-create_date row))}\r\n                                    {:name :Description :selector (fn [row] (.-description row))}\r\n                                    {:name :Types :selector (fn [row] (str/split (.-types row) #\"(?=[A-Z])\"))}] :data data}]))\r\n\r\n#?(:cljs (defn proposal-table [data]\r\n           [:> DataTable {:columns [{:name :Supplier :selector (fn [row] (.-supplier row))}\r\n                                    {:name :Price :selector (fn [row] (.-price row))}\r\n                                    {:name :Timestamp :selector (fn [row] (.-timestamp row))}]\r\n                          :data data}]))\r\n\r\n#?(:clj (defn next-author-id [db]\r\n          (if (empty? (dt/q '[:find (max ?id)\r\n                              :where [_ :author/id ?id]] db))\r\n            1\r\n            (inc (ffirst (dt/q '[:find (max ?id)\r\n                                 :where [_ :author/id ?id]] db))))))\r\n#?(:clj (defn customer-finder [name db]\r\n          (ffirst (dt/q '[:find ?e\r\n                          :in $ ?name\r\n                          :where [?e :customer/name ?name]] db name))))\r\n#?(:clj (defn ProjectToDatomic [id title status date description types customer author conn]\r\n          (dt/transact conn {:tx-data [{:project/id id\r\n                                        :project/title title\r\n                                        :project/status status\r\n                                        :project/create_date date\r\n                                        :project/description description\r\n                                        :project/types types\r\n                                        :project/customer customer\r\n                                        :project/author author}]})))\r\n\r\n#?(:clj (defn proposal-data [db detail-data]\r\n          (vec (map (fn [[supplier price timestamp]]\r\n                      {:supplier supplier\r\n                       :price price\r\n                       :timestamp (if (and\r\n                                        (and\r\n                                          (= (.getMonth (java.util.Date.)) (.getMonth (java.util.Date. timestamp)))\r\n                                          (= (.getYear (java.util.Date.)) (.getYear (java.util.Date. timestamp))))\r\n                                        (= (.getDate (java.util.Date.)) (.getDate (java.util.Date. timestamp))))\r\n                                    (.format (java.text.SimpleDateFormat. \"HH:mm:ss\") (java.util.Date. timestamp))\r\n                                    (.format (java.text.SimpleDateFormat. \"MM/dd/yyyy\") (java.util.Date. timestamp)))})\r\n                    (vec (->>\r\n                           (dt/q\r\n                             '[:find ?supplier ?price ?timestamp\r\n                               :in $ ?title\r\n                               :where\r\n                               [?e :project/title ?title]\r\n                               [?p :proposal/price ?price]\r\n                               [?p :proposal/timestamp ?timestamp]\r\n                               [?p :proposal/project ?e]\r\n                               [?p :proposal/supplier ?sid]\r\n                               [?sid :supplier/name ?supplier]]\r\n                             db (:project/title detail-data))))))))\r\n\r\n\r\n(e/defn CreateProject [name]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (e/client\r\n              (dom/h2 (dom/text \"Creating a Project for \" name))\r\n              (dom/div\r\n                (let [state (e/watch !state-project)]\r\n\r\n                  (let [project (:project state)]\r\n\r\n                    (dom/div\r\n                      (dom/span (dom/text \"Title: \"))\r\n                      (ui4/input (:title project) (e/fn [v] (set-project-title! v)))\r\n                      (dom/span (dom/text \"Description: \"))\r\n                      (ui4/input (:description project) (e/fn [v] (set-project-description! v)))\r\n\r\n                      (dom/div\r\n                        (dom/span (dom/text \"Types: \"))\r\n                        (e/for [value (e/server (dt/q '[:find ?name\r\n                                                        :where [?e :type/name ?name]] (dt/db conn)))]\r\n                               (dom/label\r\n                                 (dom/input (dom/props {:type  \"checkbox\"\r\n                                                        :name  (first value)\r\n                                                        :value \"true\"})\r\n                                            (dom/on \"change\" (e/fn [v]\r\n                                                                   (if (and (.-checked dom/node) (not (some (partial = (str (.-name dom/node))) (:types project))))\r\n                                                                     #_(swap! data update :nums conj {:first 1 :second 2})\r\n                                                                     (swap! !state-project update-in [:project :types] conj (str (.-name dom/node)))\r\n                                                                     (if (some (partial = (str (.-name dom/node))) (:types project))\r\n                                                                       (swap! !state-project update-in [:project :types] (fn [types] (vec (remove #(= (str (.-name dom/node)) %) types))))\r\n                                                                       nil)))))\r\n\r\n\r\n\r\n\r\n\r\n                                 (dom/text (first value)))))\r\n\r\n\r\n                      (dom/div\r\n                        (dom/text (e/server (customer-finder name (dt/db conn))))\r\n                        (ui4/button (e/fn []\r\n                                          (e/server (ProjectToDatomic (project-next-id (dt/db conn))\r\n                                                                      (:title project)\r\n                                                                      :inactive\r\n                                                                      (System/currentTimeMillis)\r\n                                                                      (:description project)\r\n                                                                      (type-finder (:types project) (dt/db conn))\r\n                                                                      (customer-finder name (dt/db conn))\r\n                                                                      (ffirst (dt/q '[:find ?e :in $ ?name :where [?e :author/name ?name]] (dt/db conn) (:selected-user state)))\r\n                                                                      conn)))\r\n\r\n\r\n                                    (dom/text \"Create Project\")))))))))))\r\n\r\n(e/defn Projects [name]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n              (e/client\r\n                (let [state (e/watch !state-project)]\r\n                  (if (:click (:project (:clicker state)))\r\n                    (history/navigate! history/!history [:app.main/customer-project-detail (e/server (ffirst (dt/q '[:find (pull ?e [*])\r\n                                                                                                                     :in $ ?title\r\n                                                                                                                     :where [?e :project/title ?title]] db (:title (:project (:clicker state))))))]))\r\n                  (dom/div (dom/element \"style\" (dom/text \"\r\n                  ul{list-style-type: none; margin: 0; padding: 0; background-color: gray; overflow: auto; }\r\n                  li {float: left;}\r\n                  li a {color: white; padding: 10px 20px; display: inline-block; text-align: center; text-decoration: none;}\r\n                  .home {background-color: darkred;}\r\n                  li a:hover {\r\n                  background-color: #405d27;\r\n                  legend {font-size: 20px; font-style: italic;} p {margin-bottom: 0}\r\n                  }\r\n                  #container {position:absolute;  left: 40%;  top: 50%; margin-left: -50px;  margin-top: -50px; font-style: italic;}\"))\r\n                           (dom/ul\r\n                             (dom/li (history/link [:app.main/customer-create-project name] (dom/text \"Create Project\")))\r\n                             (dom/li (history/link [:app.main/customer-create-author name] (dom/text \"Create Author\")))\r\n                             (dom/li (history/link [:app.main/customer-main-report name] (dom/text \"Reports\")))))\r\n                  (dom/text (e/server (project-data db name)))\r\n                  (dom/div (with-reagent project-table (clj->js (e/server (project-data db name)))))\r\n\r\n                  (dom/table (dom/props {:border \"1px\" \"solid\" \"black\"})\r\n                             (dom/td (dom/text \"Project Name\"))\r\n                             (dom/td (dom/text \"Status\"))\r\n                             (e/for [value (e/server (dt/q '[:find (pull ?e [*])\r\n                                                             :in $ ?name\r\n                                                             :where [?e :project/customer ?name]] db (ffirst (dt/q '[:find ?e :in $ ?name :where [?e :customer/name ?name]] db name))))]\r\n                                    (dom/tr\r\n                                      (dom/td (history/link [:app.main/customer-project-detail (first value)] (dom/text (:project/title (first value)))))\r\n                                      (dom/td (dom/text (:project/status (first value)))))))))))))\r\n\r\n(e/defn CreateAuthor [name]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n           (e/client\r\n             (dom/div\r\n               (let [state (e/watch !state-project)]\r\n                 (let [auth (:author state)]\r\n                   (dom/div\r\n                     (dom/span (dom/text \"Author Name:\"))\r\n                     (ui4/input (:name auth) (e/fn [v] (set-author-name! v)))\r\n                     (dom/span (dom/text \"Password: \"))\r\n                     (ui4/input (:password auth) (e/fn [v] (swap! !state-project assoc-in [:author :password] v))))\r\n                   (dom/div\r\n                     (dom/text name)\r\n                     (ui4/button (e/fn []\r\n                                       (e/server (dt/transact conn {:tx-data [{:author/id      (next-author-id (dt/db conn))\r\n                                                                               :author/name    (:name auth)\r\n                                                                               :author/company (ffirst (dt/q '[:find ?e :in $ ?name :where [?e :customer/name ?name]] (dt/db conn) name))}]})\r\n                                                 (dt/transact conn {:tx-data [{:password/id       (next-password-id (dt/db conn))\r\n                                                                               :password/user     (ffirst (dt/q '[:find ?e :in $ ?name :where [?e :author/name ?name]] (dt/db conn) (:name auth)))\r\n                                                                               :password/password (:password auth)}]})))\r\n\r\n\r\n\r\n                                 (dom/text \"Create Author\"))))))))))\r\n\r\n(e/defn ProjectDetail [name]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n              (e/client\r\n                (let [state (e/watch !state-project)]\r\n                  (dom/text (:clicker state))\r\n                  (swap! !state-project assoc-in [:clicker :project :click] false)\r\n                  (if (:click (:project-detail (:clicker state)))\r\n                    (history/navigate! history/!history [:app.main/custom2 (:types (:project-detail (:clicker state)))]))\r\n                  (swap! app.supplier/!state-supplier assoc-in [:clicker :proposal :click] false)\r\n                  (dom/div (with-reagent project-detail-table (clj->js (e/server (project-detail-data db name)))))\r\n                  (dom/div\r\n                    (dom/h3 (dom/text \"Proposals for this project\"))\r\n                    (dom/div (with-reagent proposal-table (clj->js (e/server (proposal-data db name))))))))))))\r\n\r\n\r\n\r\n\r\n(e/defn MainMessage []\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]))))\r\n\r\n\r\n(e/defn CustomerPage2 [input]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n              (e/client\r\n                (let [project (e/watch !state-project)]\r\n                  (swap! !state-project assoc-in [:clicker :project-detail :click] false)\r\n                  (let [!filter-project (atom \"\"), filter-project (e/watch !filter-project)]\r\n                    (dom/span (dom/text \"Project search via type: \\n\"))\r\n                    (e/for [value (into [] input)]\r\n                           (dom/label\r\n                             (dom/input (dom/props {:type  \"checkbox\"\r\n                                                    :name  value\r\n                                                    :value \"true\"})\r\n                                        (dom/on \"change\" (e/fn [v]\r\n                                                               (if (and (.-checked dom/node) (not (some (partial = (str (.-name dom/node))) (:types project))))\r\n                                                                 #_(swap! data update :nums conj {:first 1 :second 2})\r\n                                                                 (swap! !state-project update-in [:types] conj (str (.-name dom/node)))\r\n                                                                 (if (some (partial = (str (.-name dom/node))) (:types project))\r\n                                                                   (swap! !state-project update-in [:types] (fn [types] (vec (remove #(= (str (.-name dom/node)) %) types))))\r\n                                                                   nil))\r\n                                                               (reset! !filter-project (str (.-name dom/node))))))\r\n\r\n\r\n\r\n\r\n\r\n                             (dom/text value)))\r\n                    (dom/text filter-project)\r\n                    (dom/table (dom/props {:border \"1px\" \"solid\" \"black\"})\r\n                               (dom/th (dom/text \"Title\"))\r\n                               (dom/th (dom/text \"Status\"))\r\n                               (dom/th (dom/text \"Description\"))\r\n                               (dom/th (dom/text \"Author\"))\r\n                               (dom/th (dom/text \"Company\"))\r\n                               (dom/th (dom/text \"Create Date\"))\r\n                               (e/for [value (e/server (dt/q '[:find (pull ?p [*])\r\n                                                               :in $  [?t]\r\n                                                               :where [?p :project/types ?t]] db [(ffirst (dt/q '[:find ?e :in $ ?type :where [?e :type/name ?type]] db filter-project))]))]\r\n                                      (dom/tr\r\n                                        (dom/td (dom/text (:project/title (first value))))\r\n                                        (dom/td (dom/text (:project/status (first value))))\r\n                                        (dom/td (dom/text (:project/description (first value))))\r\n                                        (dom/td (dom/text (e/server (ffirst (dt/q '[:find ?name\r\n                                                                                    :in $ ?a\r\n                                                                                    :where [?a :author/name ?name]] db (:db/id (:project/author (first value))))))))\r\n                                        (dom/td (dom/text (e/server (ffirst (dt/q '[:find ?company\r\n                                                                                    :in $ ?c\r\n                                                                                    :where [?c :customer/name ?company]] db (:db/id (first (:project/customer (first value)))))))))\r\n                                        (dom/td (dom/text (e/server (if (and\r\n                                                                          (and\r\n                                                                            (= (.getMonth (java.util.Date.)) (.getMonth (java.util.Date. (:project/create_date (first value)))))\r\n                                                                            (= (.getYear (java.util.Date.)) (.getYear (java.util.Date. (:project/create_date (first value))))))\r\n                                                                          (= (.getDate (java.util.Date.)) (.getDate (java.util.Date. (:project/create_date (first value))))))\r\n                                                                      (.format (java.text.SimpleDateFormat. \"HH:mm:ss\") (java.util.Date. (:project/create_date (first value))))\r\n                                                                      (.format (java.text.SimpleDateFormat. \"MM/dd/yyyy\") (java.util.Date. (:project/create_date (first value))))))))))))))))))\r\n\r\n#?(:cljs (defn picker []\r\n           #_[:> Calendar  {:onChange (fn [v] (apply (.-log js/console) [v]))}]\r\n           [:div\r\n            [:> DatePicker {:onChange (fn [v] (apply (.-log js/console) [v]))}]]))\r\n\r\n#?(:clj (defn report-data [db data]\r\n          (into [] (map (fn [m] {:title       (:project/title (first m))\r\n                                 :status      (:project/status (first m))\r\n                                 :create_date (if (and\r\n                                                    (and\r\n                                                      (= (.getMonth (java.util.Date.)) (.getMonth (java.util.Date. (:project/create_date (first m)))))\r\n                                                      (= (.getYear (java.util.Date.)) (.getYear (java.util.Date. (:project/create_date (first m))))))\r\n                                                    (= (.getDate (java.util.Date.)) (.getDate (java.util.Date. (:project/create_date (first m))))))\r\n                                                (.format (java.text.SimpleDateFormat. \"HH:mm:ss\") (java.util.Date. (:project/create_date (first m))))\r\n                                                (.format (java.text.SimpleDateFormat. \"MM/dd/yyyy\") (java.util.Date. (:project/create_date (first m)))))\r\n                                 :description (:project/description (first m))\r\n                                 :types       (into [] (flatten (map (fn [mt] (flatten (dt/q '[:find ?name\r\n                                                                                               :in $ ?e\r\n                                                                                               :where [?e :type/name ?name]] db (:db/id mt)))) (:project/types (first m)))))}) data))))\r\n;todo CSV aktarma butonu eklenecek. Diger filtrasyon ozellikleri eklenecek.\r\n;todo ana sayfaya sirket ile alaklai yorum kismi eklencek.\r\n#?(:cljs (defn report-table [title data]\r\n           [:> DataTable {:allowRowEvents true\r\n                          :title title\r\n                          :selectableRows true\r\n                          :onSelectedRowsChange (fn [v] (swap! !state-project assoc-in [:report :selected] (js->clj (.-selectedRows v)))) ;State'e kaydet sonrsinda buton olustur ve csv export tarfini hallet\r\n                          :columns [{:name :Title :selector (fn [row] (.-title row))}\r\n                                    {:name :Status :selector (fn [row] (.-status row))}\r\n                                    {:name :Create_Date :selector (fn [row] (.-create_date row))}\r\n                                    {:name :Description :selector (fn [row] (.-description row))}\r\n                                    {:name :Types :selector (fn [row] (str/split (.-types row) #\"(?=[A-Z])\"))}] :data data}]))\r\n#?(:cljs (defn CSVButton [data]\r\n           [:> CSVLink {:data data}]))\r\n(e/defn ReportPage [name]\r\n  (e/server\r\n    (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n      (e/client\r\n        (let [state (e/watch !state-project)]\r\n          (dom/h3 (dom/text \"Report Page\"))\r\n          (dom/text (:report state))\r\n          (dom/div\r\n            (dom/ul (dom/props {:style {:background-color \"white\"}})\r\n                    (dom/li (dom/text \"from:\" (dom/props {:class \"text\"}))\r\n\r\n                            (ui4/date\r\n                              (:start (:report state)) (e/fn [v] (swap! !state-project assoc-in [:report :start] (inst-ms* v))\r\n                                                             #_(apply (.-log js/console) v))))\r\n                    (dom/li (dom/text \"to:\" (dom/props {:class \"text\"}))\r\n\r\n                            (ui4/date\r\n                              (:end (:report state)) (e/fn [v] (swap! !state-project assoc-in [:report :end] (inst-ms* v))\r\n                                                           #_(apply (.-log js/console) v))))))\r\n          (dom/text (cond\r\n                      (and (= 0 (:start (:report state))) (= 0 (:end (:report state)))) (e/server (dt/q '[:find (pull ?e [*])\r\n                                                                                                          :in $ ?company\r\n                                                                                                          :where\r\n                                                                                                          [?c :customer/name ?company]\r\n                                                                                                          [?e :project/create_date _]\r\n                                                                                                          [?e :project/customer ?c]] (dt/db conn) name))\r\n                      (and (< 0 (:start (:report state))) (< 0 (:end (:report state)))) (e/server (dt/q '[:find (pull ?e [*])\r\n                                                                                                          :in $ ?start ?end ?company\r\n                                                                                                          :where [?e :project/create_date ?date]\r\n                                                                                                          [?c :customer/name ?company]\r\n                                                                                                          [?e :project/customer ?c]\r\n                                                                                                          [(> ?date ?start)]\r\n                                                                                                          [(< ?date ?end)]] (dt/db conn) (:start (:report state)) (:end (:report state)) name))\r\n                      (and (= 0 (:start (:report state))) (< 0 (:end (:report state)))) (e/server (dt/q '[:find (pull ?e [*])\r\n                                                                                                          :in $ ?end ?company\r\n                                                                                                          :where [?e :project/create_date ?date]\r\n                                                                                                          [?c :customer/name ?company]\r\n                                                                                                          [?e :project/customer ?c]\r\n                                                                                                          [(< ?date ?end)]] (dt/db conn) (:end (:report state)) name))\r\n                      (and (= 0 (:end (:report state))) (< 0 (:start (:report state)))) (e/server (dt/q '[:find (pull ?e [*])\r\n                                                                                                          :in $ ?start ?company\r\n                                                                                                          :where [?e :project/create_date ?date]\r\n                                                                                                          [?c :customer/name ?company]\r\n                                                                                                          [?e :project/customer ?c]\r\n                                                                                                          [(> ?date ?start)]] (dt/db conn) (:start (:report state)) name))))\r\n          (with-reagent report-table (e/server (str (.format (java.text.SimpleDateFormat. \"MM/dd/yyyy\") (java.util.Date. (:start (:report state)))) \"-\" (.format (java.text.SimpleDateFormat. \"MM/dd/yyyy\") (java.util.Date. (:end (:report state))))))\r\n                        (clj->js (e/server (report-data (dt/db conn ) (cond\r\n                                                                        (and (= 0 (:start (:report state))) (= 0 (:end (:report state)))) (e/server (dt/q '[:find (pull ?e [*])\r\n                                                                                                                                                            :in $ ?company\r\n                                                                                                                                                            :where\r\n                                                                                                                                                            [?c :customer/name ?company]\r\n                                                                                                                                                            [?e :project/customer ?c]\r\n                                                                                                                                                            [?e :project/create_date _]] (dt/db conn) name))\r\n                                                                        (and (< 0 (:start (:report state))) (< 0 (:end (:report state)))) (e/server (dt/q '[:find (pull ?e [*])\r\n                                                                                                                                                            :in $ ?start ?end ?company\r\n                                                                                                                                                            :where [?e :project/create_date ?date]\r\n                                                                                                                                                            [?c :customer/name ?company]\r\n                                                                                                                                                            [?e :project/customer ?c]\r\n                                                                                                                                                            [(> ?date ?start)]\r\n                                                                                                                                                            [(< ?date ?end)]] (dt/db conn) (:start (:report state)) (:end (:report state)) name))\r\n                                                                        (and (= 0 (:start (:report state))) (< 0 (:end (:report state)))) (e/server (dt/q '[:find (pull ?e [*])\r\n                                                                                                                                                            :in $ ?end ?company\r\n                                                                                                                                                            :where [?e :project/create_date ?date]\r\n                                                                                                                                                            [?c :customer/name ?company]\r\n                                                                                                                                                            [?e :project/customer ?c]\r\n                                                                                                                                                            [(< ?date ?end)]] (dt/db conn) (:end (:report state)) name))\r\n                                                                        (and (= 0 (:end (:report state))) (< 0 (:start (:report state)))) (e/server (dt/q '[:find (pull ?e [*])\r\n                                                                                                                                                            :in $ ?start ?company\r\n                                                                                                                                                            :where [?e :project/create_date ?date]\r\n                                                                                                                                                            [?c :customer/name ?company]\r\n                                                                                                                                                            [?e :project/customer ?c]\r\n                                                                                                                                                            [(> ?date ?start)]] (dt/db conn) (:start (:report state)) name)))))))\r\n          (with-reagent CSVButton [1 2 3])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          #_(with-reagent picker))))))\r\n\r\n\r\n(e/defn CustomerPage []\r\n        (e/client (dom/text \"CustomerPage\")\r\n                  (history/link [:app.main/custom2 \"input Test\"] (dom/text \"input page2\"))))\r\n\r\n\r\n#?(:cljs (defn reactive-btn [action]\r\n           (case action\r\n             \"Delete\" [:> ReactiveButton {:color \"red\" :idleText \"Delete\" :onClick (fn [] (swap! !state-project assoc-in [:buttons :delete] true))}]\r\n             \"Edit\"   [:> ReactiveButton {:color \"yellow\" :idleText \"Edit\" :onClick (fn [] (swap! !state-project assoc-in [:buttons :edit] true))}]\r\n             \"Create\" [:> ReactiveButton {:color \"green\" :idleText \"Create\" :onClick (fn [] (swap! !state-project assoc-in [:buttons :create] true))}])))\r\n(e/defn EditUser [[m company]]\r\n  (e/server\r\n    (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n      (e/client\r\n        (let [edit-state (atom {:user-name \"\" :password \"\" :admin false})]\r\n          (swap! edit-state assoc-in [:admin] (:admin (clojure.walk/keywordize-keys (first m))))\r\n          (swap! edit-state assoc-in [:user-name] (:user (clojure.walk/keywordize-keys (first m))))\r\n          (swap! edit-state assoc-in [:password] (:password (clojure.walk/keywordize-keys (first m))))\r\n          (dom/div\r\n            (dom/span (dom/text \"User: \"))\r\n            (dom/input (dom/props {:placeholder (:user (clojure.walk/keywordize-keys (first m)))})\r\n                       (dom/on \"change\" (e/fn [v] (swap! edit-state assoc-in [:user-name] (.-value dom/node))))))\r\n          (dom/div\r\n            (dom/span (dom/text \"Password: \"))\r\n            (dom/input (dom/props {:placeholder (:password (clojure.walk/keywordize-keys (first m)))})\r\n                       (dom/on \"change\" (e/fn [v] (swap! edit-state assoc-in [:password] (.-value dom/node))))))\r\n          (dom/text \"Customer Edit User\"))))))\r\n\r\n#?(:clj (defn admin-user-data [db company]\r\n          (vec (map (fn [[id user password admin]]\r\n                      {:id      id\r\n                       :user user\r\n                       :password password\r\n                       :admin admin})\r\n                    (vec (->>\r\n                           (dt/q\r\n                             '[:find ?id ?user ?password ?admin\r\n                               :in $ ?company\r\n                               :where\r\n                               [?e :customer/name ?company]\r\n                               [?u :author/company ?e]\r\n                               [?u :author/id ?id]\r\n                               [?u :author/name ?user]\r\n                               [?u :author/admin ?admin]\r\n                               [?p :password/user ?u]\r\n                               [?p :password/password ?password]]\r\n                             db company)))))))\r\n\r\n#?(:cljs (defn admin-user-table [data]\r\n           [:> DataTable {:allowRowEvents       true\r\n                          :selectableRows       true\r\n                          :onSelectedRowsChange (fn [v] (swap! !state-project assoc-in [:admin-user-selection] (js->clj (.-selectedRows v))))\r\n                          :columns              [{:name :User :sortable true :selector (fn [row] (.-user row))}\r\n                                                 {:name :Password :selector  (fn [row] (.-password row))}\r\n                                                 {:name :Admin :sortable true :selector (fn [row] (str (.-admin row)))}]\r\n                          :data                 data}]))\r\n(e/defn AdminPage [company]\r\n  (e/server\r\n    (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n      (binding [db (dt/db conn)]\r\n        (e/client\r\n          (let [state (e/watch !state-project)]\r\n            (swap! app.admin/!admin-state assoc-in [:table-clickers :customer :click] false)\r\n            (if (and (empty? (:admin-user-selection state)) (or (:delete (:buttons state)) (:edit (:buttons state))))\r\n               (swap! !state-project assoc-in [:buttons :message] \"Please Select User\")\r\n               (do\r\n                 (swap! !state-project assoc-in [:buttons :message] \"\")\r\n                 (if (:edit (:buttons state))\r\n                   (history/navigate! history/!history [:app.main/customer-admin-edit [(:admin-user-selection state) company]]))))\r\n\r\n            (if (:create (:buttons state))\r\n              (history/navigate! history/!history [:app.main/customer-create-author company]))\r\n\r\n            (dom/text (:message (:buttons state)))\r\n            (dom/h3 (dom/text \"Total registered user: \" (e/server (ffirst (dt/q '[:find (count ?e)\r\n                                                                                  :in $ ?company\r\n                                                                                  :where [?c :customer/name ?company]\r\n                                                                                  [?e :author/company ?c]] db company)))))\r\n            (with-reagent admin-user-table (clj->js (e/server (admin-user-data db company))))))))))\r\n"]}