shadow$provide.module$node_modules$react_offcanvas$node_modules$react$lib$ReactDOMInput=function(global,require,module,exports){function forceUpdateIfMounted(){this._rootNodeID&&ReactDOMInput.updateWrapper(this)}function _handleChange(event){var props=this._currentElement.props;event=LinkedValueUtils.executeOnChange(props,event);ReactUpdates.asap(forceUpdateIfMounted,this);var name=props.name;if("radio"===props.type&&null!=name){for(var queryRoot=props=ReactMount.getNode(this._rootNodeID);queryRoot.parentNode;)queryRoot=
queryRoot.parentNode;name=queryRoot.querySelectorAll("input[name\x3d"+JSON.stringify(""+name)+'][type\x3d"radio"]');for(queryRoot=0;queryRoot<name.length;queryRoot++){var otherNode=name[queryRoot];if(otherNode!==props&&otherNode.form===props.form){(otherNode=ReactMount.getID(otherNode))?void 0:invariant(!1,"ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");var otherInstance=instancesByReactID[otherNode];otherInstance?void 0:invariant(!1,"ReactDOMInput: Unknown radio button ID %s.",
otherNode);ReactUpdates.asap(forceUpdateIfMounted,otherInstance)}}}return event}var ReactDOMIDOperations=require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactDOMIDOperations"),LinkedValueUtils=require("module$node_modules$react_offcanvas$node_modules$react$lib$LinkedValueUtils"),ReactMount=require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactMount"),ReactUpdates=require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactUpdates"),assign=require("module$node_modules$react_offcanvas$node_modules$react$lib$Object_assign"),
invariant=require("module$node_modules$fbjs$lib$invariant"),instancesByReactID={},ReactDOMInput={getNativeProps:function(inst,props,context){context=LinkedValueUtils.getValue(props);var checked=LinkedValueUtils.getChecked(props);return assign({},props,{defaultChecked:void 0,defaultValue:void 0,value:null!=context?context:inst._wrapperState.initialValue,checked:null!=checked?checked:inst._wrapperState.initialChecked,onChange:inst._wrapperState.onChange})},mountWrapper:function(inst,props){LinkedValueUtils.checkPropTypes("input",
props,inst._currentElement._owner);var defaultValue=props.defaultValue;inst._wrapperState={initialChecked:props.defaultChecked||!1,initialValue:null!=defaultValue?defaultValue:null,onChange:_handleChange.bind(inst)}},mountReadyWrapper:function(inst){instancesByReactID[inst._rootNodeID]=inst},unmountWrapper:function(inst){delete instancesByReactID[inst._rootNodeID]},updateWrapper:function(inst){var props=inst._currentElement.props,checked=props.checked;null!=checked&&ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID,
"checked",checked||!1);props=LinkedValueUtils.getValue(props);null!=props&&ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID,"value",""+props)}};module.exports=ReactDOMInput}
//# sourceMappingURL=module$node_modules$react_offcanvas$node_modules$react$lib$ReactDOMInput.js.map
