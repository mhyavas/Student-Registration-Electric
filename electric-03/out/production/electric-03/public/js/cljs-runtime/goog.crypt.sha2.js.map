{
"version":3,
"file":"goog.crypt.sha2.js",
"lineCount":144,
"mappings":"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",
"sources":["goog/crypt/sha2.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Base class for SHA-2 cryptographic hash.\n *\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Some code similar to SHA1 are borrowed from sha1.js written by mschilder@.\n */\n\ngoog.provide('goog.crypt.Sha2');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.crypt.Hash');\n\n\n\n/**\n * SHA-2 cryptographic hash constructor.\n * This constructor should not be used directly to create the object. Rather,\n * one should use the constructor of the sub-classes.\n * @param {number} numHashBlocks The size of output in 16-byte blocks.\n * @param {!Array<number>} initHashBlocks The hash-specific initialization\n * @constructor\n * @extends {goog.crypt.Hash}\n * @struct\n */\ngoog.crypt.Sha2 = function(numHashBlocks, initHashBlocks) {\n  'use strict';\n  goog.crypt.Sha2.base(this, 'constructor');\n\n  this.blockSize = goog.crypt.Sha2.BLOCKSIZE_;\n\n  /**\n   * A chunk holding the currently processed message bytes. Once the chunk has\n   * 64 bytes, we feed it into computeChunk_ function and reset this.chunk_.\n   * @private {!Array<number>|!Uint8Array}\n   */\n  this.chunk_ = goog.global['Uint8Array'] ? new Uint8Array(this.blockSize) :\n                                            new Array(this.blockSize);\n\n  /**\n   * Current number of bytes in this.chunk_.\n   * @private {number}\n   */\n  this.inChunk_ = 0;\n\n  /**\n   * Total number of bytes in currently processed message.\n   * @private {number}\n   */\n  this.total_ = 0;\n\n\n  /**\n   * Holds the previous values of accumulated hash a-h in the computeChunk_\n   * function.\n   * @private {!Array<number>|!Int32Array}\n   */\n  this.hash_ = [];\n\n  /**\n   * The number of output hash blocks (each block is 4 bytes long).\n   * @private {number}\n   */\n  this.numHashBlocks_ = numHashBlocks;\n\n  /**\n   * @private {!Array<number>} initHashBlocks\n   */\n  this.initHashBlocks_ = initHashBlocks;\n\n  /**\n   * Temporary array used in chunk computation.  Allocate here as a\n   * member rather than as a local within computeChunk_() as a\n   * performance optimization to reduce the number of allocations and\n   * reduce garbage collection.\n   * @private {!Int32Array|!Array<number>}\n   */\n  this.w_ = goog.global['Int32Array'] ? new Int32Array(64) : new Array(64);\n\n  if (goog.crypt.Sha2.Kx_ === undefined) {\n    // This is the first time this constructor has been called.\n    if (goog.global['Int32Array']) {\n      // Typed arrays exist\n      goog.crypt.Sha2.Kx_ = new Int32Array(goog.crypt.Sha2.K_);\n    } else {\n      // Typed arrays do not exist\n      goog.crypt.Sha2.Kx_ = goog.crypt.Sha2.K_;\n    }\n  }\n\n  this.reset();\n};\ngoog.inherits(goog.crypt.Sha2, goog.crypt.Hash);\n\n\n/**\n * The block size\n * @private {number}\n */\ngoog.crypt.Sha2.BLOCKSIZE_ = 512 / 8;\n\n\n/**\n * Contains data needed to pad messages less than BLOCK_SIZE_ bytes.\n * @private {!Array<number>}\n */\ngoog.crypt.Sha2.PADDING_ = goog.array.concat(\n    128, goog.array.repeat(0, goog.crypt.Sha2.BLOCKSIZE_ - 1));\n\n\n/** @override */\ngoog.crypt.Sha2.prototype.reset = function() {\n  'use strict';\n  this.inChunk_ = 0;\n  this.total_ = 0;\n  this.hash_ = goog.global['Int32Array'] ?\n      new Int32Array(this.initHashBlocks_) :\n      goog.array.clone(this.initHashBlocks_);\n};\n\n\n/**\n * Helper function to compute the hashes for a given 512-bit message chunk.\n * @private\n */\ngoog.crypt.Sha2.prototype.computeChunk_ = function() {\n  'use strict';\n  var chunk = this.chunk_;\n  goog.asserts.assert(chunk.length == this.blockSize);\n  var rounds = 64;\n\n  // Divide the chunk into 16 32-bit-words.\n  var w = this.w_;\n  var index = 0;\n  var offset = 0;\n  while (offset < chunk.length) {\n    w[index++] = (chunk[offset] << 24) | (chunk[offset + 1] << 16) |\n        (chunk[offset + 2] << 8) | (chunk[offset + 3]);\n    offset = index * 4;\n  }\n\n  // Extend the w[] array to be the number of rounds.\n  for (var i = 16; i < rounds; i++) {\n    var w_15 = w[i - 15] | 0;\n    var s0 = ((w_15 >>> 7) | (w_15 << 25)) ^ ((w_15 >>> 18) | (w_15 << 14)) ^\n        (w_15 >>> 3);\n    var w_2 = w[i - 2] | 0;\n    var s1 = ((w_2 >>> 17) | (w_2 << 15)) ^ ((w_2 >>> 19) | (w_2 << 13)) ^\n        (w_2 >>> 10);\n\n    // As a performance optimization, construct the sum a pair at a time\n    // with casting to integer (bitwise OR) to eliminate unnecessary\n    // double<->integer conversions.\n    var partialSum1 = ((w[i - 16] | 0) + s0) | 0;\n    var partialSum2 = ((w[i - 7] | 0) + s1) | 0;\n    w[i] = (partialSum1 + partialSum2) | 0;\n  }\n\n  var a = this.hash_[0] | 0;\n  var b = this.hash_[1] | 0;\n  var c = this.hash_[2] | 0;\n  var d = this.hash_[3] | 0;\n  var e = this.hash_[4] | 0;\n  var f = this.hash_[5] | 0;\n  var g = this.hash_[6] | 0;\n  var h = this.hash_[7] | 0;\n  for (var i = 0; i < rounds; i++) {\n    var S0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^\n        ((a >>> 22) | (a << 10));\n    var maj = ((a & b) ^ (a & c) ^ (b & c));\n    var t2 = (S0 + maj) | 0;\n    var S1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^\n        ((e >>> 25) | (e << 7));\n    var ch = ((e & f) ^ ((~e) & g));\n\n    // As a performance optimization, construct the sum a pair at a time\n    // with casting to integer (bitwise OR) to eliminate unnecessary\n    // double<->integer conversions.\n    var partialSum1 = (h + S1) | 0;\n    var partialSum2 = (ch + (goog.crypt.Sha2.Kx_[i] | 0)) | 0;\n    var partialSum3 = (partialSum2 + (w[i] | 0)) | 0;\n    var t1 = (partialSum1 + partialSum3) | 0;\n\n    h = g;\n    g = f;\n    f = e;\n    e = (d + t1) | 0;\n    d = c;\n    c = b;\n    b = a;\n    a = (t1 + t2) | 0;\n  }\n\n  this.hash_[0] = (this.hash_[0] + a) | 0;\n  this.hash_[1] = (this.hash_[1] + b) | 0;\n  this.hash_[2] = (this.hash_[2] + c) | 0;\n  this.hash_[3] = (this.hash_[3] + d) | 0;\n  this.hash_[4] = (this.hash_[4] + e) | 0;\n  this.hash_[5] = (this.hash_[5] + f) | 0;\n  this.hash_[6] = (this.hash_[6] + g) | 0;\n  this.hash_[7] = (this.hash_[7] + h) | 0;\n};\n\n\n/** @override */\ngoog.crypt.Sha2.prototype.update = function(message, opt_length) {\n  'use strict';\n  if (opt_length === undefined) {\n    opt_length = message.length;\n  }\n  // Process the message from left to right up to |opt_length| bytes.\n  // When we get a 512-bit chunk, compute the hash of it and reset\n  // this.chunk_. The message might not be multiple of 512 bits so we\n  // might end up with a chunk that is less than 512 bits. We store\n  // such partial chunk in this.chunk_ and it will be filled up later\n  // in digest().\n  var n = 0;\n  var inChunk = this.inChunk_;\n\n  // The input message could be either byte array of string.\n  if (typeof message === 'string') {\n    while (n < opt_length) {\n      this.chunk_[inChunk++] = message.charCodeAt(n++);\n      if (inChunk == this.blockSize) {\n        this.computeChunk_();\n        inChunk = 0;\n      }\n    }\n  } else if (goog.isArrayLike(message)) {\n    while (n < opt_length) {\n      var b = message[n++];\n      if (!('number' == typeof b && 0 <= b && 255 >= b && b == (b | 0))) {\n        throw new Error('message must be a byte array');\n      }\n      this.chunk_[inChunk++] = b;\n      if (inChunk == this.blockSize) {\n        this.computeChunk_();\n        inChunk = 0;\n      }\n    }\n  } else {\n    throw new Error('message must be string or array');\n  }\n\n  // Record the current bytes in chunk to support partial update.\n  this.inChunk_ = inChunk;\n\n  // Record total message bytes we have processed so far.\n  this.total_ += opt_length;\n};\n\n\n/** @override */\ngoog.crypt.Sha2.prototype.digest = function() {\n  'use strict';\n  var digest = [];\n  var totalBits = this.total_ * 8;\n\n  // Append pad 0x80 0x00*.\n  if (this.inChunk_ < 56) {\n    this.update(goog.crypt.Sha2.PADDING_, 56 - this.inChunk_);\n  } else {\n    this.update(\n        goog.crypt.Sha2.PADDING_, this.blockSize - (this.inChunk_ - 56));\n  }\n\n  // Append # bits in the 64-bit big-endian format.\n  for (var i = 63; i >= 56; i--) {\n    this.chunk_[i] = totalBits & 255;\n    totalBits /= 256;  // Don't use bit-shifting here!\n  }\n  this.computeChunk_();\n\n  // Finally, output the result digest.\n  var n = 0;\n  for (var i = 0; i < this.numHashBlocks_; i++) {\n    for (var j = 24; j >= 0; j -= 8) {\n      digest[n++] = ((this.hash_[i] >> j) & 255);\n    }\n  }\n  return digest;\n};\n\n\n/**\n * Constants used in SHA-2.\n * @const\n * @private {!Array<number>}\n */\ngoog.crypt.Sha2.K_ = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1,\n  0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786,\n  0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n  0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b,\n  0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,\n  0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\n\n/**\n * Sha2.K as an Int32Array if this JS supports typed arrays; otherwise,\n * the same array as Sha2.K.\n *\n * The compiler cannot remove an Int32Array, even if it is not needed\n * (There are certain cases where creating an Int32Array is not\n * side-effect free).  Instead, the first time we construct a Sha2\n * instance, we convert or assign Sha2.K as appropriate.\n * @private {undefined|!Array<number>|!Int32Array}\n */\ngoog.crypt.Sha2.Kx_;\n"],
"names":["goog","provide","require","crypt","Sha2","goog.crypt.Sha2","numHashBlocks","initHashBlocks","base","blockSize","BLOCKSIZE_","chunk_","global","Uint8Array","Array","inChunk_","total_","hash_","numHashBlocks_","initHashBlocks_","w_","Int32Array","Kx_","undefined","K_","reset","inherits","Hash","PADDING_","array","concat","repeat","prototype","goog.crypt.Sha2.prototype.reset","clone","computeChunk_","goog.crypt.Sha2.prototype.computeChunk_","chunk","asserts","assert","length","rounds","w","index","offset","i","w_15","s0","w_2","s1","partialSum1","partialSum2","a","b","c","d","e","f","g","h","S0","maj","t2","S1","ch","partialSum3","t1","update","goog.crypt.Sha2.prototype.update","message","opt_length","n","inChunk","charCodeAt","isArrayLike","Error","digest","goog.crypt.Sha2.prototype.digest","totalBits","j"]
}
