{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$getNodeForCharacterOffset.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,oFAAA,CAAyG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAoBjJC,QAASA,YAAW,CAACC,IAAD,CAAO,CACzB,IAAA,CAAOA,IAAP,EAAeA,IAAKC,CAAAA,UAApB,CAAA,CACED,IAAA,CAAOA,IAAKC,CAAAA,UAEd,OAAOD,KAJkB,CAqD3BH,MAAOC,CAAAA,OAAP,CAvBAI,QAAkC,CAACC,IAAD,CAAOC,MAAP,CAAe,CAC/C,IAAIJ,KAAOD,WAAA,CAAYI,IAAZ,CACPE,KAAAA,CAAY,CAGhB,KAFA,IAAIC,OAEJ,CAAON,IAAP,CAAA,CAAa,CACX,GAAsB,CAAtB,GAAIA,IAAKO,CAAAA,QAAT,CAAyB,CACvBD,OAAA,CAAUD,IAAV,CAAsBL,IAAKQ,CAAAA,WAAYC,CAAAA,MAEvC,IAAIJ,IAAJ,EAAiBD,MAAjB,EAA2BE,OAA3B,EAAsCF,MAAtC,CACE,MAAO,CACCJ,IADD,CAELI,OAAQA,MAARA,CAAiBC,IAFZ,CAMTA,KAAA,CAAYC,OAVW,CAtBC,CAAA,CAAA,CAC5B,IAAA,CAAON,IAAP,CAAA,CAAa,CACX,GAAIA,IAAKU,CAAAA,WAAT,CAAsB,CACpB,IAAA,CAAOV,IAAKU,CAAAA,WAAZ;MAAA,CADoB,CAGtBV,IAAA,CAAOA,IAAKW,CAAAA,UAJD,CADe,IAAA,CAAA,IAAA,EAAA,CAmC1BX,IAAA,CAAOD,WAAA,CAAY,IAAZ,CAdI,CALkC,CAlDgG;",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/getNodeForCharacterOffset.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$getNodeForCharacterOffset\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getNodeForCharacterOffset\n */\n\n'use strict';\n\n/**\n * Given any node return the first leaf node without children.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {DOMElement|DOMTextNode}\n */\nfunction getLeafNode(node) {\n  while (node && node.firstChild) {\n    node = node.firstChild;\n  }\n  return node;\n}\n\n/**\n * Get the next sibling within a container. This will walk up the\n * DOM if a node's siblings have been exhausted.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {?DOMElement|DOMTextNode}\n */\nfunction getSiblingNode(node) {\n  while (node) {\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n    node = node.parentNode;\n  }\n}\n\n/**\n * Get object describing the nodes which contain characters at offset.\n *\n * @param {DOMElement|DOMTextNode} root\n * @param {number} offset\n * @return {?object}\n */\nfunction getNodeForCharacterOffset(root, offset) {\n  var node = getLeafNode(root);\n  var nodeStart = 0;\n  var nodeEnd = 0;\n\n  while (node) {\n    if (node.nodeType === 3) {\n      nodeEnd = nodeStart + node.textContent.length;\n\n      if (nodeStart <= offset && nodeEnd >= offset) {\n        return {\n          node: node,\n          offset: offset - nodeStart\n        };\n      }\n\n      nodeStart = nodeEnd;\n    }\n\n    node = getLeafNode(getSiblingNode(node));\n  }\n}\n\nmodule.exports = getNodeForCharacterOffset;\n};"],
"names":["shadow$provide","global","require","module","exports","getLeafNode","node","firstChild","getNodeForCharacterOffset","root","offset","nodeStart","nodeEnd","nodeType","textContent","length","nextSibling","parentNode"]
}
