{
"version":3,
"file":"module$node_modules$fbjs$lib$createNodesFromMarkup.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,kDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiB3GC,MAAAA,CAAuBH,OAAA,CAAQ,mDAAR,CAE3B,KAAII,qBAAuBJ,OAAA,CAAQ,mDAAR,CAA3B,CACIK,cAAgBL,OAAA,CAAQ,4CAAR,CADpB,CAEIM,UAAYN,OAAA,CAAQ,wCAAR,CAFhB,CAOIO,UAAYJ,MAAqBK,CAAAA,SAArB,CAAiCC,QAASC,CAAAA,aAAT,CAAuB,KAAvB,CAAjC,CAAiE,IAPjF,CAYIC,gBAAkB,YAqDtBV,OAAOC,CAAAA,OAAP,CA9BAU,QAA8B,CAACC,MAAD;AAASC,YAAT,CAAuB,CACnD,IAAIC,KAAOR,SACRA,UAAH,CAA4IS,IAAAA,EAA5I,CAAuDV,SAAA,CAAU,CAAA,CAAV,CAAiB,6CAAjB,CACvD,KAAIW,QAGJ,IADIC,QACJ,EAnBA,QAmBA,EApBIC,QAoBJ,CAH2BN,MAjBAO,CAAAA,KAAP,CAAaT,eAAb,CAoBpB,GAnBwBQ,QAAA,CAAc,CAAd,CAAiBE,CAAAA,WAAjB,EAmBxB,GADuBhB,aAAA,CAAcY,QAAd,CACvB,CAIE,IAHAF,IAAKO,CAAAA,SAEDC,CAFaL,QAAA,CAAK,CAAL,CAEbK,CAFuBV,MAEvBU,CAFgCL,QAAA,CAAK,CAAL,CAEhCK,CAAAA,MAAAA,CAAYL,QAAA,CAAK,CAAL,CAChB,CAAOK,MAAA,EAAP,CAAA,CACER,IAAA,CAAOA,IAAKS,CAAAA,SALhB,KAQET,KAAKO,CAAAA,SAAL,CAAiBT,MAGfY,OAAAA,CAAUV,IAAKW,CAAAA,oBAAL,CAA0B,QAA1B,CACVD,OAAQE,CAAAA,MAAZ,GACGb,YAAD,CAAmKE,IAAAA,EAAnK,CAAwDV,SAAA,CAAU,CAAA,CAAV,CAAiB,yEAAjB,CACxD;AAAAF,oBAAA,CAAqBqB,MAArB,CAA8BG,CAAAA,OAA9B,CAAsCd,YAAtC,CAFF,CAMA,KADIe,YACJ,CADYzB,oBAAA,CAAqBW,IAAKe,CAAAA,UAA1B,CACZ,CAAOf,IAAKS,CAAAA,SAAZ,CAAA,CACET,IAAKgB,CAAAA,WAAL,CAAiBhB,IAAKS,CAAAA,SAAtB,CAEF,OAAOK,aA3B4C,CAtD0D;",
"sources":["node_modules/fbjs/lib/createNodesFromMarkup.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fbjs$lib$createNodesFromMarkup\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createNodesFromMarkup\n * @typechecks\n */\n\n/*eslint-disable fb-www/unsafe-html*/\n\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar createArrayFromMixed = require('./createArrayFromMixed');\nvar getMarkupWrap = require('./getMarkupWrap');\nvar invariant = require('./invariant');\n\n/**\n * Dummy container used to render all markup.\n */\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Pattern used by `getNodeName`.\n */\nvar nodeNamePattern = /^\\s*<(\\w+)/;\n\n/**\n * Extracts the `nodeName` of the first element in a string of markup.\n *\n * @param {string} markup String of markup.\n * @return {?string} Node name of the supplied markup.\n */\nfunction getNodeName(markup) {\n  var nodeNameMatch = markup.match(nodeNamePattern);\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();\n}\n\n/**\n * Creates an array containing the nodes rendered from the supplied markup. The\n * optionally supplied `handleScript` function will be invoked once for each\n * <script> element that is rendered. If no `handleScript` function is supplied,\n * an exception is thrown if any <script> elements are rendered.\n *\n * @param {string} markup A string of valid HTML markup.\n * @param {?function} handleScript Invoked once for each rendered <script>.\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.\n */\nfunction createNodesFromMarkup(markup, handleScript) {\n  var node = dummyNode;\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;\n  var nodeName = getNodeName(markup);\n\n  var wrap = nodeName && getMarkupWrap(nodeName);\n  if (wrap) {\n    node.innerHTML = wrap[1] + markup + wrap[2];\n\n    var wrapDepth = wrap[0];\n    while (wrapDepth--) {\n      node = node.lastChild;\n    }\n  } else {\n    node.innerHTML = markup;\n  }\n\n  var scripts = node.getElementsByTagName('script');\n  if (scripts.length) {\n    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;\n    createArrayFromMixed(scripts).forEach(handleScript);\n  }\n\n  var nodes = createArrayFromMixed(node.childNodes);\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n  return nodes;\n}\n\nmodule.exports = createNodesFromMarkup;\n};"],
"names":["shadow$provide","global","require","module","exports","ExecutionEnvironment","createArrayFromMixed","getMarkupWrap","invariant","dummyNode","canUseDOM","document","createElement","nodeNamePattern","createNodesFromMarkup","markup","handleScript","node","undefined","nodeName","wrap","nodeNameMatch","match","toLowerCase","innerHTML","wrapDepth","lastChild","scripts","getElementsByTagName","length","forEach","nodes","childNodes","removeChild"]
}
