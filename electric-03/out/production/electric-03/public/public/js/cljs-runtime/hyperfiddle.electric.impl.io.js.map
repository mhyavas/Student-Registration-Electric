{"version":3,"sources":["hyperfiddle/electric/impl/io.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","com.cognitect.transit.types/UUID","hyperfiddle.electric.impl.io/default-write-handler","cognitect.transit.write_handler","x","hyperfiddle.electric.impl.io/-last-unserializable-for-repl","js/console.log","cljs.core.pr_str","cljs.core/type","_","hyperfiddle.electric.impl.io/->cache","size","G__43784","arr43786","cljs.core/identity","cljs.core.object_array","hyperfiddle.electric.impl.io/cache-add","cache","k","v","i","cljs.core/count","cljs.core._EQ_","hyperfiddle.electric.impl.array-fields/get","arr43792","widx","p1__43790#","hyperfiddle.electric.impl.array-fields/getswap","cljs.core/mod","arr43796","hyperfiddle.electric.impl.io/cache-get","hyperfiddle.electric.impl.io/cache->map","ac","cljs.core/transient","cljs.core.assoc_BANG_","cljs.core/persistent!","hyperfiddle.electric.impl.io/!ex-cache","hyperfiddle.electric.impl.io/save-original-ex!","fi","id","hyperfiddle.electric.debug/ex-id","temp__5808__auto__","cause","cljs.core/ex-cause","js/hyperfiddle.electric.FailureInfo","hyperfiddle.electric.impl.io/get-original-ex","hyperfiddle.electric.impl.io/*write-handlers*","hyperfiddle.electric.impl.io/failure-writer","err","js/missionary.Cancelled","js/hyperfiddle.electric.Pending","js/hyperfiddle.electric.Remote","hyperfiddle.electric.debug/serializable","cljs.core/ex-data","cljs.core/ex-message","hyperfiddle.electric.impl.io/write-opts","cljs.core.merge","js/hyperfiddle.electric.Failure","hyperfiddle.electric.impl.io/*read-handlers*","hyperfiddle.electric.impl.io/failure-reader","cognitect.transit/read-handler","p__43813","vec__43814","seq__43815","cljs.core/seq","first__43816","cljs.core/first","cljs.core/next","tag","args","G__43817","cljs.core/Keyword","js/Error","vec__43820","cljs.core.nth","message","data","hyperfiddle.electric.debug.ex_info_STAR_","vec__43825","or__5045__auto__","hyperfiddle.electric.impl.io/read-opts","hyperfiddle.electric.impl.io/set-ints","cljs.core.partial","cljs.core/reduce-kv","r","n","offset","G__43837","hyperfiddle.electric.impl.io/encode-numbers","xs","required","G__43840","js/ArrayBuffer","js/DataView","hyperfiddle.electric.impl.io/decode-numbers","b","cljs.core/vec","hyperfiddle.electric.impl.io/t_hyperfiddle$electric$impl$io43843","rf","l","G__43855","G__43856","!cache","cljs.core.atom","hyperfiddle.electric.impl.io/transit-writer","cljs.core.swap_BANG_","p__43865","map__43866","cljs.core/--destructure-map","cljs.core.get","write-handlers","writer","cljs.core.assoc","cognitect.transit.writer","hyperfiddle.electric.impl.io/encode","cognitect.transit/write","hyperfiddle.electric.impl.io/transit-reader","p__43874","map__43875","read-handlers","reader","cognitect.transit.reader","hyperfiddle.electric.impl.io/decode","s","cognitect.transit/read","hyperfiddle.electric.impl.io/decode-str","e43883","G__43884","js/console.debug","t","cljs.core.ex_info","hyperfiddle.electric.impl.io/chunk-size","hyperfiddle.electric.impl.io/message-reader","?read","cr43893-state","cr43893-place-2","cr43893-place-4","cr43893-place-8","cr43893-place-9","cr43893-place-10","cr43893-place-11","cr43893-place-12","cr43893-place-13","cljs.core/IVector","cr43893-place-14","cr43893-block-4","cr43893-exception","e43990","cr43893-place-7","e44000","cr43893-place-22","cr43893-place-30","missionary.core/unpark","cr43893-place-31","e44002","cr43893-place-29","cr43893-block-6","missionary.core/park","e44005","cr43893-place-5","cr43893-place-6","cr43893-block-9","cr43893-block-3","e44007","cr43893-place-32","cr43893-place-33","cr43893-place-34","cr43893-block-8","e44009","cr43893-place-15","cr43893-place-16","cr43893-place-17","cr43893-place-18","cr43893-place-19","cr43893-place-20","cr43893-place-21","cr43893-place-23","cr43893-place-24","cr43893-place-25","cr43893-place-26","cr43893-place-27","cr43893-place-28","cr43893-block-7","cr43893-block-5","e44013","cr43893-place-3","cr43893-block-2","e44029","cr43893-place-35","cr43893-place-36","cr43893-block-10","e44030","cr43893-place-0","cr43893-place-1","cr43893-block-1","e44036","cr43893-place-37","cr43893-place-38","cr43893-place-39","cr43893-place-40","cr43893-place-41","cr43893-place-42","e44042","cloroutine.impl/coroutine","G__44048","cr43893-block-0","missionary.core/sp-run","G__44038","fexpr__44037","G__44046","G__44047","fexpr__44045","cljs.core/conj!","G__44044","fexpr__44043","G__44035","fexpr__44034","G__44032","G__44033","fexpr__44031","G__43996","fexpr__43995","G__44017","fexpr__44016","G__44019","G__44020","G__44021","fexpr__44018","cljs.core/reduce","G__44023","fexpr__44022","G__44012","fexpr__44010","p1__44057#","hyperfiddle.electric.impl.io/message-writer","write","cr44060-state","cr44060-place-46","cr44060-place-47","cr44060-place-48","cr44060-block-8","cr44060-exception","e44160","cr44060-place-20","cr44060-place-28","cr44060-place-29","cr44060-place-30","cr44060-block-5","e44163","cr44060-block-4","cr44060-place-55","cr44060-place-56","cr44060-place-57","cr44060-place-58","cr44060-place-59","cr44060-place-60","cr44060-block-10","e44166","cr44060-place-49","cr44060-place-50","cr44060-place-51","cr44060-place-52","cr44060-place-53","cr44060-place-54","cr44060-block-11","cr44060-block-9","e44171","cr44060-block-14","e44174","cr44060-place-9","e44175","cr44060-place-61","cr44060-block-13","e44178","cr44060-place-4","cr44060-place-5","cr44060-place-6","cr44060-place-7","cr44060-place-8","cr44060-block-7","cr44060-block-2","e44180","cr44060-place-0","cr44060-place-1","cr44060-place-2","cr44060-place-3","cr44060-block-1","e44181","cr44060-place-10","cr44060-place-11","cr44060-place-12","cr44060-place-13","cr44060-place-14","cr44060-place-15","cr44060-place-16","cr44060-place-17","cr44060-place-18","cr44060-place-19","cr44060-place-21","cr44060-place-22","cr44060-place-23","cr44060-place-24","cr44060-place-25","cr44060-place-26","cr44060-place-27","cr44060-block-3","e44186","cr44060-place-40","cr44060-place-41","cr44060-place-42","cr44060-place-43","cr44060-block-6","e44196","cr44060-place-44","cr44060-place-45","e44199","cr44060-place-62","cr44060-place-63","cr44060-place-64","cr44060-place-65","cr44060-place-66","cr44060-place-67","cr44060-place-68","cr44060-place-69","cr44060-place-70","cr44060-place-71","cr44060-block-12","e44200","cr44060-place-31","cr44060-place-32","cr44060-place-33","cr44060-place-34","cr44060-place-35","cr44060-place-36","cljs.core/IMap","cr44060-place-37","cr44060-place-38","cr44060-place-39","e44210","cr44060-place-72","cr44060-place-73","cr44060-place-74","cr44060-place-75","cr44060-place-76","e44217","G__44222","cr44060-block-0","G__44185","fexpr__44184","G__44183","fexpr__44182","cljs.core/pop","G__44188","fexpr__44187","G__44190","fexpr__44189","G__44192","fexpr__44191","G__44194","G__44195","fexpr__44193","G__44198","fexpr__44197","G__44165","fexpr__44164","G__44213","G__44214","G__44215","fexpr__44212","cljs.core/ex-info","G__44162","fexpr__44161","cljs.core/peek","G__44173","fexpr__44172","G__44208","fexpr__44207","G__44206","fexpr__44205","G__44202","G__44203","G__44204","fexpr__44201","cljs.core/subvec","G__44219","G__44220","fexpr__44218","G__44170","fexpr__44169","G__44168","fexpr__44167","hyperfiddle.electric.impl.io/decoder","G__44223","cljs.core.conj","cljs.core.into","hyperfiddle.electric.impl.io/encoder","cljs.core.reduce","cljs.core.eduction","cljs.core.map","cljs.core.partition_all","G__44224","G__44225","G__44226","var_args","G__44228","hyperfiddle.electric.impl.io/foreach"],"sourcesContent":[";; Facilities for encoding/decoding of Electric protocol messages.\r\n;; * Data frames can be arbitrary clojure data or Electric failures. Serialization is done via transit json, the failure\r\n;; error is preserved if it's an instance of `hyperfiddle.electric.Pending` or `hyperfiddle.electric.Cancelled`, otherwise\r\n;; the error is logged and turned into an instance of `hyperfiddle.electric.Remote`.\r\n;; * Control frames are vectors of signed integers. Serialization is the concatenation of the binary representation of\r\n;; these numbers as fixed-length 32-bit, big endian.\r\n\r\n(ns ^:no-doc hyperfiddle.electric.impl.io\r\n  (:require [missionary.core :as m]\r\n            [cognitect.transit :as t]\r\n            #?(:clj [clojure.tools.logging :as log])\r\n            [hyperfiddle.electric.debug :as dbg]\r\n            [hyperfiddle.rcf :as rcf :refer [tests with tap %]]\r\n            #?(:cljs [com.cognitect.transit.types])\r\n            [hyperfiddle.electric.impl.array-fields :as a])\r\n  (:import (missionary Cancelled)\r\n           (hyperfiddle.electric Failure Pending Remote FailureInfo)\r\n           #?(:clj (java.nio ByteBuffer))\r\n           #?(:clj (java.io ByteArrayInputStream ByteArrayOutputStream))\r\n           #?(:clj (clojure.lang IReduceInit))))\r\n\r\n#?(:cljs (extend-type com.cognitect.transit.types/UUID IUUID)) ; https://github.com/hyperfiddle/hyperfiddle/issues/728\r\n\r\n(def default-write-handler ; Intercepts unserializable values, logs and return nil\r\n  (t/write-handler ; Adapted from `com.cognitect.transit.impl.WriteHandlers.NullWriteHandler`\r\n    (fn [x]\r\n      (def -last-unserializable-for-repl x)\r\n      (#?(:clj log/info, :cljs js/console.log) \"Unserializable reference transfer:\" (pr-str (type x)) (str x))\r\n      \"_\")\r\n    (fn [x] nil)\r\n    (fn [_] \"\")))\r\n\r\n(defn ->cache \"Builds a minimal, cljc map/bounded-queue cache.\r\n  One slot per key (map).\r\n  Reaching `size` pops oldest value (bounded-queue).\" [size]\r\n  (doto (object-array (inc (* size 2))) (a/set (* size 2) 0)))\r\n(defn cache-add [cache k v]\r\n  (when-not (loop [i 0]\r\n              (when (< i (dec (count cache)))\r\n                (if (= k (a/get cache i))\r\n                  (do (a/set cache (inc i) v) true)\r\n                  (recur (+ i 2)))))\r\n    (let [widx (a/getswap cache (dec (count cache)) #(mod (+ % 2) (dec (count cache))))]\r\n      (a/set cache widx k, (inc widx) v))))\r\n(defn cache-get [cache k]\r\n  (loop [i 0]\r\n    (when (< i (dec (count cache)))\r\n      (if (= k (a/get cache i))\r\n        (a/get cache (inc i))\r\n        (recur (+ i 2))))))\r\n(defn cache->map [cache]\r\n  (loop [i 0, ac (transient {})]\r\n    (if (< i (dec (count cache)))\r\n      (recur (+ i 2) (assoc! ac (a/get cache i) (a/get cache (inc i))))\r\n      (persistent! ac))))\r\n\r\n(tests \"keyed cache\"\r\n  (def !c (->cache 1))\r\n  (cache-add !c 1 2) (cache-get !c 1) := 2\r\n  (cache-add !c 1 3) (cache-get !c 1) := 3\r\n  (cache-add !c 2 4) (cache-get !c 2) := 4\r\n  (cache->map !c) := {2 4}\r\n\r\n  \"size 2\"\r\n  (def !c (->cache 2))\r\n  (cache-add !c 1 1)\r\n  (cache-add !c 2 2)\r\n  (cache-add !c 2 2)\r\n  (cache->map !c) := {1 1, 2 2})\r\n\r\n(def !ex-cache (->cache 16))\r\n(defn save-original-ex! [fi]\r\n  (let [id (dbg/ex-id fi)]\r\n    (when-some [cause (ex-cause fi)]\r\n      (when-not (instance? FailureInfo cause)\r\n        (cache-add !ex-cache id cause)))\r\n    id))\r\n(defn get-original-ex [id] (cache-get !ex-cache id))\r\n\r\n(def ^:dynamic *write-handlers* nil)\r\n\r\n(def failure-writer (t/write-handler\r\n                      (fn [_] \"failure\")\r\n                      (fn [x]\r\n                        (let [err (.-error ^Failure x)]\r\n                          (cond (instance? Cancelled err) [:cancelled]\r\n                                (instance? Pending err)   [:pending]\r\n                                (instance? Remote err)    [:remote (dbg/serializable (ex-data err))]\r\n                                :else                     [:exception (ex-message err) (dbg/serializable (ex-data err))\r\n                                                           (save-original-ex! err)])))))\r\n\r\n(defn write-opts []\r\n  {:handlers (merge *write-handlers*\r\n               {Failure failure-writer\r\n                :default default-write-handler}) ; cljs\r\n   :default-handler default-write-handler}) ; clj\r\n\r\n(def ^:dynamic *read-handlers* nil)\r\n\r\n(def failure-reader (t/read-handler\r\n                      (fn [[tag & args]]\r\n                        (case tag\r\n                          :exception (let [[message data id] args]\r\n                                       (Failure. (dbg/ex-info* message data id nil)))\r\n                          :remote    (let [[data] args]\r\n                                       (Failure. (dbg/ex-info* \"Remote error\" (or data {}))))\r\n                          :pending   (Failure. (Pending.))\r\n                          :cancelled (Failure. (Cancelled.))))))\r\n\r\n(defn read-opts [] {:handlers (merge *read-handlers* {\"failure\" failure-reader})})\r\n\r\n(def set-ints\r\n  (partial reduce-kv\r\n    (fn [r i n]\r\n      (let [offset (bit-shift-left i 2)]\r\n        #?(:clj  (.putInt ^ByteBuffer r offset n)\r\n           :cljs (doto r (.setInt32 offset n)))))))\r\n\r\n(defn encode-numbers\r\n  \"Encode a control frame to a binary segment.\"\r\n  [xs]\r\n  (let [required (bit-shift-left (count xs) 2)] ; size of bytebuffer is 4 \u00d7 (count xs), so shift by 2\r\n    #?(:clj (set-ints (ByteBuffer/allocate required) xs)\r\n       :cljs (doto (js/ArrayBuffer. required)\r\n               (-> (js/DataView.) (set-ints xs))))))\r\n\r\n(defn decode-numbers\r\n  \"Decode a control frame from a binary segment.\"\r\n  [b]\r\n  (vec\r\n    (reify\r\n      #?(:clj IReduceInit :cljs IReduce)\r\n      #?(:clj (reduce [_ rf r]\r\n                (let [l (.limit ^ByteBuffer b)]\r\n                  (loop [r r, i (int 0)]\r\n                    (if (< i l)\r\n                      (recur (rf r (.getInt ^ByteBuffer b i))\r\n                        (unchecked-add-int i 4)) r))))\r\n         :cljs (-reduce [_ rf r]\r\n                 (let [l (.-byteLength b)\r\n                       v (js/DataView. b)]\r\n                   (loop [r r, i 0]\r\n                     (if (< i l)\r\n                       (recur (rf r (.getInt32 v i))\r\n                         (+ i 4)) r))))))))\r\n\r\n\r\n;; #?(:cljs (def transit-writer (t/writer :json (write-opts))))\r\n#?(:cljs (let [!cache (atom {:write-handlers *write-handlers*, :writer nil})]\r\n           (defn transit-writer []\r\n             (:writer (swap! !cache (fn [{:keys [write-handlers writer] :as cache}]\r\n                                      (if (= write-handlers *write-handlers*)\r\n                                        (if writer\r\n                                          cache\r\n                                          (assoc cache :writer (t/writer :json (write-opts))))\r\n                                        {:write-handlers *write-handlers*\r\n                                         :writer         (t/writer :json (write-opts))})))))))\r\n\r\n(defn encode\r\n  \"Encode a data frame to transit json\"\r\n  [x]\r\n  #?(:clj (let [out (ByteArrayOutputStream.)]\r\n            (t/write (t/writer out :json (write-opts)) x)\r\n            (.toString out))\r\n     :cljs (t/write (transit-writer) x)))\r\n\r\n;; #?(:cljs (def transit-reader (t/reader :json (read-opts))))\r\n#?(:cljs (let [!cache (atom {:read-handlers *read-handlers*, :reader nil})]\r\n           (defn transit-reader []\r\n             (:reader (swap! !cache (fn [{:keys [read-handlers reader] :as cache}]\r\n                                      (if (= read-handlers *read-handlers*)\r\n                                        (if reader\r\n                                          cache\r\n                                          (assoc cache :reader (t/reader :json (read-opts))))\r\n                                        {:read-handlers *read-handlers*\r\n                                         :reader        (t/reader :json (read-opts))})))))))\r\n\r\n\r\n(defn decode\r\n  \"Decode a data frame from transit json\"\r\n  [^String s]\r\n  #?(:clj (t/read (t/reader (ByteArrayInputStream. (.getBytes s \"UTF-8\")) :json (read-opts)))\r\n     :cljs (t/read (transit-reader) s)))\r\n\r\n(defn decode-str [x]\r\n  (try (doto (decode x) (->> (#?(:clj log/trace, :cljs js/console.debug) \"\ud83d\udd3d\")))\r\n    (catch #?(:clj Throwable :cljs :default) t\r\n      (throw (ex-info \"Failed to decode\" {:value x} t)))))\r\n\r\n(tests \"FailureInfo\"\r\n  (def cause (ex-info \"boom\" {}))\r\n  (def ex (dbg/ex-info* \"x\" {} cause))\r\n  (def sent (-> ex Failure. encode decode .-error))\r\n  \"keeps the ID across the wire\"\r\n  (dbg/ex-id ex) := (dbg/ex-id sent)\r\n  \"can restore cause\"\r\n  (get-original-ex (dbg/ex-id sent)) := cause\r\n  nil)\r\n\r\n; Jetty rejects websocket payloads larger than 65536 bytes by default\r\n; We\u2019ll chop messages if needed\r\n(def chunk-size (bit-shift-right 65536 2))\r\n\r\n(defn ^:deprecated message-reader [?read]\r\n  \"Returns a discrete flow of read Electric messages from provided task, emitting individual frames.\"\r\n  (m/sp\r\n    (loop [data (transient [])]\r\n      (let [x (m/? ?read)]\r\n        (if (string? x)\r\n          (recur (conj! data (decode-str x)))\r\n          (persistent!\r\n            (conj! data\r\n              (loop [x       x\r\n                     control (transient [])]\r\n                (let [xs      (decode-numbers x)\r\n                      control (reduce conj! control xs)]\r\n                  (if (< (count xs) chunk-size) ; final frame\r\n                    (persistent! control)\r\n                    (recur (m/? ?read) control)))))))))))\r\n\r\n\r\n(defn ^:deprecated message-writer\r\n  \"Returns a function taking an Electric message and returning a task writing it as individual frames using provided\r\n   function. Might cut a message into chunks if its size would exceed the server payload limit.\r\n   An empty message (0b) is written to notify the end of frame.\"\r\n  [write]\r\n  #(m/sp\r\n     (loop [xs (seq (pop %))]\r\n       (if-some [[x & xs] xs]\r\n         (do (#?(:clj log/trace, :cljs js/console.debug) \"\ud83d\udd3c\" x)\r\n           (m/? (write\r\n                  (try (encode x)\r\n                    (catch #?(:clj Throwable :cljs :default) t\r\n                      (throw (ex-info \"Failed to encode\" {:value x} t))))))\r\n           (recur xs))\r\n         (loop [xs (peek %)]\r\n           (if (>= (count xs) chunk-size)\r\n             (do (m/? (write (encode-numbers (subvec xs 0 chunk-size))))\r\n               (recur (subvec xs chunk-size)))\r\n             (m/? (write (encode-numbers xs)))))))))\r\n\r\n(defn ^:deprecated decoder\r\n  \"A transducer partitioning a sequence of network messages into Electric events.\"\r\n  [rf]\r\n  (let [data (doto (object-array 2)\r\n               (aset 0 []) (aset 1 []))]\r\n    (fn\r\n      ([] (rf))\r\n      ([r]\r\n       (assert (= [] (aget data 0) (aget data 1)))\r\n       (rf r))\r\n      ([r x]\r\n       (if (string? x)\r\n         (do (assert (= [] (aget data 1)))\r\n             (aset data 0 (conj (aget data 0) (decode-str x))) r)\r\n         (let [xs (decode-numbers x)]\r\n           (aset data 1 (into (aget data 1) xs))\r\n           (if (< (count xs) chunk-size)                  ; final frame\r\n             (let [x (conj (aget data 0) (aget data 1))]\r\n               (aset data 0 [])\r\n               (aset data 1 [])\r\n               (rf r x)) r)))))))\r\n\r\n(defn ^:deprecated encoder\r\n  \"A transducer expanding Electric events to a sequence of network messages.\"\r\n  [rf]\r\n  (fn\r\n    ([] (rf))\r\n    ([r] (rf r))\r\n    ([r x]\r\n     (let [r (reduce rf r (eduction (map encode) (pop x)))\r\n           r (reduce rf r (eduction (partition-all chunk-size) (map encode-numbers) (peek x)))]\r\n       (case (mod (count (peek x)) chunk-size)\r\n         0 (rf r (encode-numbers [])) r)))))\r\n\r\n(defn foreach\r\n  ([r] r)\r\n  ([r x] (r x) r))\r\n"]}