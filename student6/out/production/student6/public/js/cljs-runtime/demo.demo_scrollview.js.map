{"version":3,"sources":["demo/demo_scrollview.cljc"],"mappings":";;;;AAOA,AAwBA,AAiBA,GAAA,QAAAA,iCAAAC,iDAAAC;AAAA;AAAA,AAAA,kCAAA,lCAASC;;AACT,AACA,AAEA","names":["js/demo","js/demo.demo-scrollview","js/demo.demo-scrollview.!demo","demo.demo-scrollview/!demo"],"sourcesContent":["(ns demo.demo-scrollview\r\n  (:require [contrib.data :refer [unqualify]]\r\n            [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.electric-ui4 :as ui]\r\n            #?(:cljs goog.object)))\r\n\r\n(e/defn DemoFixedHeightCounted\r\n  \"Scrolls like google sheets. this can efficiently jump through a large indexed collection\"\r\n  []\r\n  (let [row-count 500\r\n        xs (vec (range row-count)) ; counted\r\n        page-size 100\r\n        row-height 22] ; todo use relative measurement (browser zoom impacts px height)\r\n    (e/client\r\n      (dom/div (dom/props {:class \"viewport\" :style {:overflowX \"hidden\" :overflowY \"auto\"}})\r\n        (let [[scrollTop] (new (ui/scroll-state< dom/node))\r\n              max-height (* row-count row-height)\r\n              clamped-scroll-top (js/Math.min scrollTop max-height)\r\n              start (/ clamped-scroll-top row-height)] ; (js/Math.floor)\r\n          (dom/div (dom/props {:style {:height (str (* row-height row-count) \"px\") ; optional absolute scrollbar\r\n                                       :padding-top (str clamped-scroll-top \"px\") ; seen elements are replaced with padding\r\n                                       :padding-bottom (str (- max-height clamped-scroll-top) \"px\")}})\r\n            (e/server\r\n              ; seen elements are unmounted\r\n              (e/for [x #_(subvec xs\r\n                            (Math/min start row-count)\r\n                            (Math/min (+ start page-size) row-count))\r\n                      (->> xs (drop start) (take page-size))]\r\n                (e/client (dom/div (dom/text x)))))))))))\r\n\r\n(e/defn DemoVariableHeightInfinite\r\n  \"Scrolls like newsfeed. Natural browser layout for variable height rows. Leaves seen elements\r\n  mounted in the DOM.\"\r\n  []\r\n  (let [xs (range) ; infinite\r\n        page-size 100]\r\n    (e/client\r\n      (dom/div (dom/props {:class \"viewport\"})\r\n        (let [!pages (atom 1) pages (e/watch !pages)\r\n              [scrollTop scrollHeight clientHeight] (new (ui/scroll-state< dom/node))]\r\n          (when (>= scrollTop (- scrollHeight clientHeight clientHeight)) ; scrollThresholdPx = clientHeight\r\n            (swap! !pages inc)) ; can this get spammed by Electric?\r\n          (dom/div ; content is unstyled, uses natural layout\r\n            (e/server\r\n              (e/for [x (->> xs (take (* pages page-size)))] ; leave dom\r\n                (e/client (dom/div (dom/text x)))))))))))\r\n\r\n(defonce !demo #?(:clj (atom {:text \"DemoFixedHeightCounted\" ::value `DemoFixedHeightCounted}) :cljs nil))\r\n(e/def demo (e/server (e/watch !demo)))\r\n(e/def demos {`DemoVariableHeightInfinite DemoVariableHeightInfinite\r\n              `DemoFixedHeightCounted DemoFixedHeightCounted})\r\n(e/defn Demo []\r\n  (e/client\r\n    ; Requires css {box-sizing: border-box;}\r\n    (dom/element \"style\" (dom/text \".header { position: fixed; z-index:1; top: 0; left: 0; right: 0; height: 100px; background-color: #abcdef; }\"\r\n                           \".footer { position: fixed; bottom: 0; left: 0; right: 0; height: 100px; background-color: #abcdef; }\"\r\n                           \".viewport { position: fixed; top: 100px; bottom: 100px; left: 0; right: 0; background-color: #F63; overflow: auto; }\"))\r\n    (dom/div (dom/props {:class \"header\"})\r\n      (dom/dl\r\n        (dom/dt (dom/text \"scroll debug state\"))\r\n        (dom/dd (dom/pre (dom/text (pr-str (update-keys (e/watch ui/!scrollStateDebug) unqualify))))))\r\n      (e/server\r\n        (ui/select\r\n          demo\r\n          (e/fn V! [v] (reset! !demo v))\r\n          (e/fn Options [] [{:text \"DemoFixedHeightCounted\" ::value `DemoFixedHeightCounted}\r\n                            {:text \"DemoVariableHeightInfinite\" ::value `DemoVariableHeightInfinite}])\r\n          (e/fn OptionLabel [x] (:text x)))))\r\n    (e/server (new (get demos (::value demo))))\r\n    (dom/div (dom/props {:class \"footer\"}) (dom/text \"Try scrolling to the top, and resizing the window.\"))))\r\n"]}