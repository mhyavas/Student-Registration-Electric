shadow$provide.module$node_modules$react_offcanvas$node_modules$react$lib$Danger=function(global,require,module,exports){var ExecutionEnvironment=require("module$node_modules$fbjs$lib$ExecutionEnvironment"),createNodesFromMarkup=require("module$node_modules$fbjs$lib$createNodesFromMarkup"),emptyFunction=require("module$node_modules$fbjs$lib$emptyFunction"),getMarkupWrap=require("module$node_modules$fbjs$lib$getMarkupWrap"),invariant=require("module$node_modules$fbjs$lib$invariant"),OPEN_TAG_NAME_EXP=
/^(<[^ \/>]+)/;module.exports={dangerouslyRenderMarkup:function(markupList){ExecutionEnvironment.canUseDOM?void 0:invariant(!1,"dangerouslyRenderMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString for server rendering.");for(var nodeName,markupByNodeName={},i=0;i<markupList.length;i++)markupList[i]?void 0:invariant(!1,"dangerouslyRenderMarkup(...): Missing markup."),
nodeName=markupList[i],nodeName=nodeName.substring(1,nodeName.indexOf(" ")),nodeName=getMarkupWrap(nodeName)?nodeName:"*",markupByNodeName[nodeName]=markupByNodeName[nodeName]||[],markupByNodeName[nodeName][i]=markupList[i];i=[];var resultListAssignmentCount=0;for(nodeName in markupByNodeName)if(markupByNodeName.hasOwnProperty(nodeName)){var markupListByNodeName=markupByNodeName[nodeName];for(resultIndex in markupListByNodeName)markupListByNodeName.hasOwnProperty(resultIndex)&&(markupListByNodeName[resultIndex]=
markupListByNodeName[resultIndex].replace(OPEN_TAG_NAME_EXP,'$1 data-danger-index\x3d"'+resultIndex+'" '));markupListByNodeName=createNodesFromMarkup(markupListByNodeName.join(""),emptyFunction);for(var j=0;j<markupListByNodeName.length;++j){var renderNode=markupListByNodeName[j];if(renderNode.hasAttribute&&renderNode.hasAttribute("data-danger-index")){var resultIndex=+renderNode.getAttribute("data-danger-index");renderNode.removeAttribute("data-danger-index");i.hasOwnProperty(resultIndex)?invariant(!1,
"Danger: Assigning to an already-occupied result index."):void 0;i[resultIndex]=renderNode;resultListAssignmentCount+=1}else console.error("Danger: Discarding unexpected node:",renderNode)}}resultListAssignmentCount!==i.length?invariant(!1,"Danger: Did not assign to every index of resultList."):void 0;i.length!==markupList.length?invariant(!1,"Danger: Expected markup to render %s nodes, but rendered %s.",markupList.length,i.length):void 0;return i},dangerouslyReplaceNodeWithMarkup:function(oldChild,
markup){ExecutionEnvironment.canUseDOM?void 0:invariant(!1,"dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.");markup?void 0:invariant(!1,"dangerouslyReplaceNodeWithMarkup(...): Missing markup.");"html"===oldChild.tagName.toLowerCase()?invariant(!1,"dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the \x3chtml\x3e node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString()."):
void 0;markup="string"===typeof markup?createNodesFromMarkup(markup,emptyFunction)[0]:markup;oldChild.parentNode.replaceChild(markup,oldChild)}}}
//# sourceMappingURL=module$node_modules$react_offcanvas$node_modules$react$lib$Danger.js.map
