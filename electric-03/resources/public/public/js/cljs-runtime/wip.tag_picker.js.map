{"version":3,"sources":["wip/tag_picker.cljc"],"mappings":";AAKA,sBAAA,2CAAA,wDAAA,2CAAA,qDAAA,kBAAA,oDAAA,2CAAA,qDAAA,gBAAA,2DAAA,2CAAA,qDAAA,oBAAA,sDAAA,2CAAA,qDAAA,ptBAAKA;AAIL,mBAAA,nBAAMC,8CAAGC;AAAT,AAAiB,oDAAA,7CAACC,8EAAQ,AAACC,6CAAK,WAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAMK;IAANH,aAAA,AAAAD,4CAAAD,WAAA,IAAA;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAASI;AAAT,AAAqB,GAAM,AAACC,+BAAcD,GAAGV;AAAxB,AAAgCS;;AAAhC;;IAAqCX;;AAE1F","names":["wip.tag-picker/data","wip.tag-picker/q","search","cljs.core.into","cljs.core.keep","p__49851","vec__49852","cljs.core.nth","map__49856","cljs.core/--destructure-map","cljs.core.get","k","nm","clojure.string/includes?"],"sourcesContent":["(ns wip.tag-picker\r\n  (:require [clojure.string :as str]\r\n            [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-ui4 :as ui]))\r\n\r\n(def data {:alice   {:name \"Alice B\"}\r\n           :bob     {:name \"Bob C\"}\r\n           :charlie {:name \"Charlie D\"}\r\n           :derek   {:name \"Derek E\"}})\r\n(defn q [search] (into [] (keep (fn [[k {nm :name}]] (when (str/includes? nm search) k))) data))\r\n\r\n(e/defn TagPicker []\r\n  (e/server\r\n    (let [!v (atom #{:alice :bob})]\r\n      (ui/tag-picker (e/watch !v)\r\n        (e/fn [v] (e/client (prn [:V! v])) (swap! !v conj v))\r\n        (e/fn [v] (prn [:unV! v]) (swap! !v disj v))\r\n        (e/fn [search] (e/client (prn [:Options search])) (q search))\r\n        (e/fn [id] (e/client (prn [:OptionLabel id])) (-> data id :name))))))\r\n"]}