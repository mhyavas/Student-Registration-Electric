{"version":3,"sources":["app/create_course.cljc"],"mappings":";AAeA,AACA,AAEA,AAAKA,gCAAO,6CAAA,2CAAA,4DAAA,KAAA,sEAAA,2CAAA,qDAAA,GAAA,2DAAA,GAAA,iEAAA,GAAA,yDAAA,GAAA,kDAAA,YAAA,qEAAA,2CAAA,qDAAA,GAAA,qDAAA,GAAA,iEAAA,GAAA,kEAAA,GAAA,wDAAA,GAAA,kDAAA,YAAA,6EAAA,2CAAA,qDAAA,GAAA,iEAAA,GAAA,kDAAA,YAAA,gyBAAA,itBAAA,n0FAACC,04CAegB,4GAAA,IAAA,2CAAA,qDAAA,OAAA,2DAAA,OAAA,iEAAA,mFAAA,0FAAA,yDAAA,mFAAA,iBAAA,kDAAA,ttBAACC,myBACD,4GAAA,IAAA,2CAAA,qDAAA,aAAA,qDAAA,SAAA,iEAAA,mFAAA,kFAAA,iFAAA,kDAAA,poBAACA,wtBACC,4GAAA,IAAA,2CAAA,qDAAA,YAAA,kDAAA,IAAA,iEAAA,mFAAA,iFAAA,yDAAA,mFAAA,noBAACA;AA0DhC,mCAAA,nCAAMC,8EAAWC;AAAjB,AACE,2GAAA,mFAAA,sEAAA,7PAACC,mDAAML,8BAAOM,yOAAgCF;;AAEhD,sCAAA,tCAAMG,oFAAcC;AAApB,AACE,2GAAA,mFAAA,sEAAA,7PAACH,mDAAML,8BAAOM,+OAAmCE;;AACnD,yCAAA,zCAAMC,0FAAiBC;AAAvB,AACE,2GAAA,mFAAA,sEAAA,7PAACL,mDAAML,8BAAOM,qPAAsCI;;AAEtD,qCAAA,rCAAMC,kFAAaC;AAAnB,AACE,2GAAA,mFAAA,sEAAA,7PAACP,mDAAML,8BAAOM,6OAAkCM;;AAElD,0CAAA,1CAAMC,4FAAkBT;AAAxB,AACE,2GAAA,mFAAA,qEAAA,5PAACC,mDAAML,8BAAOM,wOAA+BF;;AAE/C,0CAAA,1CAAMU,4FAAkBC;AAAxB,AACE,2GAAA,mFAAA,qEAAA,5PAACV,mDAAML,8BAAOM,wOAA+BS;;AAC/C,gDAAA,hDAAMC,wGAAwBN;AAA9B,AACE,2GAAA,mFAAA,qEAAA,5PAACL,mDAAML,8BAAOM,oPAAqCI;;AAErD,gDAAA,hDAAMO,wGAAwBC;AAA9B,AACE,2GAAA,mFAAA,qEAAA,5PAACb,mDAAML,8BAAOM,qPAAqCY;;AAErD,2CAAA,3CAAMC,8FAAmBC;AAAzB,AACE,2GAAA,mFAAA,qEAAA,5PAACf,mDAAML,8BAAOM,2OAAgCc;;AAEhD,8CAAA,9CAAMC,oGAAsBjB;AAA5B,AACE,2GAAA,mFAAA,6EAAA,pQAACC,mDAAML,8BAAOM,gPAAmCF;;AAEnD,oDAAA,pDAAMkB,gHAA4BZ;AAAlC,AACE,2GAAA,mFAAA,6EAAA,pQAACL,mDAAML,8BAAOM,4PAAyCI;;AAezD","names":["app.create-course/!state","cljs.core.atom","cljs.core.sorted_map","app.create-course/set-name!","name","cljs.core.swap_BANG_","cljs.core/assoc-in","app.create-course/set-surname!","surname","app.create-course/set-department!","department","app.create-course/set-course!","course","app.create-course/set-course-name!","app.create-course/set-course-code!","code","app.create-course/set-course-department!","app.create-course/set-course-instructor!","instructor","app.create-course/set-course-class!","class","app.create-course/set-instructor-name!","app.create-course/set-instructor-department!"],"sourcesContent":["(ns app.create-course\r\n  (:require clojure.edn\r\n            contrib.ednish\r\n            clojure.string\r\n            #?(:cljc [reagent.core :as reagent])\r\n            [contrib.datomic-m #?(:clj :as :cljs :as-alias) d]\r\n            [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.electric-ui4 :as ui4]\r\n            [hyperfiddle.history :as history]\r\n            #?(:clj [datomic.client.api :as dt])\r\n            [contrib.datomic-m #?(:clj :as :cljs :as-alias) d]\r\n            #?(:cljc [thereisnodot.reagent-autocomplete.core :as autocomplete])))\r\n\r\n\r\n(e/def conn)\r\n(e/def db)\r\n\r\n(def !state (atom {:selected nil\r\n                   :stage-student    {:name       \"\"\r\n                                      :surname    \"\"\r\n                                      :department \"\"\r\n                                      :course     \"\"\r\n                                      :id         0}\r\n                   :stage-course {:name \"\"\r\n                                  :code \"\"\r\n                                  :department \"\"\r\n                                  :instructor \"\"\r\n                                  :class \"\"\r\n                                  :id 0}\r\n                   :stage-instructor {:name \"\"\r\n                                      :department \"\"\r\n                                      :id 0}\r\n                   :names    (sorted-map 0 {:name \"Emil\", :surname \"Hans\", :department [:department/matematik], :course [\"MAT101\"] :id 0})\r\n                   :courses  (sorted-map 0 {:name \"Calculus 1\" :code \"MAT101\" :department [:department/matematik :department/fizik] :id 0})\r\n                   :instructor (sorted-map 0 {:name \"Ali Deniz\" :id 1 :department [:department/fizik] :course [\"MAT101\"]})}))\r\n\r\n#?(:clj (defn CreateStudent [id name surname department course db]\r\n          (dt/transact db {:tx-data [{:student/id         id\r\n                                      :student/name       (str name \" \" surname)\r\n                                      :student/department department\r\n                                      :student/course     course}]})))\r\n#?(:clj (defn student-next-id [db]\r\n          (if (empty? (dt/q '[:find (max ?id)\r\n                              :where [_ :student/id ?id]] db))\r\n            101\r\n            (inc (ffirst (dt/q '[:find (max ?id)\r\n                                 :where [_ :student/id ?id]] db))))))\r\n\r\n#?(:clj (defn course-next-id [db]\r\n          (if (empty? (dt/q '[:find (max ?id)\r\n                              :where [_ :course/id ?id]] db))\r\n            201\r\n            (inc (ffirst (dt/q '[:find (max ?id)\r\n                                 :where [_ :course/id ?id]] db))))))\r\n#?(:clj (defn instructor-next-id [db]\r\n          (if (empty? (dt/q '[:find (max ?id)\r\n                              :where [_ :instructor/id ?id]] db))\r\n            301\r\n            (inc (ffirst (dt/q '[:find (max ?id)\r\n                                 :where [_ :instructor/id ?id]] db))))))\r\n\r\n#?(:clj (defn department-id-finder [dept-string db]\r\n\r\n          ;Cikti olarak:\r\n          ;=> [[:department/id 401] [:department/id 402]]\r\n          (vector (keyword \"department\" \"id\") (ffirst (dt/q '[:find ?id\r\n                                                              :in $ ?dept\r\n                                                              :where [?e :department/name ?dept]\r\n                                                              [?e :department/id ?id]] db (clojure.string/capitalize dept-string))))\r\n          #_(map (fn [dept] (vector (keyword \"department\" \"id\") (ffirst (dt/q '[:find ?id\r\n                                                                                :in $ ?dept\r\n                                                                                :where [?e :department/name ?dept]\r\n                                                                                [?e :department/id ?id]] db (clojure.string/capitalize dept))))) (clojure.string/split dept-string #\",\"))))\r\n\r\n\r\n#?(:clj (defn course-id-finder [string-code db]\r\n          ;Cikti\r\n          ;=> [[:course/id 201]]\r\n          (into [] (map (fn [code] (vector (keyword \"course\" \"id\") (ffirst (dt/q '[:find ?id\r\n                                                                                   :in $ ?code\r\n                                                                                   :where [?e :course/code ?code]\r\n                                                                                   [?e :course/id ?id]] db code)))) (clojure.string/split string-code #\",\")))))\r\n#?(:clj (defn course-department-id-finder [string-dept db]\r\n          (into [] (map (fn [code] (vector (keyword \"department\" \"id\") (ffirst (dt/q '[:find ?id\r\n                                                                                       :in $ ?code\r\n                                                                                       :where [?e :department/name ?code]\r\n                                                                                       [?e :department/id ?id]] db (clojure.string/capitalize code))))) (clojure.string/split string-dept #\",\")))))\r\n#?(:clj (defn course-instructor-id-finder [instructor-string db]\r\n          (into [] (map (fn [instructor] (vector (keyword \"instructor\" \"id\") (ffirst (dt/q '[:find ?id\r\n                                                                                             :in $ ?instructor\r\n                                                                                             :where [?e :instructor/name ?instructor]\r\n                                                                                             [?e :instructor/id ?id]] db instructor)))) (clojure.string/split instructor-string #\",\")))))\r\n(defn set-name! [name]\r\n  (swap! !state assoc-in [:stage-student :name] name))\r\n\r\n(defn set-surname! [surname]\r\n  (swap! !state assoc-in [:stage-student :surname] surname))\r\n(defn set-department! [department]\r\n  (swap! !state assoc-in [:stage-student :department] department))\r\n\r\n(defn set-course! [course]\r\n  (swap! !state assoc-in [:stage-student :course] course))\r\n\r\n(defn set-course-name! [name]\r\n  (swap! !state assoc-in [:stage-course :name] name))\r\n\r\n(defn set-course-code! [code]\r\n  (swap! !state assoc-in [:stage-course :code] code))\r\n(defn set-course-department! [department]\r\n  (swap! !state assoc-in [:stage-course :department] department))\r\n\r\n(defn set-course-instructor! [instructor]\r\n  (swap! !state assoc-in [:stage-course :instructor] instructor))\r\n\r\n(defn set-course-class! [class]\r\n  (swap! !state assoc-in [:stage-course :class] class))\r\n\r\n(defn set-instructor-name! [name]\r\n  (swap! !state assoc-in [:stage-instructor :name] name))\r\n\r\n(defn set-instructor-department! [department]\r\n  (swap! !state assoc-in [:stage-instructor :department] department))\r\n#?(:clj (defn CreateCourse [id name code department instructor class db]\r\n          (dt/transact db {:tx-data [{:course/id id\r\n                                      :course/name name\r\n                                      :course/code code\r\n                                      :course/department department\r\n                                      :course/instructor instructor\r\n                                      :course/class class}]})\r\n          db))\r\n\r\n#?(:clj (defn CreateInstructor [id name department db]\r\n          (dt/transact db {:tx-data [{:instructor/id id\r\n                                      :instructor/name name\r\n                                      :instructor/department department}]})))\r\n\r\n(e/defn CreateData []\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n\r\n              (e/client\r\n                (dom/div\r\n                  (dom/h2 (dom/text \"Creating Course Side\"))\r\n                  (let [state (e/watch !state)]\r\n                    (let [stage (:stage-course state)]\r\n                      (dom/span  (dom/text \"Name:\"))\r\n                      (ui4/input (:name stage) (e/fn [v] (set-course-name! v)))\r\n                      (dom/span  (dom/text \"Code:\"))\r\n                      (ui4/input (:code stage) (e/fn [v] (set-course-code! v)))\r\n                      (dom/div\r\n                        (dom/span (dom/text \"Department:\"))\r\n                        #_(e/server (ui4/select (:department stage)\r\n                                                (e/fn V! [v] (e/client (set-course-department! v)))\r\n                                                (e/fn Options [] (for [k (e/server (flatten (dt/q '[:find ?name :where [_ :department/name ?name]] db)))]\r\n                                                                   k))\r\n                                                (e/fn OptionsLabel [x] x))))\r\n                      ;Datomic sorgusunu disarida yapip objeyi dropdown'a aktarmak stack sorununu cozebilir.\r\n                      (dom/span  (dom/text \"Instructor:\"))\r\n                      #_(e/server (ui4/select (:instructor stage)\r\n                                              (e/fn V! [v] (e/client (set-course-instructor! v)))\r\n                                              (e/fn Options [] (for [k (e/server (flatten (dt/q '[:find ?name\r\n                                                                                                  :where [_ :instructor/name ?name]] db)))]\r\n                                                                 k))\r\n                                              (e/fn OptionsLabel [x] x)))\r\n                      (dom/span  (dom/text \"Class:\"))\r\n                      (ui4/input (:class stage) (e/fn [v] (set-course-class! v)))\r\n                      (dom/text stage)\r\n                      (dom/div\r\n                        (dom/div (ui4/button (e/fn []\r\n\r\n                                                   (e/server (CreateCourse (course-next-id db) (:name stage) (:code stage) (course-department-id-finder (:department stage) db) (course-instructor-id-finder (:instructor stage) db)  (:class stage) conn)))\r\n\r\n                                             (dom/text \"Create Course\"))))))))))))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}