shadow$provide.module$node_modules$react_offcanvas$node_modules$react$lib$LinkedValueUtils=function(global,require,module,exports){function _assertSingleLink(inputProps){null!=inputProps.checkedLink&&null!=inputProps.valueLink?invariant(!1,"Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don't want to use valueLink and vice versa."):void 0}function _assertValueLink(inputProps){_assertSingleLink(inputProps);null!=inputProps.value||null!=inputProps.onChange?
invariant(!1,"Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink."):void 0}function _assertCheckedLink(inputProps){_assertSingleLink(inputProps);null!=inputProps.checked||null!=inputProps.onChange?invariant(!1,"Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don't want to use checkedLink"):void 0}global=require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactPropTypes");
var ReactPropTypeLocations=require("module$node_modules$react_offcanvas$node_modules$react$lib$ReactPropTypeLocations"),invariant=require("module$node_modules$fbjs$lib$invariant"),warning=require("module$node_modules$fbjs$lib$warning"),hasReadOnlyValue={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},propTypes={value:function(props,propName,componentName){return!props[propName]||hasReadOnlyValue[props.type]||props.onChange||props.readOnly||props.disabled?null:Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},
checked:function(props,propName,componentName){return!props[propName]||props.onChange||props.readOnly||props.disabled?null:Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:global.func},loggedTypeFailures={};module.exports={checkPropTypes:function(tagName,props,owner){for(var propName in propTypes){if(propTypes.hasOwnProperty(propName))var error=
propTypes[propName](props,propName,tagName,ReactPropTypeLocations.prop,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");if(error instanceof Error&&!(error.message in loggedTypeFailures)){loggedTypeFailures[error.message]=!0;var addendum;a:{if(owner&&(addendum=owner.getName())){addendum=" Check the render method of `"+addendum+"`.";break a}addendum=""}warning(!1,"Failed form propType: %s%s",error.message,addendum)}}},getValue:function(inputProps){return inputProps.valueLink?(_assertValueLink(inputProps),
inputProps.valueLink.value):inputProps.value},getChecked:function(inputProps){return inputProps.checkedLink?(_assertCheckedLink(inputProps),inputProps.checkedLink.value):inputProps.checked},executeOnChange:function(inputProps,event){if(inputProps.valueLink)return _assertValueLink(inputProps),inputProps.valueLink.requestChange(event.target.value);if(inputProps.checkedLink)return _assertCheckedLink(inputProps),inputProps.checkedLink.requestChange(event.target.checked);if(inputProps.onChange)return inputProps.onChange.call(void 0,
event)}}}
//# sourceMappingURL=module$node_modules$react_offcanvas$node_modules$react$lib$LinkedValueUtils.js.map
