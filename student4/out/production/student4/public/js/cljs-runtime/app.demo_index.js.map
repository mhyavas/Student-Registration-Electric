{"version":3,"sources":["app/demo_index.cljc"],"mappings":";;;;AAgBA,AACA,AACA,AAKA,AAAKA,6BAAO,6CAAA,2CAAA,4DAAA,KAAA,sEAAA,2CAAA,qDAAA,GAAA,2DAAA,GAAA,iEAAA,GAAA,yDAAA,GAAA,kDAAA,YAAA,qEAAA,2CAAA,qDAAA,GAAA,qDAAA,GAAA,iEAAA,GAAA,kEAAA,GAAA,wDAAA,GAAA,kDAAA,YAAA,gyBAAA,itBAAA,jhFAACC,wlCAYgB,4GAAA,IAAA,2CAAA,qDAAA,OAAA,2DAAA,OAAA,iEAAA,mFAAA,0FAAA,yDAAA,mFAAA,iBAAA,kDAAA,ttBAACC,myBACD,4GAAA,IAAA,2CAAA,qDAAA,aAAA,qDAAA,SAAA,iEAAA,mFAAA,kFAAA,iFAAA,kDAAA,poBAACA,wtBACC,4GAAA,IAAA,2CAAA,qDAAA,YAAA,kDAAA,IAAA,iEAAA,mFAAA,iFAAA,yDAAA,mFAAA,noBAACA;AAwChC,sCAAA,tCAAMC,oFAAiBC;AAAvB,AACE,OAACC,mDAAML,2BAAO,WAAAM;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAAA,RAAgCI;oBAAhC,AAAAF,4CAAAF,eAAA,3EAAaG;AAAb,AACE,MAAA,AAAAE,gDAAA,uEAAA,2CAAA,sDAAA,sBAAA,oDAAA,GAAA,yDAAA,GAAA,6DAAA,GAAA,iEAAA;;;AAiBlB,gCAAA,hCAAMC,wEAAWC;AAAjB,AACE,wGAAA,mFAAA,sEAAA,1PAACT,mDAAML,2BAAOe,yOAAgCD;;AAEhD,mCAAA,nCAAME,8EAAcC;AAApB,AACE,wGAAA,mFAAA,sEAAA,1PAACZ,mDAAML,2BAAOe,+OAAmCE;;AACnD,sCAAA,tCAAMC,oFAAiBC;AAAvB,AACE,wGAAA,mFAAA,sEAAA,1PAACd,mDAAML,2BAAOe,qPAAsC,gDAAA,hDAACK,6DAAqBD;;AAG5E","names":["app.demo-index/!state","cljs.core.atom","cljs.core.sorted_map","app.demo-index/create-student!","db","cljs.core.swap_BANG_","p__34958","map__34959","cljs.core/--destructure-map","cljs.core.get","stage-student","state","cljs.core.ex_info","app.demo-index/set-name!","name","cljs.core/assoc-in","app.demo-index/set-surname!","surname","app.demo-index/set-department!","department","cljs.core.keyword"],"sourcesContent":["(ns app.demo-index\r\n  #?(:cljs (:import [goog.math Long]))\r\n  (:require clojure.edn\r\n            contrib.ednish\r\n            [contrib.str :refer [any-matches?]]\r\n            [contrib.data :refer [unqualify treelister]]\r\n            #?(:clj [contrib.datomic-contrib :as dx])\r\n            #?(:cljs contrib.datomic-cloud-contrib)\r\n            [contrib.datomic-m #?(:clj :as :cljs :as-alias) d]\r\n            [contrib.gridsheet :as gridsheet :refer [Explorer]]\r\n            [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.electric-ui4 :as ui4]\r\n            [hyperfiddle.history :as history]\r\n            [missionary.core :as m]))\r\n\r\n(e/def conn)\r\n(e/def db)\r\n(e/def schema)\r\n\r\n\r\n\r\n\r\n(def !state (atom {:selected nil\r\n                   :stage-student    {:name       \"\"\r\n                                      :surname    \"\"\r\n                                      :department \"\"\r\n                                      :course     \"\"\r\n                                      :id         0}\r\n                   :stage-course {:name \"\"\r\n                                  :code \"\"\r\n                                  :department \"\"\r\n                                  :instructor \"\"\r\n                                  :class \"\"\r\n                                  :id 0}\r\n                   :names    (sorted-map 0 {:name \"Emil\", :surname \"Hans\", :department [:department/matematik], :course [\"MAT101\"] :id 0})\r\n                   :courses  (sorted-map 0 {:name \"Calculus 1\" :code \"MAT101\" :department [:department/matematik :department/fizik] :id 0})\r\n                   :instructor (sorted-map 0 {:name \"Ali Deniz\" :id 1 :department [:department/fizik] :course [\"MAT101\"]})}))\r\n\r\n\r\n\r\n#?(:clj (defn student-next-id [db]\r\n          (if (empty? (d/q '[:find (max ?id)\r\n                             :where [_ :student/id ?id]] db))\r\n            101\r\n            (inc (ffirst (d/q '[:find (max ?id)\r\n                                :where [_ :student/id ?id]] db))))))\r\n#?(:clj (defn course-next-id [db]\r\n          (if (empty (d/q '[:find (max ?id)\r\n                            :where [_ :course/id ?id]] db))\r\n            201\r\n            (inc (ffirst (d/q '[:find (max ?id)\r\n                                :where [_ :course/id ?id]] db))))))\r\n\r\n#?(:clj (defn instructor-next-id [db]\r\n          (if (empty (d/q '[:find (max ?id)\r\n                            :where [_ :instructor/id ?id]] db))\r\n            301\r\n            (inc (ffirst (d/q '[:find (max ?id)\r\n                                :where [_ :instructor/id ?id]] db))))))\r\n\r\n#?(:clj (defn department-next-id [db]\r\n          (if (empty (d/q '[:find (max ?id)\r\n                            :where [_ :department/id ?id]] db))\r\n            401\r\n            (inc (ffirst (d/q '[:find (max ?id)\r\n                                :where [_ :department/id ?id]] db))))))\r\n\r\n#?(:clj (defn department-id-finder [dept-string db]\r\n          ;Cikti olarak:\r\n          ;=> [[:department/id 401] [:department/id 402]]\r\n          (into [] (map (fn [dept] (vector (keyword \"department\" \"id\") (ffirst (d/q '[:find ?id\r\n                                                                                      :in $ ?dept\r\n                                                                                      :where [?e :department/name ?dept]\r\n                                                                                      [?e :department/id ?id]] db dept)))) (clojure.string/split dept-string #\",\")))))\r\n\r\n\r\n(defn create-student! [db]\r\n  (swap! !state (fn [{:keys [stage-student] :as state}]\r\n                  (e/server (CreateStudent (:id state) (:name state) (:department state) (:course state) db)))))\r\n\r\n#?(:clj (defn CreateStudent [id name department course db]\r\n          (d/transact! db [{:student/id         id\r\n                            :student/name       name\r\n                            :student/department department\r\n                            :student/course course}])))\r\n;TODO CreateStudent fonksiyonuna gonderilecek objenin stringten vector icine aktarilmasi gerekiyor.\r\n\r\n#?(:clj (defn CreateCourse [id code name department instructor class db]\r\n          (d/transact! db [{:course/id id\r\n                            :course/code code\r\n                            :course/name name\r\n                            :course/department department\r\n                            :course/instructor instructor\r\n                            :course/class class}])))\r\n\r\n(defn set-name! [name]\r\n  (swap! !state assoc-in [:stage-student :name] name))\r\n\r\n(defn set-surname! [surname]\r\n  (swap! !state assoc-in [:stage-student :surname] surname))\r\n(defn set-department! [department]\r\n  (swap! !state assoc-in [:stage-student :department] (keyword \"department\" department)))\r\n\r\n\r\n(e/defn CreateData []\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (d/db conn)]\r\n              (e/client\r\n                (dom/div\r\n                  (dom/h2 (dom/text \"Creating Student\"))\r\n                  (let [state (e/watch !state)]\r\n                    (let [stage (:stage-student state)]\r\n                      (dom/text stage)\r\n                      (dom/span  (dom/text \"Name:\"))\r\n                      (ui4/input (:name stage) (e/fn [v] (set-name! v)))\r\n                      (dom/span  (dom/text \"Surname:\"))\r\n                      (ui4/input (:surname stage) (e/fn [v] (set-surname! v)))\r\n                      (dom/span  (dom/text \"department\"))\r\n                      (ui4/input (:department stage) (e/fn [v] (set-department! v)))\r\n                      (dom/div (dom/props\r\n                                 {:style {:grid-area             \"j\"\r\n                                          :display               :grid\r\n                                          :grid-gap              \"0.5rem\"\r\n                                          :grid-template-columns \"auto auto auto 1fr\"}})\r\n                               (dom/div (ui4/button (e/fn []\r\n                                                          (apply (.-log js/console) (:names state)))\r\n\r\n                                                    (dom/text \"Create\"))))))))))))\r\n\r\n\r\n\r\n"]}