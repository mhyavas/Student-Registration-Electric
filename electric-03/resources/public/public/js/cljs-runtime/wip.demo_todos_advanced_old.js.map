{"version":3,"sources":["wip/demo_todos_advanced_old.cljc"],"mappings":";AAUA,GAAA,QAAAA,gCAAAC,wDAAAC;AAAA;AAAA,AAAA,yCAAA,zCAASC;;AACT,AACA,AAIA,GAAA,QAAAH,gCAAAC,wDAAAG;AAAA;AAAA,AAAA,6CAAA,7CAASC;;AAIT,AAGA,AAUA,AAEA,AAMA,AAMA,wCAAA,xCAAMC,wFAAQC;AAAd,AAAA,kDAAA,gFAAA,iEAAA,yDAAA,/HAAuCA,8LAAwC,AAACC,mDAAMH,2CAAUI;;AAQhG,AAcA,AAmCA","names":["js/wip","js/wip.demo-todos-advanced-old","js/wip.demo-todos-advanced-old.!conn","wip.demo-todos-advanced-old/!conn","js/wip.demo-todos-advanced-old.!order-id","wip.demo-todos-advanced-old/!order-id","wip.demo-todos-advanced-old/->task","desc","cljs.core.swap_BANG_","cljs.core/inc"],"sourcesContent":["(ns wip.demo-todos-advanced-old\r\n  (:import [hyperfiddle.electric Pending]\r\n           [missionary Cancelled])\r\n  (:require #?(:clj [datascript.core :as d]) ; database on server\r\n            [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [missionary.core :as m]\r\n            [hyperfiddle.electric-ui4 :as ui]\r\n            [contrib.debug :as dbg]))\r\n\r\n(defonce !conn #?(:clj (d/create-conn {}) :cljs nil)) ; database on server\r\n(comment (alter-var-root #'!conn (fn [_] (d/create-conn {}))))\r\n(e/def db) ; injected database ref; Electric defs are always dynamic\r\n\r\n;; auto-incrementing task id, to define ordering\r\n;; an optimistically rendered task won't jump on the screen\r\n(defonce !order-id #?(:clj (atom 0) :cljs nil))\r\n\r\n;; user configurable latency and tx fail rate\r\n#?(:clj (def !latency (atom 200)))\r\n(e/def latency (e/server (e/watch !latency)))\r\n\r\n#?(:clj (def !fail-rate (atom 1)))\r\n(e/def fail-rate (e/server (e/watch !fail-rate)))\r\n\r\n;; tx with configured latency and fail rate\r\n#?(:clj (defn tx! [tx]\r\n          (m/sp\r\n            (m/? (m/sleep @!latency))\r\n            (if (< (rand-int 10) @!fail-rate)\r\n              (throw (ex-info \"tx failed\" {:tx tx}))\r\n              (d/transact! !conn tx)))))\r\n\r\n(e/def Tx!)\r\n\r\n(e/defn Latency [min max]\r\n  (dom/span (dom/style {:display \"inline-flex\", :flex-direction \"column\"})\r\n    (dom/span (dom/text \"Latency: \" latency \"ms\"))\r\n    (ui/range latency (e/fn [v] (e/server (reset! !latency v)))\r\n      (dom/props {:min min, :max max, :style {:width \"200px\"}}))))\r\n\r\n(e/defn FailRate [min max]\r\n  (dom/span (dom/style {:display \"inline-flex\", :flex-direction \"column\"})\r\n    (dom/span (dom/text \"Fail Rate: \" fail-rate \" out of \" max))\r\n    (ui/range fail-rate (e/fn [v] (e/server (reset! !fail-rate v)))\r\n      (dom/props {:min min, :max max, :style {:width \"200px\"}}))))\r\n\r\n(defn ->task [desc] {:task/description desc, :task/status :active, :task/order (swap! !order-id inc)})\r\n\r\n#?(:clj (defn todo-count [db] (count (d/q '[:find [?e ...] :where [?e :task/status :active]] db))))\r\n\r\n#?(:clj (defn todo-records [db]\r\n          (->> (d/q '[:find [(pull ?e [:db/id :task/description :task/order]) ...] :where [?e :task/status]] db)\r\n            (sort-by :task/order #(compare %2 %1)))))\r\n\r\n(e/defn TodoItem [id]\r\n  (e/server\r\n    (let [e (d/entity db id)\r\n          status (:task/status e)\r\n          server-checked? (= :done status)]\r\n      (e/client\r\n        (dom/div\r\n          ;; TODO a failed tick won't revert, is that expected/good?\r\n          (ui/checkbox server-checked?\r\n            (e/fn [checked?]\r\n              (e/server (new Tx! [[:db/add id :task/status (if checked? :done :active)]])))\r\n            (dom/props {:id id}))\r\n          (dom/label (dom/props {:for id}) (dom/text (e/server (:task/description e)))))))))\r\n\r\n(e/defn AdvancedTodoList []\r\n  (e/server\r\n    (binding [db (e/watch !conn), Tx! (e/fn [tx] (new (e/task->cp (tx! tx))) nil)]\r\n      (e/client\r\n        (dom/h1 (dom/text \"advanced todo list with optimistic render and fail/retry\"))\r\n        (dom/p (dom/text \"it's multiplayer, try two tabs\"))\r\n        (Latency. 0 2000)\r\n        (FailRate. 0 10)\r\n        (dom/div (dom/props {:class \"todo-list\"})\r\n          ;; we have to tuck away the input node because we'll be mounting nodes under a <ul>\r\n          (let [in (dom/input (dom/props {:placeholder \"Buy milk\"}) dom/node)]\r\n            (dom/div {:class \"todo-items\"}\r\n              ;; client-side concurrent optimistically rendered list of tasks\r\n              (e/for-event [v (e/listen> in \"keydown\" (partial ui/?read-line! in))]\r\n                (dom/div\r\n                  (let [!err (atom nil), err (e/watch !err)]\r\n                    (if-not err              ; base case, go and try to transact\r\n                      (try (reduced (e/server (new Tx! [(->task v)])))\r\n                           (catch Pending _ (dom/text \"\u231b \" v)) ; render spinner while waiting\r\n                           (catch Cancelled _) ; work around electric bug\r\n                           (catch :default e (reset! !err e))) ; tx failed, trigger other branch\r\n                      ;; tx failed, render failed value with retry button\r\n                      (do (dom/text \"\ud83d\udc80 \" v)\r\n                          (ui/button (e/fn [] (reset! !err nil))\r\n                            (dom/text \"\u27f3\"))\r\n                          (dom/text \" (\" (ex-message err) \")\"))))))\r\n              ;; server-side query rendered commited list of tasks\r\n              (e/server\r\n                (e/for-by :db/id [{:keys [db/id]} (todo-records db)]\r\n                  (TodoItem. id)))))\r\n          (dom/p (dom/props {:class \"counter\"})\r\n            (dom/span (dom/props {:class \"count\"}) (dom/text (e/server (todo-count db))))\r\n            (dom/text \" items left\")))))))\r\n\r\n;; alternative syntax for optimistic rendering\r\n(comment\r\n  (render-optimistically\r\n    :ok (e/fn [v] (e/server (new Tx! [(->task v)])))\r\n    :pending (e/fn [v] (dom/div (dom/text \"\u231b \" v)))\r\n    :failed (e/fn [v ex retry!]\r\n              (.error js/console ex)\r\n              (dom/div\r\n                (dom/text \"\ud83d\udc80 \" v)\r\n                (ui/button (e/fn [] (retry!))\r\n                  (dom/text \"\u27f3\"))))))\r\n\r\n;; gotchas\r\n;; - in failed state moving a range picker floods more errors in the console\r\n;; - checkbox failure doesn't revert, is that correct/good?\r\n"]}