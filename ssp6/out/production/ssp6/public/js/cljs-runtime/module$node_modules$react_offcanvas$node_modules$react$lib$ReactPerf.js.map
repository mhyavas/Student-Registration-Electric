{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$ReactPerf.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,oEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAmBjI,IAAIC,UAAY,CAKdC,cAAe,CAAA,CALD,CAWdC,cA8DFC,QAAmB,CAACC,OAAD,CAAUC,MAAV,CAAkBC,IAAlB,CAAwB,CACzC,MAAOA,KADkC,CAzE3B,CAkBdC,eAAgBA,QAAS,CAACC,MAAD,CAASC,UAAT,CAAqBC,WAArB,CAAkC,CAEvD,IAAKC,IAAIA,GAAT,GAAgBD,YAAhB,CACOA,WAAYE,CAAAA,cAAZ,CAA2BD,GAA3B,CAAL,GAGAH,MAAA,CAAOG,GAAP,CAHA,CAGcX,SAAUa,CAAAA,OAAV,CAAkBJ,UAAlB,CAA8BC,WAAA,CAAYC,GAAZ,CAA9B,CAAgDH,MAAA,CAAOG,GAAP,CAAhD,CAHd,CAHqD,CAlB7C,CAqCdE,QAASA,QAAS,CAACT,OAAD,CAAUC,MAAV,CAAkBC,IAAlB,CAAwB,CAEtC,IAAIQ,aAAe,IAAnB,CACIC,QAAUA,QAAS,EAAG,CACxB,MAAIf,UAAUC,CAAAA,aAAd;CACOa,YAGE,GAFLA,YAEK,CAFUd,SAAUE,CAAAA,aAAV,CAAwBE,OAAxB,CAAiCC,MAAjC,CAAyCC,IAAzC,CAEV,EAAAQ,YAAaE,CAAAA,KAAb,CAAmB,IAAnB,CAAyBC,SAAzB,CAJT,EAMOX,IAAKU,CAAAA,KAAL,CAAW,IAAX,CAAiBC,SAAjB,CAPiB,CAS1BF,QAAQG,CAAAA,WAAR,CAAsBd,OAAtB,CAAgC,GAAhC,CAAsCC,MACtC,OAAOU,QAb+B,CArC5B,CAuDdI,UAAW,CAITC,cAAeA,QAAS,CAACP,OAAD,CAAU,CAChCb,SAAUE,CAAAA,aAAV,CAA0BW,OADM,CAJzB,CAvDG,CA6EhBf,OAAOC,CAAAA,OAAP,CAAiBC,SAhGgH;",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/ReactPerf.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$ReactPerf\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPerf\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * ReactPerf is a general AOP system designed to measure performance. This\n * module only has the hooks: see ReactDefaultPerf for the analysis tool.\n */\nvar ReactPerf = {\n  /**\n   * Boolean to enable/disable measurement. Set to false by default to prevent\n   * accidental logging and perf loss.\n   */\n  enableMeasure: false,\n\n  /**\n   * Holds onto the measure function in use. By default, don't measure\n   * anything, but we'll override this if we inject a measure function.\n   */\n  storedMeasure: _noMeasure,\n\n  /**\n   * @param {object} object\n   * @param {string} objectName\n   * @param {object<string>} methodNames\n   */\n  measureMethods: function (object, objectName, methodNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      for (var key in methodNames) {\n        if (!methodNames.hasOwnProperty(key)) {\n          continue;\n        }\n        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);\n      }\n    }\n  },\n\n  /**\n   * Use this to wrap methods you want to measure. Zero overhead in production.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @param {function} func\n   * @return {function}\n   */\n  measure: function (objName, fnName, func) {\n    if (process.env.NODE_ENV !== 'production') {\n      var measuredFunc = null;\n      var wrapper = function () {\n        if (ReactPerf.enableMeasure) {\n          if (!measuredFunc) {\n            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);\n          }\n          return measuredFunc.apply(this, arguments);\n        }\n        return func.apply(this, arguments);\n      };\n      wrapper.displayName = objName + '_' + fnName;\n      return wrapper;\n    }\n    return func;\n  },\n\n  injection: {\n    /**\n     * @param {function} measure\n     */\n    injectMeasure: function (measure) {\n      ReactPerf.storedMeasure = measure;\n    }\n  }\n};\n\n/**\n * Simply passes through the measured function, without measuring it.\n *\n * @param {string} objName\n * @param {string} fnName\n * @param {function} func\n * @return {function}\n */\nfunction _noMeasure(objName, fnName, func) {\n  return func;\n}\n\nmodule.exports = ReactPerf;\n};"],
"names":["shadow$provide","global","require","module","exports","ReactPerf","enableMeasure","storedMeasure","_noMeasure","objName","fnName","func","measureMethods","object","objectName","methodNames","key","hasOwnProperty","measure","measuredFunc","wrapper","apply","arguments","displayName","injection","injectMeasure"]
}
