{"version":3,"sources":["demo/demo_student.cljc"],"mappings":";AAWA,uBAAA,mFAAA,2CAAA,kDAAA,IAAA,qDAAA,UAAA,iEAAA,0FAAA,2CAAA,kDAAA,IAAA,qDAAA,YAAA,iEAAA,xoBAAKA;AAcL,AAsBA","names":["demo.demo-student/db"],"sourcesContent":["(ns demo.demo-student\r\n  (:require\r\n    contrib.str\r\n    [clojure.string :as str]\r\n    [hyperfiddle.electric :as e]\r\n    [hyperfiddle.electric-dom2 :as dom]\r\n    [hyperfiddle.electric-ui4 :as ui]\r\n    [missionary.core :as m]\r\n    [clojure.string :as str]))\r\n\r\n\r\n(def db\r\n  [{:id 1\r\n    :name \"Can Ali\"\r\n    :department :department/matematik}\r\n   {:id 2\r\n    :name \"Ali Deniz\"\r\n    :department :department/fizik}\r\n   ])\r\n\r\n#?(:clj\r\n   (defn student-filter [?s]\r\n     (->> db\r\n          (filter (fn [m] (str/includes? (m :name) (str ?s))))\r\n          (into []))))\r\n(e/defn Student []\r\n        (e/client\r\n          (dom/h1 (dom/text \"Student Registration\"))\r\n          (let [!search (atom \"\")\r\n                search (e/watch !search)]\r\n            (e/server\r\n              (let [system-props (into [] (student-filter search))]\r\n                (e/client\r\n                  (dom/div (dom/props {:style {:color \"gray\"}}))\r\n                  (ui/input search (e/fn [name] (reset! !search name))\r\n                            (dom/props {:type \"search\" :placeholder \"name\"}))\r\n                  (dom/h2 (dom/text \"Student List\"))\r\n                  (dom/table\r\n                    (e/server\r\n                      (e/for [{:keys [id name department]} system-props]\r\n                                (e/client\r\n                                  (dom/tr\r\n                                    ((dom/td (dom/text id))\r\n                                     (dom/td (dom/text name))\r\n                                     (dom/td (dom/props {:style {:white-space :nowrap}}) (dom/text department))))))))))))))\r\n\r\n\r\n(comment\r\n(student-filter \"Can\")\r\n(defn student-filter [?s]\r\n  (->> db\r\n       (filter (fn [m] (str/includes? (m :name) (str ?s))))\r\n       (into [])))\r\n(student-filter \"Can\")\r\n)\r\n"]}