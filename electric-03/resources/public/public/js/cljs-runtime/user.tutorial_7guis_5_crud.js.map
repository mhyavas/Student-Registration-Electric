{"version":3,"sources":["user/tutorial_7guis_5_crud.cljc"],"mappings":";AAWA,AAAKA,yCAAO,6CAAA,2CAAA,4DAAA,KAAA,uDAAA,2CAAA,qDAAA,GAAA,2DAAA,WAAA,zXAACC,ibAGa,4GAAA,IAAA,2CAAA,qDAAA,OAAA,2DAAA,lRAACC;AAI3B,AAAKC,qCAAQ,AAACC,gDAAQC,qBAAM,6CAAA,7CAACJ,kDAAQK;AAErC,0CAAA,1CAAMC,4FAASC;AAAf,AACE,OAACC,mDAAMT,uCAAO,WAAKU;AAAL,AAAY,kEAAA,iHAAA,5KAACC,qDAAMD,kEAAgBF,4GAAW,qDAAA,mFAAA,xIAACI,+CAAOF,iJAAcF;;;AAEpF,4CAAA,5CAAMK,gGAAWC;AAAjB,AACE,oHAAA,mFAAA,uDAAA,vPAACL,mDAAMT,uCAAOe,0NAAwBD;;AAExC,+CAAA,/CAAME,sGAAcC;AAApB,AACE,oHAAA,mFAAA,uDAAA,vPAACR,mDAAMT,uCAAOe,gOAA2BE;;AAE3C,0CAAA,1CAAMC;AAAN,AAAiB,OAACT,mDAAMT,uCAAO,WAAAmB;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAAA,RAAwBV;YAAxB,AAAAY,4CAAAF,eAAA,nEAAaG;AAAb,oGACMb,/CACF,qDAAA,rDAACc,6GAAcC,gBAAM,AAACtB,qCAASoB,vNAC/B,8NAAA,uDAAA,2CAAA,qDAAA,GAAA,2DAAA,5aAACZ;;;AACpC,0CAAA,1CAAMe;AAAN,AAAiB,OAACjB,mDAAMT,uCAAO,WAAA2B;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAP,4BAAAO;YAAAA,RAA2BlB;eAA3B,AAAAY,4CAAAM,eAAA,tEAAaC;AAAb,AAAmC,4DAAA,rDAACL,+CAAOd,8DAAaoB,iBAAOD;;;AAC9F,0CAAA,1CAAME;AAAN,AAAiB,OAACtB,mDAAMT,uCAAO,WAAAgC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAZ,4BAAAY;YAAAA,RAAiCvB;eAAjC,AAAAY,4CAAAW,eAAA,tEAAaJ;YAAb,AAAAP,4CAAAW,eAAA,nEAAsBV;AAAtB,AACE,gCAAA,mFAAA,5GAACR,mBAASL,iJAAcmB,iBAAUN;;;AAEnE,0CAAA,1CAAMW,4FAAcC,UAAUC;AAA9B,AACE,GAAI,AAACC,uBAAOD;AACVD;;AACA,IAAMC,aAAO,AAACE,0BAAeF;AAA7B,AACE,OAACG,oBAAU,eAAAC,JAAKE,EAAEC;AAAP,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAApB,4BAAAoB;WAAA,AAAAnB,4CAAAmB,eAAA,lEAAiB3B;cAAjB,AAAAQ,4CAAAmB,eAAA,rEAAsBxB;AAAtB,AACE,GAAI,EAAI,AAAC2B,+BAAc,AAACN,0BAAexB,MAAMsB,iBACvC,AAACQ,+BAAc,AAACN,0BAAerB,SAASmB;AAC5CM;;AACA,OAACG,+CAAOH,EAAEC;;GACvBR,UAAUA;;;AAIlB","names":["user.tutorial-7guis-5-crud/!state","cljs.core.atom","cljs.core.sorted_map","user.tutorial-7guis-5-crud/next-id","cljs.core.partial","cljs.core/swap!","cljs.core/inc","user.tutorial-7guis-5-crud/select!","id","cljs.core.swap_BANG_","state","cljs.core.assoc","cljs.core.get_in","user.tutorial-7guis-5-crud/set-name!","name","cljs.core/assoc-in","user.tutorial-7guis-5-crud/set-surname!","surname","user.tutorial-7guis-5-crud/create!","p__49735","map__49736","cljs.core/--destructure-map","cljs.core.get","stage","cljs.core.update","cljs.core/assoc","user.tutorial-7guis-5-crud/delete!","p__49737","map__49738","selected","cljs.core/dissoc","user.tutorial-7guis-5-crud/update!","p__49739","map__49740","user.tutorial-7guis-5-crud/filter-names","names-map","needle","cljs.core/empty?","clojure.string/lower-case","cljs.core/reduce-kv","p__49742","map__49743","r","k","clojure.string/includes?","cljs.core.dissoc"],"sourcesContent":["(ns user.tutorial-7guis-5-crud\r\n  (:require [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.electric-ui4 :as ui4]\r\n            [clojure.string :as str]))\r\n\r\n;;; Instructions\r\n;; https://eugenkiss.github.io/7guis/tasks#crud\r\n\r\n;;; App state\r\n\r\n(def !state (atom {:selected nil\r\n                   :stage {:name \"\"\r\n                           :surname \"\"}\r\n                   :names (sorted-map 0 {:name \"Emil\", :surname \"Hans\"})}))\r\n\r\n;;; Business logic\r\n\r\n(def next-id (partial swap! (atom 0) inc))\r\n\r\n(defn select! [id]\r\n  (swap! !state (fn [state] (assoc state :selected id, :stage (get-in state [:names id])))))\r\n\r\n(defn set-name! [name]\r\n  (swap! !state assoc-in [:stage :name] name))\r\n\r\n(defn set-surname! [surname]\r\n  (swap! !state assoc-in [:stage :surname] surname))\r\n\r\n(defn create! [] (swap! !state (fn [{:keys [stage] :as state}]\r\n                                 (-> state\r\n                                   (update :names assoc (next-id) stage)\r\n                                   (assoc :stage {:name \"\", :surname \"\"})))))\r\n(defn delete! [] (swap! !state (fn [{:keys [selected] :as state}] (update state :names dissoc selected))))\r\n(defn update! [] (swap! !state (fn [{:keys [selected stage] :as state}]\r\n                                 (assoc-in state [:names selected] stage))))\r\n\r\n(defn filter-names [names-map needle]\r\n  (if (empty? needle)\r\n    names-map\r\n    (let [needle (str/lower-case needle)]\r\n      (reduce-kv (fn [r k {:keys [name surname]}]\r\n                   (if (or (str/includes? (str/lower-case name) needle)\r\n                         (str/includes? (str/lower-case surname) needle))\r\n                     r\r\n                     (dissoc r k)))\r\n        names-map names-map))))\r\n\r\n;;; Presentation\r\n\r\n(e/defn CRUD []\r\n  (e/client\r\n    (dom/h1 (dom/text \"7 GUIs: CRUD\"))\r\n    (let [state (e/watch !state)\r\n          selected (:selected state)]\r\n      (dom/div (dom/props {:style {:display :grid\r\n                                   :grid-gap \"0.5rem\"\r\n                                   :align-items :baseline\r\n                                   :grid-template-areas \"'a b c c'\\n\r\n                                                         'd d e f'\\n\r\n                                                         'd d g h'\\n\r\n                                                         'd d i i'\\n\r\n                                                         'j j j j'\"}})\r\n        (dom/span (dom/props {:style {:grid-area \"a\"}})\r\n          (dom/text \"Filter prefix:\"))\r\n        (let [!needle (atom \"\"), needle (e/watch !needle)]\r\n          (ui4/input needle (e/fn [v] (reset! !needle v))\r\n            (dom/props {:style {:grid-area \"b\"}}))\r\n          (dom/ul (dom/props {:style {:grid-area \"d\"\r\n                                      :background-color :white\r\n                                      :list-style-type :none\r\n                                      :padding 0\r\n                                      :border \"1px gray solid\"\r\n                                      :height \"100%\"}})\r\n            (e/for [entry (filter-names (:names state) needle)]\r\n              (let [id (key entry)\r\n                    value (val entry)]\r\n                (dom/li (dom/text (:surname value) \", \" (:name value))\r\n                  (dom/props {:style {:cursor :pointer\r\n                                      :color (if (= selected id) :white :inherit)\r\n                                      :background-color (if (= selected id) :blue :inherit)\r\n                                      :padding \"0.1rem 0.5rem\"}})\r\n                  (dom/on \"click\" (e/fn [_] (select! id))))))))\r\n        (let [stage (:stage state)]\r\n          (dom/span (dom/props {:style {:grid-area \"e\"}}) (dom/text \"Name:\"))\r\n          (ui4/input (:name stage) (e/fn [v] (set-name! v))\r\n            (dom/props {:style {:grid-area \"f\"}}))\r\n          (dom/span (dom/props {:style {:grid-area \"g\"}}) (dom/text \"Surname:\"))\r\n          (ui4/input (:surname stage) (e/fn [v] (set-surname! v))\r\n            (dom/props {:style {:grid-area \"h\"}})))\r\n        (dom/div (dom/props {:style {:grid-area \"j\"\r\n                                     :display :grid\r\n                                     :grid-gap \"0.5rem\"\r\n                                     :grid-template-columns \"auto auto auto 1fr\"}})\r\n          (ui4/button (e/fn [] (create!)) (dom/text \"Create\"))\r\n          (ui4/button (e/fn [] (update!)) (dom/text \"Update\")\r\n            (dom/props {:disabled (not selected)}))\r\n          (ui4/button (e/fn [] (delete!)) (dom/text \"Delete\")\r\n            (dom/props {:disabled (not selected)})))))))\r\n"]}