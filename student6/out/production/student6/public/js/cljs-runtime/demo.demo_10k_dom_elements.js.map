{"version":3,"sources":["demo/demo_10k_dom_elements.cljc"],"mappings":";AAKA,yCAAA,zCAAKA;AACL,8CAAA,9CAAKC;AACL,AAEA,AAGG,iCAAA,jCAAMC,0EAAKC;AAAX,AACE,OAACC,wBAAU,iDAAWC;AAAX,AACE,8EAAA,QAAA,2CAAA,4EAAA,7MAACC,2EAAkBH;;AACnB,6EAAA,yBAAA,rGAACE,uCAAAA,6CAAAA;;AACD;AAAA,AACE,qFAAA,QAAA,2CAAA,4EAAA,7MAACC,2EAAkBH;;;;AAEvC","names":["demo.demo-10k-dom-elements/!moves","demo.demo-10k-dom-elements/!board-size","demo.demo-10k-dom-elements/hot","el","missionary.core/observe","!","hyperfiddle.electric_dom2.set_property_BANG_"],"sourcesContent":["(ns demo.demo-10k-dom-elements\r\n  (:require [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [missionary.core :as m]))\r\n\r\n(def !moves #?(:clj (atom []) :cljs nil))\r\n(def !board-size #?(:clj (atom 10000) :cljs nil))\r\n(e/def board-size (e/server (e/watch !board-size)))\r\n\r\n(comment (do (reset! !moves []) (reset! !board-size 2000)))\r\n\r\n#?(:cljs\r\n   (defn hot [el]\r\n     (m/observe (fn mount [!]\r\n                  (dom/set-property! el \"style\" {:background-color \"red\"})\r\n                  (! nil) ; initial value\r\n                  (fn unmount []\r\n                    (dom/set-property! el \"style\" {:background-color nil}))))))\r\n\r\n(e/defn App []\r\n  (e/client\r\n    (dom/h1 (dom/text \"10k dom elements (multiplayer)\"))\r\n    ; fixed width font + inline-block optimizes browser layout\r\n    (dom/element \"style\" (dom/text \".board div { width: 1em; height: 1em; display: inline-block; border: 1px #eee solid; }\"))\r\n    (dom/element \"style\" (dom/text \".board { font-family: monospace; font-size: 7px; margin: 0; padding: 0; line-height: 0; }\"))\r\n    (dom/div {:class \"board\"}\r\n      (e/for [i (range 0 board-size)]\r\n        (dom/div\r\n          (dom/on \"mouseover\" (e/fn [e] (e/server (swap! !moves conj i))))))\r\n      (e/for [i (e/server (e/watch !moves))]\r\n        ; differential side effects, indexed by HTMLCollection\r\n        (new (hot (.item (.. dom/node -children) i)))))))\r\n\r\n;(defn countdown [x]                     ; Count down to 0 then terminate.\r\n;  (m/relieve {} (m/ap (loop [x x]\r\n;                        (m/amb x\r\n;                          (if (pos? x)\r\n;                            (do (m/? (m/sleep 100))\r\n;                                (recur (dec x)))\r\n;                            x))))))\r\n;\r\n;(defn cell-color [x]\r\n;  (if (> x 1) ; In Electric-land, this conditional would introduce a switch and trigger a ws message for client-server frame coordination.\r\n;    (apply css-rgb-str (hsv->rgb (/ 0 360)\r\n;                 (-> x (/ 7.5) (* 1.33))\r\n;                 0.95))\r\n;    \"#eee\"))\r\n;\r\n;#?(:cljs (defn x [!el]\r\n;           (m/observe (fn mount [!]\r\n;                        (let [!o (js/MutationObserver !)]\r\n;                          (.observe !o !el #js {\"attributes\" true})\r\n;                          (fn unmount [] (.disconnect !o)))))))"]}