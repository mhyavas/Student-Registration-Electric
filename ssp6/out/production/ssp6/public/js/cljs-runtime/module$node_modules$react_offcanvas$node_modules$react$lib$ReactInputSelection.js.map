{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$ReactInputSelection.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/ReactInputSelection.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$ReactInputSelection\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInputSelection\n */\n\n'use strict';\n\nvar ReactDOMSelection = require('./ReactDOMSelection');\n\nvar containsNode = require('fbjs/lib/containsNode');\nvar focusNode = require('fbjs/lib/focusNode');\nvar getActiveElement = require('fbjs/lib/getActiveElement');\n\nfunction isInDocument(node) {\n  return containsNode(document.documentElement, node);\n}\n\n/**\n * @ReactInputSelection: React input selection module. Based on Selection.js,\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\n * assume buttons have range selections allowed).\n * Input selection module for React.\n */\nvar ReactInputSelection = {\n\n  hasSelectionCapabilities: function (elem) {\n    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');\n  },\n\n  getSelectionInformation: function () {\n    var focusedElem = getActiveElement();\n    return {\n      focusedElem: focusedElem,\n      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null\n    };\n  },\n\n  /**\n   * @restoreSelection: If any selection information was potentially lost,\n   * restore it. This is useful when performing operations that could remove dom\n   * nodes and place them back in, resulting in focus being lost.\n   */\n  restoreSelection: function (priorSelectionInformation) {\n    var curFocusedElem = getActiveElement();\n    var priorFocusedElem = priorSelectionInformation.focusedElem;\n    var priorSelectionRange = priorSelectionInformation.selectionRange;\n    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {\n        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);\n      }\n      focusNode(priorFocusedElem);\n    }\n  },\n\n  /**\n   * @getSelection: Gets the selection bounds of a focused textarea, input or\n   * contentEditable node.\n   * -@input: Look up selection bounds of this input\n   * -@return {start: selectionStart, end: selectionEnd}\n   */\n  getSelection: function (input) {\n    var selection;\n\n    if ('selectionStart' in input) {\n      // Modern browser with input or textarea.\n      selection = {\n        start: input.selectionStart,\n        end: input.selectionEnd\n      };\n    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {\n      // IE8 input.\n      var range = document.selection.createRange();\n      // There can only be one selection per document in IE, so it must\n      // be in our element.\n      if (range.parentElement() === input) {\n        selection = {\n          start: -range.moveStart('character', -input.value.length),\n          end: -range.moveEnd('character', -input.value.length)\n        };\n      }\n    } else {\n      // Content editable or old IE textarea.\n      selection = ReactDOMSelection.getOffsets(input);\n    }\n\n    return selection || { start: 0, end: 0 };\n  },\n\n  /**\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses\n   * the input.\n   * -@input     Set selection bounds of this input or textarea\n   * -@offsets   Object of same form that is returned from get*\n   */\n  setSelection: function (input, offsets) {\n    var start = offsets.start;\n    var end = offsets.end;\n    if (typeof end === 'undefined') {\n      end = start;\n    }\n\n    if ('selectionStart' in input) {\n      input.selectionStart = start;\n      input.selectionEnd = Math.min(end, input.value.length);\n    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {\n      var range = input.createTextRange();\n      range.collapse(true);\n      range.moveStart('character', start);\n      range.moveEnd('character', end - start);\n      range.select();\n    } else {\n      ReactDOMSelection.setOffsets(input, offsets);\n    }\n  }\n};\n\nmodule.exports = ReactInputSelection;\n};"],
"names":["shadow$provide","global","require","module","exports","ReactDOMSelection","containsNode","focusNode","getActiveElement","ReactInputSelection","hasSelectionCapabilities","elem","nodeName","toLowerCase","type","contentEditable","getSelectionInformation","focusedElem","selectionRange","getSelection","restoreSelection","priorSelectionInformation","curFocusedElem","priorFocusedElem","priorSelectionRange","document","documentElement","setSelection","input","selection","start","selectionStart","end","selectionEnd","range","createRange","parentElement","moveStart","value","length","moveEnd","getOffsets","offsets","Math","min","createTextRange","collapse","select","setOffsets"]
}
