{"version":3,"sources":["hyperfiddle/electric/impl/runtime.cljc"],"mappings":"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","names":["hyperfiddle.electric.impl.runtime/fail","x","hyperfiddle.electric.impl.runtime/failure","p1__43901#","cljs.core.some_fn","js/hyperfiddle.electric.Failure","hyperfiddle.electric.impl.runtime/pending","js/hyperfiddle.electric.Pending","hyperfiddle.electric.impl.runtime/error","msg","js/Error","hyperfiddle.electric.impl.runtime/pst","e","js/console.error","hyperfiddle.electric.impl.runtime/select-debug-info","debug-info","cljs.core.merge","cljs.core/select-keys","contrib.data/select-ns","hyperfiddle.electric.impl.runtime/check-failure","<x","missionary.core.latest","hyperfiddle.electric.debug/error","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","hyperfiddle.electric.impl.runtime/latest-apply","seq43921","G__43922","cljs.core/first","cljs.core/next","self__5754__auto__","args","cljs.core.apply","missionary.core/latest","f","temp__5802__auto__","err","cljs.core.assoc","e43930","hyperfiddle.electric.impl.runtime/latest-first","cljs.core.partial","y","hyperfiddle.electric.impl.runtime/pure","missionary.core/cp*","cr43936-state","cr43936-place-0","cr43936-exception","e43943","cloroutine.impl/coroutine","G__43944","cljs.core.object_array","cr43936-block-0","hyperfiddle.electric.impl.runtime/empty-event","unused__13414__auto__","self__","G__43958","args43952","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","hyperfiddle.electric.impl.runtime/It","hyperfiddle.electric.impl.runtime/->It","state","cancel","transfer","_","hyperfiddle.electric.impl.runtime/lift-cancelled","cljs.core/comp","it","hyperfiddle.electric.impl.runtime/t_hyperfiddle$electric$impl$runtime43974","cljs.core/deref","e43992","js/missionary.Cancelled","hyperfiddle.electric.impl.runtime/signal","missionary.core/signal!","hyperfiddle.electric.impl.runtime/this","cljs.core/volatile!","hyperfiddle.electric.impl.runtime/context-slot-root","hyperfiddle.electric.impl.runtime/context-slot-local-id","hyperfiddle.electric.impl.runtime/context-slot-remote-id","hyperfiddle.electric.impl.runtime/context-slot-pending-rpos","hyperfiddle.electric.impl.runtime/context-slot-pending-wpos","hyperfiddle.electric.impl.runtime/context-slot-pending-buffer","hyperfiddle.electric.impl.runtime/context-slot-frame-store","hyperfiddle.electric.impl.runtime/context-slot-event","hyperfiddle.electric.impl.runtime/context-slot-check","hyperfiddle.electric.impl.runtime/context-slot-notifier","hyperfiddle.electric.impl.runtime/context-slot-terminator","hyperfiddle.electric.impl.runtime/context-slot-incoming","hyperfiddle.electric.impl.runtime/context-slots","hyperfiddle.electric.impl.runtime/tier-slot-parent","hyperfiddle.electric.impl.runtime/tier-slot-position","hyperfiddle.electric.impl.runtime/tier-slot-buffer","hyperfiddle.electric.impl.runtime/tier-slot-size","hyperfiddle.electric.impl.runtime/tier-slot-foreigns","hyperfiddle.electric.impl.runtime/tier-slot-hooks","hyperfiddle.electric.impl.runtime/tier-slot-vars","hyperfiddle.electric.impl.runtime/tier-slot-remote","hyperfiddle.electric.impl.runtime/tier-slots","hyperfiddle.electric.impl.runtime/frame-slot-context","hyperfiddle.electric.impl.runtime/frame-slot-parent","hyperfiddle.electric.impl.runtime/frame-slot-id","hyperfiddle.electric.impl.runtime/frame-slot-position","hyperfiddle.electric.impl.runtime/frame-slot-foreign","hyperfiddle.electric.impl.runtime/frame-slot-static","hyperfiddle.electric.impl.runtime/frame-slot-dynamic","hyperfiddle.electric.impl.runtime/frame-slot-variables","hyperfiddle.electric.impl.runtime/frame-slot-sources","hyperfiddle.electric.impl.runtime/frame-slot-targets","hyperfiddle.electric.impl.runtime/frame-slot-inputs","hyperfiddle.electric.impl.runtime/frame-slot-tiers","hyperfiddle.electric.impl.runtime/frame-slot-constants","hyperfiddle.electric.impl.runtime/frame-slots","hyperfiddle.electric.impl.runtime/input-slot-frame","hyperfiddle.electric.impl.runtime/input-slot-notifier","hyperfiddle.electric.impl.runtime/input-slot-terminator","hyperfiddle.electric.impl.runtime/input-slot-current","hyperfiddle.electric.impl.runtime/input-slot-dirty","hyperfiddle.electric.impl.runtime/input-slot-check","hyperfiddle.electric.impl.runtime/input-slot-pending","hyperfiddle.electric.impl.runtime/input-slot-cancel","hyperfiddle.electric.impl.runtime/input-slots","hyperfiddle.electric.impl.runtime/output-slot-input","hyperfiddle.electric.impl.runtime/output-slot-id","hyperfiddle.electric.impl.runtime/output-slot-iterator","hyperfiddle.electric.impl.runtime/output-slot-current","hyperfiddle.electric.impl.runtime/output-slot-dirty","hyperfiddle.electric.impl.runtime/output-slot-done","hyperfiddle.electric.impl.runtime/output-slot-prev","hyperfiddle.electric.impl.runtime/output-slot-next","hyperfiddle.electric.impl.runtime/output-slot-time","hyperfiddle.electric.impl.runtime/output-slots","G__44059","hyperfiddle.electric.impl.runtime/aswap","args-arr__5794__auto__","argseq__5795__auto__","seq44050","G__44051","G__44052","G__44053","G__44054","G__44055","G__44056","arr","slot","G__44065","a","G__44071","G__44072","b","G__44073","G__44074","G__44075","c","G__44076","G__44077","G__44078","G__44079","ds","hyperfiddle.electric.impl.runtime/doto-aset","k","v","G__44080","hyperfiddle.electric.impl.runtime/make-context","G__44081","cljs.core/identity","cljs.core/transient","hyperfiddle.electric.impl.runtime/make-tier","parent","position","G__44086","hyperfiddle.electric.impl.runtime/make-frame","context","id","foreign","static","dynamic","variable-count","source-count","constant-count","target-count","output-count","input-count","buffer","vars","boot","tier-count","frame","G__44096","cljs.core/count","n__5636__auto__","i","hyperfiddle.electric.impl.runtime.aswap","cljs.core/assoc!","prevs","cljs.core/reduce-kv","m","prev","proc","result","hyperfiddle.electric.impl.runtime/input-ready","input","fexpr__44105","hyperfiddle.electric.impl.runtime/output-dirty","output","dirty","check","fexpr__44112","hyperfiddle.electric.impl.runtime/output-spawn","G__44124","G__44125","fexpr__44123","hyperfiddle.electric.impl.runtime/make-output","hyperfiddle.electric.impl.runtime/input-cancel","fexpr__44136","hyperfiddle.electric.impl.runtime/input-change","hyperfiddle.electric.impl.runtime/input-freeze","fexpr__44144","hyperfiddle.electric.impl.runtime/update-event","seq44150","G__44151","G__44152","G__44153","temp__5806__auto__","event","cljs.core/update","fexpr__44159","hyperfiddle.electric.impl.runtime/input-check","path","hyperfiddle.electric.impl.runtime.update_event","cljs.core/conj","cljs.core._EQ_","wpos","t","p","n","cljs.core/inc","cljs.core/assoc","hyperfiddle.electric.impl.runtime/input-transfer","fexpr__44176","G__44177","fexpr__44179","hyperfiddle.electric.impl.runtime/make-input","deps","cljs.core.reduce","hyperfiddle.electric.impl.runtime/input-spawn","hyperfiddle.electric.impl.runtime/check-unbound-var","hyperfiddle.electric.impl.runtime/static","hyperfiddle.electric.impl.runtime/dynamic","hyperfiddle.electric.impl.runtime/tree","tiers","cljs.core.conj","tier","buf","G__44221","hyperfiddle.electric.impl.runtime/find-scope","s","cljs.core.into","cljs.core/keys","hyperfiddle.electric.impl.runtime/frame-walk-tiers","step","cb","start","size","back","back-inc-size","stop","cljs.core.get","hyperfiddle.electric.impl.runtime/tier-walk-frames","hyperfiddle.electric.impl.runtime/notify-rotate","anchor","cljs.core/contains?","target","hyperfiddle.electric.impl.runtime/array-call","fexpr__44232","hyperfiddle.electric.impl.runtime/frame-dispose","hyperfiddle.electric.impl.runtime/frame-rotate","to","from","cljs.core/compare","j","hyperfiddle.electric.impl.runtime/move","hyperfiddle.electric.impl.runtime/frame-cancel","temp__5808__auto__","pos","hyperfiddle.electric.impl.runtime/acopy","src","src-off","dest","dest-off","hyperfiddle.electric.impl.runtime/constructor","par","cap","G__44247","args44246","hyperfiddle.electric.impl.runtime/FrameIterator","hyperfiddle.electric.impl.runtime/->FrameIterator","hyperfiddle.electric.impl.runtime/constant","ctor","consts","missionary.core/watch","cljs.core.atom","G__44253","G__44254","cljs.core/dissoc!","hyperfiddle.electric.impl.failer/run","hyperfiddle.electric.impl.runtime/inject","<y","foreigns","hyperfiddle.electric.impl.runtime/bind","seq44255","G__44256","e44257","fexpr__44258","hyperfiddle.electric.impl.runtime/with","cljs.core/vreset!","G__44260","hyperfiddle.electric.impl.runtime/clause","G__44261","hyperfiddle.electric.debug/unwrap","G__44262","hyperfiddle.electric.impl.runtime/recover","catch","hyperfiddle.electric.impl.yield2/yield","<c","G__44270","hyperfiddle.electric.impl.runtime/variable","<<x","cr44277-state","cr44277-place-3","missionary.core/unpark","cr44277-place-4","cr44277-place-5","cr44277-place-6","cr44277-place-7","cr44277-block-5","cr44277-block-3","cr44277-exception","e44299","cr44277-block-7","cr44277-place-2","cr44277-block-2","missionary.core/switch","e44300","cr44277-place-0","cr44277-place-14","cr44277-place-15","cr44277-place-16","cr44277-block-8","e44301","cr44277-place-1","cr44277-block-1","e44302","e44303","cr44277-place-13","cr44277-block-6","e44304","cr44277-place-12","e44305","cr44277-place-8","cr44277-place-9","cr44277-place-10","cr44277-place-11","cr44277-block-4","e44307","cr44277-place-17","e44314","G__44319","cr44277-block-0","G__44312","G__44313","fexpr__44311","hyperfiddle.electric.impl.runtime/source","G__44320","hyperfiddle.electric.impl.runtime/target","hyperfiddle.electric.impl.runtime/hook","G__44321","G__44322","cljs.core/dissoc","hyperfiddle.electric.impl.runtime/unbound","hyperfiddle.electric.impl.runtime/subject-at","!","hyperfiddle.electric.impl.runtime/context-ack","rpos","cljs.core/dec","hyperfiddle.electric.impl.runtime/context-cancel","hyperfiddle.electric.impl.runtime/context-transfer","fexpr__44325","larger","split","o","hyperfiddle.electric.impl.runtime/eval-tree-inst","inst","G__44329","cljs.core/Keyword","map__44330","cljs.core/--destructure-map","vec__44331","cljs.core.nth","vec__44334","target-frame","target-slot","source-frame","source-slot","G__44338","G__44339","fexpr__44337","p__44340","vec__44341","hyperfiddle.electric.impl.runtime/eval-change-inst","value","p__44344","vec__44345","hyperfiddle.electric.impl.runtime/eval-freeze-inst","p__44348","map__44349","hyperfiddle.electric.impl.runtime/parse-event","acks","tree","change","freeze","hyperfiddle.electric.impl.runtime/process-incoming-events",">incoming","missionary.core/sample","cljs.core/reduce","hyperfiddle.electric.impl.runtime/write-outgoing-events","write",">events","cr44350-state","cr44350-place-0","cr44350-place-1","cr44350-block-1","missionary.core/fork","cr44350-exception","e44362","cr44350-place-2","cr44350-place-3","cr44350-place-4","cr44350-place-5","cr44350-place-6","cr44350-place-7","cr44350-block-4","cr44350-block-2","e44363","cr44350-place-8","cr44350-place-9","cr44350-place-10","cr44350-block-3","missionary.core/park","e44367","cr44350-place-11","cr44350-block-5","e44370","cr44350-place-12","e44371","e44372","G__44373","cr44350-block-0","missionary.core/ap-run","G__44365","G__44366","fexpr__44364","cljs.core/=","G__44369","fexpr__44368","hyperfiddle.electric.impl.runtime/peer","var-count","?read","hyperfiddle$electric$impl$runtime$peer_$_rec","on-error","missionary.core/reactor-call","missionary.core/stream!","<main","cljs.core.repeat","G__44374","missionary.core/relieve","cljs.core/into","cljs.core/vector","missionary.core/observe","hyperfiddle.electric.impl.runtime/collapse","seq44375","G__44376","G__44377","G__44378","cljs.core/iterate","cljs.core/pop","cljs.core.transduce","cljs.core.comp","cljs.core.map","cljs.core/peek","cljs.core.take","hyperfiddle.electric.impl.runtime/snapshot","seq44379","G__44380","G__44381","env","cljs.core.update","hyperfiddle.electric.impl.runtime/reverse-index","cljs.core/vec","hyperfiddle.electric.impl.runtime/empty-frame","p__44382","map__44383","hyperfiddle.electric.impl.runtime/compile","nop","sub","pub","inject","lift","vget","bind","invoke","do","global","literal","variable","source","constant","main","fns","off","idx","dyn","G__44384","G__44385","G__44386","walk","arg","cljs.core/max","G__44388","G__44389","fexpr__44387","d","G__44390","G__44391","cljs.core/cons","G__44392","cljs.core.symbol","G__44393","G__44394","hyperfiddle.electric.impl.runtime/sym","seq44395","self__5755__auto__","cljs.core/seq","clojure.string.join","hyperfiddle.electric.impl.runtime/emit","prefix","hyperfiddle.electric.impl.runtime.sym","cljs.core.sequence","cljs.core.concat","cljs.core/List","form","cont","_ns","forms","remote","cljs.core.mapv","G__44407","hyperfiddle.electric.impl.runtime/juxt-with","seq44402","G__44403","G__44404","G__44405","G__44406","g","G__44408","G__44409","G__44410","G__44411","G__44412","h","G__44413","G__44414","G__44415","G__44416","G__44417","G__44418","G__44419","G__44420","G__44421","G__44422","G__44423","G__44424","G__44425","G__44426","G__44427","G__44428","G__44429","G__44430","G__44431","G__44432","G__44433","G__44434","G__44435","G__44436","G__44437","js","p1__44396#","p1__44397#","p1__44398#","p1__44399#","p1__44400#","hyperfiddle.electric.impl.runtime/globals","program","cljs.core/tree-seq","cljs.core/coll?","cljs.core.eduction","cljs.core.filter","cljs.core/vector?","p__44438","vec__44439","cljs.core/second","cljs.core.distinct","cljs.core.sort_by","cljs.core.juxt","cljs.core/namespace","cljs.core/name","hyperfiddle.electric.impl.runtime/missing-exports","resolvef","p1__44442#","cljs.core/symbol","hyperfiddle.electric.impl.runtime/dynamic-resolve","nf","G__44444","hyperfiddle.electric.impl.runtime/eval","hyperfiddle.electric.impl.runtime.eval","cljs.core/constantly","ns","G__44449","cljs.core/find-ns","*ns*-orig-val__44450","*ns*-temp-val__44451","cljs.core/*ns*","cljs.core/eval","pubs","G__44446","G__44447","G__44448","res","r","G__44445","cljs.core.ex_info","hyperfiddle.electric.impl.runtime/queue","q"],"sourcesContent":["(ns ^:no-doc hyperfiddle.electric.impl.runtime\r\n  (:refer-clojure :exclude [eval compile])\r\n  (:require [hyperfiddle.electric.impl.yield2 :refer [yield]]\r\n            [hyperfiddle.electric.impl.failer :as failer]\r\n            [hyperfiddle.electric.impl.local :as l]\r\n            [hyperfiddle.electric.impl.ir :as ir]\r\n            [hyperfiddle.electric.debug :as dbg]\r\n            [missionary.core :as m]\r\n            [hyperfiddle.rcf :refer [tests]]\r\n            [clojure.string :as str]\r\n            [contrib.data :as data])\r\n  (:import missionary.Cancelled\r\n           (hyperfiddle.electric Failure Pending Remote)\r\n           #?(:clj (clojure.lang IFn IDeref Atom))))\r\n\r\n;; An Electric program is a tree, which structure is dynamically maintained.\r\n;; Two peers are synchronized (through a protocol) such that the tree structure is identicaly on both peers.\r\n;; Two type of nodes:\r\n;; [Frames] : A piece of DAG with a static structure. Won't be rearanged at runtime. (AKA Static Frame)\r\n;;            - A set of compiled s-expressions + a set of signals weaving these expressions + N inputs + N outputs\r\n;;            - A frame has 2 instances, one on client, one on server.\r\n;;            - Server's outputs are client's inputs and vice-versa.\r\n;;            - Frames are processes.\r\n;;            - Image: a stackframe but for a DAG. A stackframe is allocated to compute the result of a function.\r\n;;              It is volatile (disposable) in a stack-based program. Since Electric is reactive, the frame is not disposable.\r\n;;              \u00abReactiveFrame\u00bb \u00abDistributed Reactive Frame\u00bb\r\n;; [Tiers] : For each `new` in a frame, a managed process is created. Tiers are child processes of frames. (AKA Dynamic Frame)\r\n;;             - Parent process of a tier is always a frame.\r\n;;             - Parent process of a frame is alawys a tier.\r\n;;             - Specificity: Frames have a fixed set of children, tiers have a dynamic set of children, they can spawn new frames anytime.\r\n;;                            Child frames of a tier are positioned (there is a well defined traversal order)\r\n;;                            Node order (positions) can change at runtime because tiers can spawn dynamically (e.g.: p/for).\r\n;;             - Some tiers don't have child frames : e.g. (new (m/watch .)), no child frames, no input, no output\r\n;;             - Some frames don't have child tiers : e.g. a frame without any `new`, no variability.\r\n;;             - (image: an ordered tree with different kind of nodes at each generation)\r\n\r\n;; Network protocol\r\n;; Each peer streams events to its remote peer via a bidirectional channel. An event is a clojure map with 4 entries :\r\n;; * :acks is a non-negative integer counting the number of non-empty changesets received by the peer sending the event\r\n;;   since the previous event was sent.\r\n;; * :tree is a vector of tree instructions. Order of instructions matters. A tree instruction describes an atomic mutation of the tree, it is a map\r\n;;   with a mandatory :op entry defining the instruction type and defining the rest of the keyset. Instructions are :\r\n;;   * :create appends a new frame at the end of a tier, owned by the peer sending the event. The frame constructor is\r\n;;     defined by the entry :target, the endpoint is defined by the entry :source. Both are ordered pairs of two\r\n;;     numbers, the frame id and the position of the target or the source in the frame.\r\n;;   * :rotate performs of cyclic permutation of frames in a tier, owned by the peer sending the event. The frame\r\n;;     identified by the :frame entry is moved to position defined by the :position entry. If the cycle is trivial (A -> A), the\r\n;;     frame is removed.\r\n;;   * :remove dissociates a frame from the index. legacy hack, should be removed.\r\n;; * :change is a map associating ports with values. A port is absolute for the system, inputs and output relative terms for a port (it only make sense from a single peer perspective).\r\n;;   A port is represented as an ordered pair of two numbers, a frame id\r\n;;   and the position of this port in the frame. The value is the new state of port. (:assign could be a synonym)\r\n;; * :freeze is a set of ports. Each port present in this set must be considered terminated (i.e. its state won't ever\r\n;;   change again).\r\n;; A frame id is negative if the frame is owned by the peer sending the event, positive if the frame is owned by the\r\n;; peer receiving the event, zero is the root frame.\r\n\r\n\r\n(defn fail [x] (throw x))\r\n\r\n(def failure (some-fn #(when (instance? Failure %) %)))\r\n\r\n(def pending (Failure. (Pending.)))\r\n\r\n(defn error [^String msg] ; Could be ex-info (ExceptionInfo inherits Error or js/Error)\r\n  (#?(:clj Error. :cljs js/Error.) msg))\r\n\r\n(defn pst [e]\r\n  #?(:clj (.printStackTrace ^Throwable e)\r\n     :cljs (js/console.error e)))\r\n\r\n(defn select-debug-info [debug-info]\r\n  (merge (select-keys debug-info [::ir/op]) (data/select-ns :hyperfiddle.electric.debug debug-info)))\r\n\r\n(defn check-failure [debug-info <x]\r\n  (m/latest (fn [x]\r\n              (if (instance? Failure x)\r\n                (dbg/error (select-debug-info debug-info) x)\r\n                x)) <x))\r\n\r\n(defn latest-apply [debug-info & args]\r\n  (apply m/latest\r\n    (fn [f & args]\r\n      (if-let [err (apply failure f args)]\r\n        (dbg/error (assoc (select-debug-info debug-info) ::dbg/args args) err)\r\n        (try (apply f args)\r\n             (catch #?(:clj Throwable :cljs :default) e\r\n               (dbg/error (assoc (select-debug-info debug-info) ::dbg/args args) (Failure. e))))))\r\n    args))\r\n\r\n(def latest-first\r\n  (partial m/latest\r\n    (fn [x y] (if (instance? Failure y) y x))))\r\n\r\n(defn pure [x] (m/cp x))\r\n\r\n(def empty-event\r\n  {:acks 0\r\n   :tree []\r\n   :change {}\r\n   :freeze #{}})\r\n\r\n(deftype It [state cancel transfer]\r\n  IFn\r\n  (#?(:clj invoke :cljs -invoke) [_]\r\n    (cancel state))\r\n  IDeref\r\n  (#?(:clj deref :cljs -deref) [_]\r\n    (transfer state)))\r\n\r\n(def lift-cancelled\r\n  (partial comp\r\n    (fn [it]\r\n      (reify\r\n        IFn\r\n        (#?(:clj invoke :cljs -invoke) [_] (it))\r\n        IDeref\r\n        (#?(:clj deref :cljs -deref) [_]\r\n          (try @it (catch Cancelled e (Failure. e))))))))\r\n\r\n(defn signal [<x]\r\n  (m/signal! (lift-cancelled <x)))\r\n\r\n(def this (l/local))\r\n\r\n(def context-slot-root            (int 0))   ;; Immutable. The root frame.\r\n(def context-slot-local-id        (int 1))   ;; The next local id (auto incremented).\r\n(def context-slot-remote-id       (int 2))   ;; The next remote id (auto decremented).\r\n(def context-slot-pending-rpos    (int 3))   ;; The reading position in the pending circular buffer.\r\n(def context-slot-pending-wpos    (int 4))   ;; The writing position in the pending circular buffer.\r\n(def context-slot-pending-buffer  (int 5))   ;; The pending circular buffer of outputs changed for each message sent.\r\n(def context-slot-frame-store     (int 6))   ;; A transient map associating frame ids to frame objects.\r\n(def context-slot-event           (int 7))   ;; The next event to transfer.\r\n(def context-slot-check           (int 8))   ;; The set of inputs that must be checked on next event transfer.\r\n(def context-slot-notifier        (int 9))   ;; The notifier callback\r\n(def context-slot-terminator      (int 10))  ;; The terminator callback\r\n(def context-slot-incoming        (int 11))  ;; The incoming callback\r\n(def context-slots                (int 12))\r\n\r\n(def tier-slot-parent   (int 0))    ;; Immutable. The parent frame.\r\n(def tier-slot-position (int 1))    ;; Immutable. The static position of the tier in the parent frame.\r\n(def tier-slot-buffer   (int 2))    ;; Buffer of array list of child frames.\r\n(def tier-slot-size     (int 3))    ;; Size of array list of child frames.\r\n(def tier-slot-foreigns (int 4))    ;; Foreign flow map\r\n(def tier-slot-hooks    (int 5))    ;; Hooks\r\n(def tier-slot-vars     (int 6))    ;; A snapshot of the dynamic environment.\r\n(def tier-slot-remote   (int 7))    ;; If local, the slot of the remote part.\r\n(def tier-slots         (int 8))\r\n\r\n(def frame-slot-context   (int 0))  ;; Immutable. The global context.\r\n(def frame-slot-parent    (int 1))  ;; Immutable. The parent tier, nil iff root frame.\r\n(def frame-slot-id        (int 2))  ;; Immutable. Zero if root frame, a strictly positive number if the frame was created by a variable, a strictly negative number if the frame was created by a source.\r\n(def frame-slot-position  (int 3))  ;; The index of the frame among its siblings.\r\n(def frame-slot-foreign   (int 4))  ;; Immutable\r\n(def frame-slot-static    (int 5))  ;; Immutable\r\n(def frame-slot-dynamic   (int 6))  ;; Immutable\r\n(def frame-slot-variables (int 7))  ;; Immutable\r\n(def frame-slot-sources   (int 8))  ;; Immutable\r\n(def frame-slot-targets   (int 9))  ;; Immutable\r\n(def frame-slot-inputs    (int 10)) ;; Immutable\r\n(def frame-slot-tiers     (int 11)) ;; Immutable\r\n(def frame-slot-constants (int 12)) ;; Immutable\r\n(def frame-slots          (int 13))\r\n\r\n(def input-slot-frame      (int 0))                         ;; parent frame\r\n(def input-slot-notifier   (int 1))                         ;; consumer notifier\r\n(def input-slot-terminator (int 2))                         ;; consumer terminator\r\n(def input-slot-current    (int 3))                         ;; current state\r\n(def input-slot-dirty      (int 4))                         ;; head of linked list of dirty outputs\r\n(def input-slot-check      (int 5))                         ;; next item in linked list of check inputs\r\n(def input-slot-pending    (int 6))                         ;; number of outputs waiting for ack\r\n(def input-slot-cancel     (int 7))                         ;; nil when no pending transfer, otherwise cancel status\r\n(def input-slots           (int 8))\r\n\r\n(def output-slot-input    (int 0))                          ;; parent input\r\n(def output-slot-id       (int 1))                          ;; output id, relative to parent frame\r\n(def output-slot-iterator (int 2))                          ;; producer iterator\r\n(def output-slot-current  (int 3))                          ;; current state\r\n(def output-slot-dirty    (int 4))                          ;; tail of linked list of dirty outputs\r\n(def output-slot-done     (int 5))                          ;; frozen\r\n(def output-slot-prev     (int 6))                          ;; previous item in doubly linked list of pending outputs\r\n(def output-slot-next     (int 7))                          ;; next item in doubly linked list of pending outputs\r\n(def output-slot-time     (int 8))                          ;; position of the doubly linked list of pending outputs in the circular buffer, nil if not pending\r\n(def output-slots         (int 9))\r\n\r\n(defn aswap\r\n  ([^objects arr slot f]\r\n   (aset arr slot (f (aget arr slot))))\r\n  ([^objects arr slot f a]\r\n   (aset arr slot (f (aget arr slot) a)))\r\n  ([^objects arr slot f a b]\r\n   (aset arr slot (f (aget arr slot) a b)))\r\n  ([^objects arr slot f a b c]\r\n   (aset arr slot (f (aget arr slot) a b c)))\r\n  ([^objects arr slot f a b c & ds]\r\n   (aset arr slot (apply f (aget arr slot) a b c ds))))\r\n\r\n(defn doto-aset [^objects arr k v]\r\n  (doto arr (aset (int k) v)))\r\n\r\n(defn make-context ^objects []\r\n  (doto (object-array context-slots)\r\n    (aset context-slot-local-id (identity 0))\r\n    (aset context-slot-remote-id (identity 0))\r\n    (aset context-slot-pending-rpos (identity 0))\r\n    (aset context-slot-pending-wpos (identity 0))\r\n    (aset context-slot-pending-buffer (object-array 2))\r\n    (aset context-slot-frame-store (transient {}))))\r\n\r\n(defn make-tier [^objects parent position]\r\n  (aset ^objects (aget parent frame-slot-tiers) (int position)\r\n    (doto (object-array tier-slots)\r\n      (aset tier-slot-parent parent)\r\n      (aset tier-slot-position position)\r\n      (aset tier-slot-buffer (object-array 8))\r\n      (aset tier-slot-size (identity (int 0)))\r\n      (aset tier-slot-foreigns {})\r\n      (aset tier-slot-hooks {}))))\r\n\r\n(defn make-frame [^objects context parent id position\r\n                  foreign static dynamic variable-count source-count\r\n                  constant-count target-count output-count input-count\r\n                  ^objects buffer ^objects vars boot]\r\n  (let [tier-count (+ variable-count source-count)\r\n        frame (doto (object-array frame-slots)\r\n                (aset frame-slot-context context)\r\n                (aset frame-slot-parent parent)\r\n                (aset frame-slot-id id)\r\n                (aset frame-slot-position position)\r\n                (aset frame-slot-foreign (object-array (count foreign)))\r\n                (aset frame-slot-static (object-array (count static)))\r\n                (aset frame-slot-dynamic (object-array (count dynamic)))\r\n                (aset frame-slot-variables (object-array variable-count))\r\n                (aset frame-slot-sources (object-array source-count))\r\n                (aset frame-slot-targets (object-array target-count))\r\n                (aset frame-slot-inputs (object-array input-count))\r\n                (aset frame-slot-tiers (object-array tier-count))\r\n                (aset frame-slot-constants (object-array constant-count)))]\r\n    (dotimes [i tier-count] (make-tier frame i))\r\n    (aset buffer (int position) frame)\r\n    (aswap context context-slot-frame-store assoc! id frame)\r\n    (let [prevs (reduce-kv\r\n                  (fn [m v <x]\r\n                    (let [prev (aget vars (int v))\r\n                          proc (signal <x)]\r\n                      (aset ^objects (aget frame frame-slot-foreign) (count m) proc)\r\n                      (aset vars (int v) proc)\r\n                      (assoc m v prev)))\r\n                  {} foreign)]\r\n      (reduce-kv (fn [^objects arr i <x]\r\n                   (aset arr (int i) (signal <x)) arr)\r\n        (aget frame frame-slot-static) static)\r\n      (reduce-kv (fn [^objects arr i v]\r\n                   (aset arr (int i) (signal (aget vars (int v)))) arr)\r\n        (aget frame frame-slot-dynamic) dynamic)\r\n      (let [result (boot frame vars)]\r\n        (reduce-kv doto-aset vars prevs)\r\n        result))))\r\n\r\n(defn input-ready [^objects input]\r\n  (when (nil? (aget input input-slot-cancel))\r\n    (aset input input-slot-cancel false)\r\n    ((aget input input-slot-notifier))))\r\n\r\n(defn output-dirty [^objects output]\r\n  (let [^objects input (aget output output-slot-input)\r\n        ^objects dirty (aget input input-slot-dirty)]\r\n    (aset output output-slot-dirty dirty)\r\n    (aset input input-slot-dirty output)\r\n    (when (nil? dirty)\r\n      (when (identical? input (aget input input-slot-check))\r\n        (let [^objects frame (aget input input-slot-frame)\r\n              ^objects context (aget frame frame-slot-context)\r\n              ^objects check (aget context context-slot-check)]\r\n          (aset context context-slot-check input)\r\n          (aset input input-slot-check check)\r\n          (when (nil? (aget context context-slot-event))\r\n            (aset context context-slot-event empty-event)\r\n            ((aget context context-slot-notifier))))))\r\n    (input-ready input)))\r\n\r\n(defn output-spawn [^objects input ^objects output]\r\n  (when-not (nil? output)\r\n    (aset output output-slot-input input)\r\n    (aset output output-slot-iterator\r\n      ((aget output output-slot-iterator)\r\n       (fn [] (output-dirty output))\r\n       (fn []\r\n         (aset output output-slot-done true)\r\n         (output-dirty output)))))\r\n  input)\r\n\r\n(defn make-output [id <x]\r\n  (let [output (object-array output-slots)]\r\n    (aset output output-slot-id id)\r\n    (aset output output-slot-done false)\r\n    (aset output output-slot-prev output)\r\n    (aset output output-slot-next output)\r\n    (aset output output-slot-dirty output)\r\n    (aset output output-slot-current output)\r\n    (aset output output-slot-iterator <x)\r\n    output))\r\n\r\n(defn input-cancel [^objects input]\r\n  (let [c (aget input input-slot-cancel)]\r\n    (aset input input-slot-cancel true)\r\n    (when (nil? c) ((aget input input-slot-notifier)))))\r\n\r\n(defn input-change [^objects input x]\r\n  (aset input input-slot-current x)\r\n  (input-ready input))\r\n\r\n(defn input-freeze [^objects input]\r\n  (aset input input-slot-pending -1)\r\n  (when (nil? (aget input input-slot-cancel))\r\n    (aset input input-slot-cancel false)\r\n    ((aget input input-slot-terminator))))\r\n\r\n(defn update-event [^objects context k f & args]\r\n  (if-some [event (aget context context-slot-event)]\r\n    (aset context context-slot-event (apply update event k f args))\r\n    (do (aset context context-slot-event (apply update empty-event k f args))\r\n        ((aget context context-slot-notifier)))))\r\n\r\n(defn input-check [^objects input]\r\n  (let [^objects frame (aget input input-slot-frame)\r\n        ^objects context (aget frame frame-slot-context)]\r\n    (loop []\r\n      (if-some [^objects output (aget input input-slot-dirty)]\r\n        (let [path [(- (aget frame frame-slot-id)) (aget output output-slot-id)]]\r\n          (aset input input-slot-dirty (aget output output-slot-dirty))\r\n          (aset output output-slot-dirty output)\r\n          (if (aget output output-slot-done)\r\n            (update-event context :freeze conj path)\r\n            (let [x @(aget output output-slot-iterator)]\r\n              (when-not (= (aget output output-slot-current) (aset output output-slot-current x))\r\n                (let [^objects buffer (aget context context-slot-pending-buffer)\r\n                      wpos (aget context context-slot-pending-wpos)]\r\n                  (if-some [t (aget output output-slot-time)]\r\n                    (let [^objects p (aget output output-slot-prev)\r\n                          ^objects n (aget output output-slot-next)]\r\n                      (aset buffer t\r\n                        (when-not (identical? p output)\r\n                          (aset p output-slot-next n)\r\n                          (aset n output-slot-prev p))))\r\n                    (aswap input input-slot-pending inc))\r\n                  (aset output output-slot-time wpos)\r\n                  (if-some [^objects p (aget buffer wpos)]\r\n                    (let [^objects n (aget p output-slot-next)]\r\n                      (aset p output-slot-next output)\r\n                      (aset n output-slot-prev output)\r\n                      (aset output output-slot-prev p)\r\n                      (aset output output-slot-next n))\r\n                    (do (aset buffer wpos output)\r\n                        (aset output output-slot-prev output)\r\n                        (aset output output-slot-next output)))\r\n                  (update-event context :change assoc path x)))))\r\n          (recur))))))\r\n\r\n(defn input-transfer [^objects input]\r\n  (input-check input)\r\n  (if (aget input input-slot-cancel)\r\n    (do ((aget input input-slot-terminator))\r\n        (throw (Cancelled.)))\r\n    (case (aget input input-slot-pending)\r\n      -1 (do ((aget input input-slot-terminator))\r\n             (aget input input-slot-current))\r\n      0 (do (aset input input-slot-cancel nil)\r\n            (aget input input-slot-current))\r\n      (do (aset input input-slot-cancel nil)\r\n          pending))))\r\n\r\n(defn make-input [^objects frame deps]\r\n  (let [input (object-array input-slots)]\r\n    (aset input input-slot-frame frame)\r\n    (aset input input-slot-pending 0)\r\n    (aset input input-slot-current pending)\r\n    (aset input input-slot-cancel false)\r\n    (aset input input-slot-check input)\r\n    (reduce output-spawn input deps)))\r\n\r\n(defn input-spawn [^objects frame slot deps]\r\n  (m/signal!                                                ;; inputs are cancelled when reactor is cancelled\r\n    (fn [n t]\r\n      (let [input (make-input frame deps)]\r\n        (aset input input-slot-notifier n)\r\n        (aset input input-slot-terminator t)\r\n        (aset ^objects (aget frame frame-slot-inputs) (int slot) input)\r\n        (n) (->It input input-cancel input-transfer)))))\r\n\r\n(defn check-unbound-var [debug-info <x]\r\n  (m/latest (fn [x]\r\n              (if (= ::unbound x)\r\n                (Failure. (error (str \"Unbound var `\" (::dbg/name debug-info) \"`\")))\r\n                x)) <x))\r\n\r\n(defn static [^objects frame slot]\r\n  (aget ^objects (aget frame frame-slot-static) (int slot)))\r\n\r\n(defn dynamic [^objects frame slot debug-info]\r\n  (check-unbound-var debug-info (aget ^objects (aget frame frame-slot-dynamic) (int slot))))\r\n\r\n(defn tree\r\n  \"A snapshot of the tree below given frame, as nested vectors. Frame vectors start with their id.\"\r\n  [^objects f]\r\n  (let [^objects tiers (aget f frame-slot-tiers)]\r\n    (loop [v []\r\n           i (int 0)]\r\n      (if (== i (alength tiers))\r\n        {:id (aget f frame-slot-id)\r\n         :inputs (alength ^objects (aget f frame-slot-inputs))\r\n         :targets (alength ^objects (aget f frame-slot-targets))\r\n         :sources (alength ^objects (aget f frame-slot-sources))\r\n         :tiers v}\r\n        (recur\r\n          (conj v\r\n            (let [^objects tier (aget tiers i)\r\n                  ^objects buf (aget tier tier-slot-buffer)]\r\n              (loop [v []\r\n                     i (int 0)]\r\n                (if (== i (aget tier tier-slot-size))\r\n                  v (recur (conj v (tree (aget buf i)))\r\n                      (inc i))))))\r\n          (inc i))))))\r\n\r\n(defn find-scope [f]\r\n  (loop [f f\r\n         s #{}]\r\n    (if-some [^objects tier (aget ^objects f frame-slot-parent)]\r\n      (recur (aget tier tier-slot-parent)\r\n        (into s (keys (aget tier tier-slot-hooks)))) s)))\r\n\r\n(declare tier-walk-frames)\r\n(defn frame-walk-tiers [^objects frame step k cb start]\r\n  (let [^objects tiers (aget frame frame-slot-tiers)\r\n        size (alength tiers)\r\n        back (bit-shift-right (- 1 step) 1)\r\n        back-inc-size (* back (inc size))\r\n        stop (- size back-inc-size)]\r\n    (loop [i (if (nil? start) (dec back-inc-size) start)]\r\n      (let [i (+ i step)]\r\n        (when-not (== i stop)\r\n          (if-some [x (let [^objects tier (aget tiers i)]\r\n                        (if-some [v (get (aget tier tier-slot-hooks) k)]\r\n                          (cb v) (tier-walk-frames tier step k cb nil)))]\r\n            x (recur i)))))))\r\n\r\n(defn tier-walk-frames [^objects tier step k cb start]\r\n  (let [^objects buf (aget tier tier-slot-buffer)\r\n        size (aget tier tier-slot-size)\r\n        back (bit-shift-right (- 1 step) 1)\r\n        back-inc-size (* back (inc size))\r\n        stop (- size back-inc-size)]\r\n    (loop [i (if (nil? start) (dec back-inc-size) start)]\r\n      (let [i (+ i step)]\r\n        (when-not (== i stop)\r\n          (if-some [x (frame-walk-tiers (aget buf i) step k cb nil)]\r\n            x (recur i)))))))\r\n\r\n(defn notify-rotate [f k]\r\n  (let [anchor (loop [^objects f f]\r\n                 (let [tier ^objects (aget f frame-slot-parent)]\r\n                   (when-not (contains? (aget tier tier-slot-hooks) k)\r\n                     (if-some [a (tier-walk-frames tier 1 k identity\r\n                                   (aget f frame-slot-position))]\r\n                       a (recur (aget tier tier-slot-parent))))))]\r\n    (frame-walk-tiers f 1 k (fn [target] (k target anchor)) nil) f))\r\n\r\n(defn array-call [^objects arr]\r\n  (dotimes [i (alength arr)]\r\n    ((aget arr i))))\r\n\r\n(defn frame-dispose [^objects f]\r\n  (aset f frame-slot-position nil)\r\n  (array-call (aget f frame-slot-static))\r\n  (array-call (aget f frame-slot-dynamic))\r\n  (array-call (aget f frame-slot-foreign))\r\n  (array-call (aget f frame-slot-variables))\r\n  (array-call (aget f frame-slot-constants)))\r\n\r\n(defn frame-rotate [^objects f to]\r\n  (let [from (aget f frame-slot-position)\r\n        step (compare to from)\r\n        ^objects tier (aget f frame-slot-parent)\r\n        ^objects buf (aget tier tier-slot-buffer)]\r\n    (if (== to from)\r\n      (let [size (dec (aget tier tier-slot-size))]\r\n        (loop [i to]\r\n          (when-not (== i size)\r\n            (let [j (inc i)\r\n                  y (aget buf (int j))]\r\n              (aset ^objects y frame-slot-position i)\r\n              (aset buf (int i) y)\r\n              (recur j))))\r\n        (aset tier tier-slot-size size)\r\n        (aset buf (int size) nil)\r\n        (frame-dispose f))\r\n      (do (loop [i from]\r\n            (let [j (+ i step)\r\n                  ^objects y (aget buf (int j))]\r\n              (aset y frame-slot-position i)\r\n              (aset buf (int i) y)\r\n              (when-not (== to j) (recur j))))\r\n          (aset f frame-slot-position to)\r\n          (aset buf (int to) f)\r\n          (reduce notify-rotate f\r\n            (find-scope f))))))\r\n\r\n(defn move\r\n  \"Move a frame. If origin position is equal to target position, frame is removed. Will search and call `hook`.\"\r\n  ([^objects tier from to]\r\n   (let [f (aget ^objects (aget tier tier-slot-buffer) (int from))]\r\n     (update-event (aget f frame-slot-context) :tree conj\r\n       {:op       :rotate\r\n        :frame    (- (aget f frame-slot-id))\r\n        :position to})\r\n     (frame-rotate f to))))\r\n\r\n(defn frame-cancel [^objects f]\r\n  (when-some [pos (aget f frame-slot-position)]\r\n    (update-event (aget f frame-slot-context) :tree conj\r\n      {:op       :rotate\r\n       :frame    (- (aget f frame-slot-id))\r\n       :position pos})\r\n    (frame-rotate f pos)))\r\n\r\n(defn acopy [src src-off dest dest-off size]\r\n  #?(:clj (System/arraycopy src src-off dest dest-off size))\r\n  #?(:cljs (dotimes [i size] (aset dest (+ dest-off i) (aget src (+ src-off i)))))\r\n  dest)\r\n\r\n(defn constructor [static dynamic variable-count source-count constant-count target-count output-count input-count boot]\r\n  (fn [^objects tier id]\r\n    (let [^objects par (aget tier tier-slot-parent)\r\n          ^objects buf (aget tier tier-slot-buffer)\r\n          pos (aget tier tier-slot-size)\r\n          cap (alength buf)\r\n          buf (if (< pos cap)\r\n                buf (aset tier tier-slot-buffer\r\n                      (acopy buf 0 (object-array (bit-shift-left cap 1)) 0 cap)))]\r\n      (aset tier tier-slot-size (inc pos))\r\n      (make-frame (aget par frame-slot-context)\r\n        tier id pos (aget tier tier-slot-foreigns) static dynamic\r\n        variable-count source-count constant-count target-count output-count input-count\r\n        buf (aget tier tier-slot-vars) boot))))\r\n\r\n(deftype FrameIterator [f it]\r\n  IFn\r\n  (#?(:clj invoke :cljs -invoke) [_] (frame-cancel f))\r\n  IDeref\r\n  (#?(:clj deref :cljs -deref) [_] @it))\r\n\r\n;; Takes an instruction identifying a target and a frame-constructor.\r\n;; Return a flow instantiating the frame.\r\n(defn constant [^objects frame slot ctor]\r\n  (let [^objects consts (aget frame frame-slot-constants)\r\n        ^objects context (aget frame frame-slot-context)]\r\n    (aset consts slot\r\n      (signal\r\n        (m/watch\r\n          (atom\r\n            (fn [n t]\r\n              (if-some [^objects tier (l/get-local this)]\r\n                (let [parent (aget tier tier-slot-parent)\r\n                      id (aswap context context-slot-local-id inc)]\r\n                  (update-event context :tree conj\r\n                    {:op     :create\r\n                     :target [(- (aget frame frame-slot-id)) slot]\r\n                     :source [(- (aget parent frame-slot-id)) (aget tier tier-slot-remote)]})\r\n                  (let [<x (ctor tier id)\r\n                        ^objects f (get (aget context context-slot-frame-store) id)]\r\n                    (->FrameIterator f\r\n                      (<x n #(do (frame-cancel f)\r\n                                 (update-event context :tree conj {:op :remove :frame (- id)})\r\n                                 (aswap context context-slot-frame-store dissoc!\r\n                                   (aget f frame-slot-id)) (t))))))\r\n                (failer/run (error \"Unable to build frame - not an object.\") n t)))))))))\r\n\r\n(defn inject [v]\r\n  (fn [<x <y]\r\n    (fn [n t]\r\n      ;; TODO make result depend on <y to catch failures, in case binding is ignored\r\n      (if-some [^objects tier (l/get-local this)]\r\n        (let [foreigns (aget tier tier-slot-foreigns)]\r\n          (aset tier tier-slot-foreigns (assoc foreigns v <y))\r\n          (try (<x n t) (finally (aset tier tier-slot-foreigns foreigns))))\r\n        (failer/run (error \"Unable to inject - not an object.\") n t)))))\r\n\r\n(defn bind [f & args]\r\n  (fn [n t]\r\n    (if-some [tier (l/get-local this)]\r\n      (try ((apply f tier args) n t) ; hook tier and pass to userland !\r\n           (catch #?(:clj Throwable :cljs :default) e\r\n             (failer/run e n t)))\r\n      (failer/run (error \"Unable to bind - not an object.\") n t))))\r\n\r\n(defn with [tier <x]\r\n  (fn [n t]\r\n    (let [prev (l/get-local this)]\r\n      (l/set-local this tier)\r\n      (try (<x n t) (finally (l/set-local this prev))))))\r\n\r\n(defn clause\r\n  ([f] (fn [e] (f (pure e))))\r\n  ([f c] (fn [e] (when (instance? c (dbg/unwrap e)) (f (pure e))))))\r\n\r\n(defn recover [tier catch <x]\r\n  (yield (fn [x]\r\n           (when (instance? Failure x)\r\n             (when-some [<c (catch (.-error ^Failure x))]\r\n               (with tier <c)))) <x))\r\n\r\n(defn variable [^objects frame ^objects vars position slot <<x]\r\n  (let [^objects tier (aget ^objects (aget frame frame-slot-tiers) (int position))]\r\n    (aset tier tier-slot-remote slot)\r\n    (aset tier tier-slot-vars (aclone vars))\r\n    (aset ^objects (aget frame frame-slot-variables) (int slot)\r\n      (m/signal!\r\n        (m/cp (try (let [<x (m/?< <<x)]\r\n                     (if (failure <x)\r\n                       <x (m/?< (with tier <x))))\r\n                   (catch #?(:clj Throwable :cljs :default) e\r\n                     (Failure. e))))))))\r\n\r\n(defn source [^objects frame ^objects vars position slot]\r\n  (aset ^objects (aget frame frame-slot-sources) (int slot)\r\n    (doto ^objects (aget ^objects (aget frame frame-slot-tiers) (int position))\r\n      (aset tier-slot-vars (aclone vars)))) nil)\r\n\r\n(defn target [^objects frame slot ctor]\r\n  (aset ^objects (aget frame frame-slot-targets) (int slot) ctor) nil)\r\n\r\n(defn hook [k v <x]\r\n  (assert (some? v) \"hook value must be non-nil.\")\r\n  (fn [n t]\r\n    (if-some [tier (l/get-local this)]\r\n      (do\r\n        (loop [^objects tier tier]\r\n          (let [^objects f (aget tier tier-slot-parent)]\r\n            (if-some [a (frame-walk-tiers f 1 k identity (aget tier tier-slot-position))]\r\n              (k v a)\r\n              (when-some [^objects tier (aget f frame-slot-parent)]\r\n                (if-some [a (tier-walk-frames tier 1 k identity (aget f frame-slot-position))]\r\n                  (k v a)\r\n                  (if (contains? (aget tier tier-slot-hooks) k)\r\n                    (k v nil) (recur tier)))))))\r\n        (aswap tier tier-slot-hooks assoc k v)\r\n        (<x n #(do (aswap tier tier-slot-hooks dissoc k)\r\n                   (k v) (t))))\r\n      (failer/run (error \"Unable to hook - not an object.\") n t))))\r\n\r\n(def unbound (pure ::unbound))\r\n\r\n(defn subject-at [^objects arr slot]\r\n  (fn [!] (aset arr slot !) #(aset arr slot nil)))\r\n\r\n(defn context-ack [^objects context]\r\n  (let [rpos (aget context context-slot-pending-rpos)\r\n        ^objects buffer (aget context context-slot-pending-buffer)\r\n        ^objects output (aget buffer rpos)]\r\n    (when (= rpos (aget context context-slot-pending-wpos))\r\n      (throw (error \"Unexpected ack.\")))\r\n    (aset context context-slot-pending-rpos\r\n      (bit-and (unchecked-inc rpos)\r\n        (unchecked-dec (alength buffer))))\r\n    (aset buffer rpos nil)\r\n    (loop [output output]\r\n      (when-not (nil? output)\r\n        (aset (aget output output-slot-prev) output-slot-next nil)\r\n        (aset output output-slot-prev nil)\r\n        (aset output output-slot-time nil)\r\n        (let [^objects input (aget output output-slot-input)]\r\n          (when (zero? (aswap input input-slot-pending dec))\r\n            (input-ready input)))\r\n        (recur (aget output output-slot-next))))))\r\n\r\n(defn context-cancel [^objects context]\r\n  (update-event context :cancel identity))\r\n\r\n(defn context-transfer [^objects context]\r\n  (loop []\r\n    (if-some [^objects input (aget context context-slot-check)]\r\n      (do (aset context context-slot-check (aget input input-slot-check))\r\n          (aset input input-slot-check input)\r\n          (input-check input)\r\n          (recur))\r\n      (let [event (aget context context-slot-event)]\r\n        (when (contains? event :cancel)\r\n          ((aget context context-slot-terminator))\r\n          (throw (Cancelled.)))\r\n        (when-not (= {} (:change event))\r\n          (let [^objects buffer (aget context context-slot-pending-buffer)\r\n                size (alength buffer)\r\n                rpos (aget context context-slot-pending-rpos)\r\n                wpos (aget context context-slot-pending-wpos)]\r\n            (when (= rpos (aset context context-slot-pending-wpos\r\n                            (bit-and (unchecked-inc wpos)\r\n                              (unchecked-dec size))))\r\n              (let [larger (object-array (bit-shift-left size 1))\r\n                    split (- size rpos)]\r\n                (acopy buffer rpos larger 0 split)\r\n                (acopy buffer 0 larger split rpos)\r\n                (dotimes [t size]\r\n                  (when-some [output (aget larger t)]\r\n                    (loop [^objects o output]\r\n                      (aset o output-slot-time t)\r\n                      (let [n (aget o output-slot-next)]\r\n                        (when-not (identical? n output)\r\n                          (recur n))))))\r\n                (aset context context-slot-pending-buffer larger)\r\n                (aset context context-slot-pending-wpos size)\r\n                (aset context context-slot-pending-rpos 0)))))\r\n        (aset context context-slot-event nil) event))))\r\n\r\n(defn eval-tree-inst [^objects context inst]\r\n  (case (:op inst)\r\n    :create (let [{[target-frame target-slot] :target\r\n                   [source-frame source-slot] :source} inst]\r\n              ((-> context\r\n                 (aget context-slot-frame-store)\r\n                 ^objects (get target-frame)\r\n                 ^objects (aget frame-slot-targets)\r\n                 (aget target-slot))\r\n               (-> context\r\n                 (aget context-slot-frame-store)\r\n                 ^objects (get source-frame)\r\n                 ^objects (aget frame-slot-sources)\r\n                 (aget source-slot))\r\n               (aswap context context-slot-remote-id dec)))\r\n    :rotate (-> context\r\n              (aget context-slot-frame-store)\r\n              (get (:frame inst))\r\n              (frame-rotate (:position inst)))\r\n    :remove (aswap context context-slot-frame-store dissoc! (:frame inst)))\r\n  context)\r\n\r\n(defn eval-change-inst [^objects context [id slot] value]\r\n  (-> context\r\n    (aget context-slot-frame-store)\r\n    ^objects (get id)\r\n    ^objects (aget frame-slot-inputs)\r\n    ^objects (aget slot)\r\n    (input-change value))\r\n  context)\r\n\r\n(defn eval-freeze-inst [^objects context [id slot]]\r\n  (-> context\r\n    (aget context-slot-frame-store)\r\n    ^objects (get id)\r\n    ^objects (aget frame-slot-inputs)\r\n    ^objects (aget slot)\r\n    (input-freeze))\r\n  context)\r\n\r\n(defn parse-event [^objects context {:keys [acks tree change freeze]}]\r\n  (dotimes [_ acks] (context-ack context))\r\n  (reduce eval-tree-inst context tree)\r\n  (when-not (= {} change)\r\n    (update-event context :acks inc)\r\n    (reduce-kv eval-change-inst context change))\r\n  (reduce eval-freeze-inst context freeze))\r\n\r\n(defn process-incoming-events [^objects context >incoming]\r\n  (m/sample (partial reduce parse-event context) >incoming))\r\n\r\n(defn write-outgoing-events [write >events]\r\n  (m/ap (let [e (m/?> >events)]\r\n          (when-not (= e empty-event)\r\n            (m/? (write e))))))\r\n\r\n(defn peer [var-count dynamic variable-count source-count constant-count target-count output-count input-count ctor]\r\n  (fn rec\r\n    ([write ?read] (rec write ?read pst))\r\n    ([write ?read on-error]\r\n     (m/reactor\r\n       (let [^objects context (make-context)]\r\n         (m/stream!\r\n           (write-outgoing-events write\r\n             (m/stream!\r\n               (fn [n t]\r\n                 (aset context context-slot-notifier n)\r\n                 (aset context context-slot-terminator t)\r\n                 (when-some [<main (make-frame context nil 0 0 {} [] dynamic\r\n                                     variable-count source-count constant-count target-count output-count input-count\r\n                                     context (object-array (repeat var-count unbound)) ctor)]\r\n                   (m/stream! (m/latest (fn [x] (when (instance? Failure x) (on-error (.-error x)))) <main)))\r\n                 (->It context context-cancel context-transfer)))))\r\n         (m/stream! (process-incoming-events context (m/stream! (m/relieve into (m/sample vector (m/observe ?read)))))))))))\r\n\r\n(defn collapse [s n f & args]\r\n  (->> (iterate pop s)\r\n    (transduce (comp (map peek) (take n)) conj args)\r\n    (apply f)\r\n    (conj (nth (iterate pop s) n))))\r\n\r\n(defn snapshot [env f & args]\r\n  (update env :stack conj (apply f env args)))\r\n\r\n(defn reverse-index [m]\r\n  (reduce-kv (fn [v x i] (assoc v i x))\r\n    (vec (repeat (count m) nil)) m))\r\n\r\n(def empty-frame\r\n  {:variable 0\r\n   :source   0\r\n   :constant 0\r\n   :target   0\r\n   :output   0\r\n   :input    0\r\n   :static   {}\r\n   :dynamic  {}})\r\n\r\n;; TODO move me\r\n;; `new` creates a local variable and a remote source\r\n;; `p/fn` creates a local constant and a remote target\r\n;; Same duality with input and output, if there is 3 inputs locally, there is 3 outputs remotely.\r\n;; There is no instruction to create inputs and outputs, they are infered from unquote-splicing.\r\n\r\n(defn compile [inst {:keys [nop sub pub inject lift vget bind invoke input do output static dynamic\r\n                            global literal variable source constant target main] :as fns}]\r\n  (-> ((fn walk [env off idx dyn inst]\r\n         (case (::ir/op inst)\r\n           ::ir/nop (update env :stack conj nop)\r\n           ::ir/sub (let [p (- idx (::ir/index inst))]\r\n                      (if (< p off)\r\n                        (let [f (:static env)\r\n                              i (f p (count f))]\r\n                          (-> env\r\n                            (assoc :static (assoc f p i))\r\n                            (update :stack conj (static i))))\r\n                        (update env :stack conj (sub p))))\r\n           ::ir/pub (-> env\r\n                      (walk off idx dyn (::ir/init inst))\r\n                      (walk off (inc idx) dyn (::ir/inst inst))\r\n                      (update :stack collapse 2 pub idx))\r\n           ::ir/do  (let [deps (::ir/deps inst)]\r\n                      (-> (reduce (fn [env arg] (walk env off idx dyn arg)) env deps)\r\n                        (update :stack collapse (count deps) vector)\r\n                        (walk off idx dyn (::ir/inst inst))\r\n                        (update :stack collapse 2 do)))\r\n           ::ir/def (let [v (::ir/slot inst)]\r\n                      (-> env\r\n                        (update :vars max v)\r\n                        (update :stack conj (inject v))))\r\n           ::ir/lift (-> env\r\n                       (walk off idx dyn (::ir/init inst))\r\n                       (update :stack collapse 1 lift))\r\n           ::ir/eval (update env :stack conj ((:eval fns) (::ir/form inst) (::ir/ns inst))) ; can't shadow eval in advanced CLJS compilation\r\n           ::ir/node (let [v (::ir/slot inst)\r\n                           env (update env :vars max v)]\r\n                       (if (dyn v)\r\n                         (update env :stack conj (vget v))\r\n                         (let [d (:dynamic env)\r\n                               i (d v (count d))]\r\n                           (-> env\r\n                             (assoc :dynamic (assoc d v i))\r\n                             (update :stack conj (dynamic i inst))))))\r\n           ::ir/bind (let [v (::ir/slot inst)]\r\n                       (-> env\r\n                         (update :vars max v)\r\n                         (walk off idx (conj dyn v) (::ir/inst inst))\r\n                         (update :stack collapse 1 bind v (- idx (::ir/index inst)))))\r\n           ::ir/apply (let [f (::ir/fn inst)\r\n                            args (::ir/args inst)]\r\n                        (-> (reduce (fn [env inst] (walk env off idx dyn inst)) env (cons f args))\r\n                          (update :stack collapse (inc (count args))\r\n                            (partial invoke\r\n                              (loop [f f]\r\n                                (case (::ir/op f)\r\n                                  ::ir/global (assoc f ::dbg/type :apply, ::dbg/name (symbol (::ir/name f)))\r\n                                  ::ir/node (assoc f ::dbg/type :apply)\r\n                                  ::ir/literal {::dbg/type :apply ::dbg/name (::ir/value f)}\r\n                                  ::ir/eval (assoc f ::dbg/type :eval)\r\n                                  ::ir/sub (assoc f ::dbg/type :apply)\r\n                                  ::ir/input (assoc f ::dbg/type :apply)\r\n                                  ::ir/apply (recur (::ir/fn f))\r\n                                  {::dbg/type :unknown-apply, :op f}))))))\r\n           ::ir/input (let [deps (::ir/deps inst)]\r\n                        (-> (reduce (fn [env arg] (walk env off idx dyn arg)) env deps)\r\n                          (update :stack collapse (count deps) vector)\r\n                          (snapshot :input)\r\n                          (update :input inc)\r\n                          (update :stack collapse 2 input)))\r\n           ::ir/output (-> env\r\n                         (walk off idx dyn (::ir/init inst))\r\n                         (snapshot :output)\r\n                         (update :output inc)\r\n                         (update :stack collapse 2 (partial output inst)))\r\n           ::ir/global (update env :stack conj (global (::ir/name inst)))\r\n           ::ir/literal (update env :stack conj (literal (::ir/value inst)))\r\n           ::ir/variable (-> env\r\n                           (walk off idx dyn (::ir/init inst))\r\n                           (snapshot :source)\r\n                           (snapshot :variable)\r\n                           (update :variable inc)\r\n                           (update :stack collapse 3 variable))\r\n           ::ir/source (-> env\r\n                         (snapshot :variable)\r\n                         (snapshot :source)\r\n                         (update :source inc)\r\n                         (update :stack collapse 2 source))\r\n           ::ir/constant (-> env\r\n                           (merge empty-frame)\r\n                           (walk idx idx #{} (::ir/init inst))\r\n                           (snapshot (comp reverse-index :static))\r\n                           (snapshot (comp reverse-index :dynamic))\r\n                           (snapshot :variable)\r\n                           (snapshot :source)\r\n                           (snapshot :constant)\r\n                           (snapshot :target)\r\n                           (snapshot :output)\r\n                           (snapshot :input)\r\n                           (merge (select-keys env (keys empty-frame)))\r\n                           (snapshot :constant)\r\n                           (update :constant inc)\r\n                           (update :stack collapse 10 (partial constant inst)))\r\n           ::ir/target (let [deps (::ir/deps inst)]\r\n                         (-> (reduce (fn [env inst] (walk env idx idx #{} inst))\r\n                               (merge env empty-frame) deps)\r\n                           (update :stack collapse (count deps) vector)\r\n                           (snapshot (comp reverse-index :static))\r\n                           (snapshot (comp reverse-index :dynamic))\r\n                           (snapshot :variable)\r\n                           (snapshot :source)\r\n                           (snapshot :constant)\r\n                           (snapshot :target)\r\n                           (snapshot :output)\r\n                           (snapshot :input)\r\n                           (merge (select-keys env (keys empty-frame)))\r\n                           (snapshot :target)\r\n                           (update :target inc)\r\n                           (update :stack collapse 10 target)))))\r\n       (assoc empty-frame :vars -1) 0 0 #{} inst)\r\n    (snapshot (comp inc :vars))\r\n    (snapshot (comp reverse-index :dynamic))\r\n    (snapshot :variable)\r\n    (snapshot :source)\r\n    (snapshot :constant)\r\n    (snapshot :target)\r\n    (snapshot :output)\r\n    (snapshot :input)\r\n    (:stack)\r\n    (collapse 9 main)\r\n    (peek)))\r\n\r\n(defn sym [& args]\r\n  (symbol (str/join \"-\" args)))\r\n\r\n(defn emit [prefix inst]\r\n  (compile inst\r\n    {:nop      nil\r\n     :sub      (fn [idx] (sym prefix 'pub idx))\r\n     :pub      (fn [form cont idx]\r\n                 `(let [~(sym prefix 'pub idx) (signal ~form)] ~cont))\r\n     :do       (fn [deps form]\r\n                 `(do (make-input ~(sym prefix 'frame) ~deps) ~form))\r\n     :static   (fn [i] `(static ~(sym prefix 'frame) ~i))\r\n     :dynamic  (fn [i debug-info] `(dynamic ~(sym prefix 'frame) ~i '~(select-debug-info debug-info)))\r\n     :eval     (fn [form _ns] `(pure ~form))\r\n     :lift     (fn [f] `(pure ~f))\r\n     :vget     (fn [v] `(aget ~(sym prefix 'vars) (int ~v)))\r\n     :bind     (fn [form slot idx]\r\n                 `(let [~(sym prefix 'prev) (aget ~(sym prefix 'vars) ~slot)]\r\n                    (aset ~(sym prefix 'vars) (int ~slot) ~(sym prefix 'pub idx))\r\n                    (let [~(sym prefix 'res) ~form]\r\n                      (aset ~(sym prefix 'vars) (int ~slot) ~(sym prefix 'prev))\r\n                      ~(sym prefix 'res))))\r\n     :invoke   (fn [debug-info & forms] `(latest-apply '~(select-debug-info debug-info) ~@forms))\r\n     :input    (fn [deps slot] `(input-spawn ~(sym prefix 'frame) ~slot ~deps))\r\n     :output   (fn [debug-info form slot]\r\n                 `(make-output ~slot (check-failure '~(select-debug-info debug-info) ~form)))\r\n     :global   (fn [x] `(pure ~(symbol x)))\r\n     :literal  (fn [x] `(pure (quote ~x)))\r\n     :inject   (fn [v] `(pure (inject ~v)))\r\n     :variable (fn [form remote slot]\r\n                 `(variable ~(sym prefix 'frame) ~(sym prefix 'vars) ~(+ remote slot) ~slot ~form))\r\n     :source   (fn [remote slot]\r\n                 `(source ~(sym prefix 'frame) ~(sym prefix 'vars) ~(+ remote slot) ~slot))\r\n     :constant (fn [debug-info form static dynamic variable-count source-count constant-count target-count output-count input-count slot]\r\n                 `(constant ~(sym prefix 'frame) ~slot\r\n                    (constructor ~(mapv (fn [p] (sym prefix 'pub p)) static) ~dynamic\r\n                      ~variable-count ~source-count\r\n                      ~constant-count ~target-count\r\n                      ~output-count ~input-count\r\n                      (fn [~(sym prefix 'frame)\r\n                           ~(sym prefix 'vars)]\r\n                        (check-failure '~(select-debug-info debug-info) ~form)))))\r\n     :target   (fn [deps static dynamic variable-count source-count constant-count target-count output-count input-count slot]\r\n                 `(target ~(sym prefix 'frame) ~slot\r\n                    (constructor ~(mapv (fn [p] (sym prefix 'pub p)) static) ~dynamic\r\n                      ~variable-count ~source-count\r\n                      ~constant-count ~target-count\r\n                      ~output-count ~input-count\r\n                      (fn [~(sym prefix 'frame)\r\n                           ~(sym prefix 'vars)]\r\n                        (make-input ~(sym prefix 'frame) ~deps)))))\r\n     :main     (fn [form var-count dynamic variable-count source-count constant-count target-count output-count input-count]\r\n                 `(peer ~var-count ~dynamic\r\n                    ~variable-count ~source-count\r\n                    ~constant-count ~target-count\r\n                    ~output-count ~input-count\r\n                    (fn [~(sym prefix 'frame)\r\n                         ~(sym prefix 'vars)]\r\n                      ~form)))}))\r\n\r\n(tests\r\n  (emit nil (ir/literal 5)) :=\r\n  `(peer 0 [] 0 0 0 0 0 0\r\n     (fn [~'-frame ~'-vars]\r\n       (pure '5)))\r\n\r\n  (emit nil (ir/apply\r\n              (ir/global :clojure.core/+)\r\n              (ir/literal 2) (ir/literal 3))) :=\r\n  `(peer 0 [] 0 0 0 0 0 0\r\n     (fn [~'-frame ~'-vars]\r\n       (latest-apply '{::ir/op    ::ir/global\r\n                       ::dbg/type :apply\r\n                       ::dbg/name ~'clojure.core/+}\r\n         (pure ~'clojure.core/+)\r\n         (pure '2)\r\n         (pure '3))))\r\n\r\n  (emit nil\r\n    (ir/pub (ir/literal 1)\r\n      (ir/apply (ir/global :clojure.core/+)\r\n        (ir/sub 1)\r\n        (ir/literal 2)))) :=\r\n  `(peer 0 [] 0 0 0 0 0 0\r\n     (fn [~'-frame ~'-vars]\r\n       (let [~'-pub-0 (signal (pure '1))]\r\n         (latest-apply '{::ir/op    ::ir/global\r\n                         ::dbg/type :apply\r\n                         ::dbg/name ~'clojure.core/+}\r\n           (pure ~'clojure.core/+) ~'-pub-0 (pure '2)))))\r\n\r\n  (emit nil\r\n    (ir/variable\r\n      (ir/global :missionary.core/none))) :=\r\n  `(peer 0 [] 1 0 0 0 0 0\r\n     (fn [~'-frame ~'-vars]\r\n       (variable ~'-frame ~'-vars 0 0 (pure m/none))))\r\n\r\n  (emit nil (ir/input [])) :=\r\n  `(peer 0 [] 0 0 0 0 0 1\r\n     (fn [~'-frame ~'-vars]\r\n       (input-spawn ~'-frame 0 [])))\r\n\r\n  (emit nil (ir/constant\r\n              (ir/literal :foo))) :=\r\n  `(peer 0 [] 0 0 1 0 0 0\r\n     (fn [~'-frame ~'-vars]\r\n       (constant ~'-frame 0\r\n         (constructor [] [] 0 0 0 0 0 0\r\n           (fn [~'-frame ~'-vars]\r\n             (check-failure '{::ir/op ::ir/constant}\r\n               (pure ':foo)))))))\r\n\r\n  (emit nil\r\n    (ir/variable\r\n      (ir/pub (ir/constant (ir/literal 3))\r\n        (ir/pub (ir/constant (ir/input []))\r\n          (ir/apply\r\n            (ir/apply (ir/global :clojure.core/hash-map)\r\n              (ir/literal 2) (ir/sub 2)\r\n              (ir/literal 4) (ir/sub 1)\r\n              (ir/literal 5) (ir/sub 1))\r\n            (ir/literal 1) (ir/constant (ir/literal 7)))))))\r\n  `(peer 0 [] 1 0 3 0 0 0\r\n     (fn [~'-frame ~'-vars]\r\n       (variable ~'-frame ~'-vars 0 0\r\n         (let [~'-pub-0 (signal\r\n                          (constant ~'-frame 0\r\n                            (constructor [] [] 0 0 0 0 0 0\r\n                              (fn [~'-frame ~'-vars]\r\n                                (check-failure 'nil (pure '3))))))]\r\n           (let [~'-pub-1 (signal\r\n                            (constant ~'-frame 1\r\n                              (constructor [] [] 0 0 0 0 0 1\r\n                                (fn [~'-frame ~'-vars]\r\n                                  (check-failure 'nil (input-spawn ~'-frame 0 []))))))]\r\n             (latest-apply '{::dbg/type :unknown-apply, ; FIXME remove this debug noise\r\n                             :op\r\n                             [:apply\r\n                              [:global :clojure.core/hash-map nil]\r\n                              [:literal 2]\r\n                              [:sub 2]\r\n                              [:literal 4]\r\n                              [:sub 1]\r\n                              [:literal 5]\r\n                              [:sub 1]]}\r\n               (latest-apply '{::ir/op ::ir/global\r\n                               ::dbg/type :apply,\r\n                               ::dbg/name clojure.core/hash-map}\r\n                 (pure hash-map)\r\n                 (pure '2) ~'-pub-0\r\n                 (pure '4) ~'-pub-1\r\n                 (pure '5) ~'-pub-1)\r\n               (pure '1)\r\n               (constant ~'-frame 2\r\n                 (constructor [] [] 0 0 0 0 0 0\r\n                   (fn [~'-frame ~'-vars]\r\n                     (check-failure 'nil (pure '7)))))))))))\r\n\r\n  (emit nil (ir/inject 0)) :=\r\n  `(peer 1 [] 0 0 0 0 0 0\r\n     (fn [~'-frame ~'-vars]\r\n       (pure (inject 0))))\r\n\r\n  (emit nil\r\n    (ir/pub (ir/literal nil)\r\n      (ir/constant (ir/sub 1)))) :=\r\n  `(peer 0 [] 0 0 1 0 0 0\r\n     (fn [~'-frame ~'-vars]\r\n       (let [~'-pub-0 (signal (pure 'nil))]\r\n         (constant ~'-frame 0\r\n           (constructor [~'-pub-0] [] 0 0 0 0 0 0\r\n             (fn [~'-frame ~'-vars]\r\n               (check-failure '{::ir/op ::ir/constant}\r\n                 (static ~'-frame 0)))))))))\r\n\r\n(defn juxt-with ;;juxt = juxt-with vector, juxt-with f & gs = apply f (apply juxt gs)\r\n  ([f]\r\n   (fn\r\n     ([] (f))\r\n     ([a] (f))\r\n     ([a b] (f))\r\n     ([a b c] (f))\r\n     ([a b c & ds] (f))))\r\n  ([f g]\r\n   (fn\r\n     ([] (f (g)))\r\n     ([a] (f (g a)))\r\n     ([a b] (f (g a b)))\r\n     ([a b c] (f (g a b c)))\r\n     ([a b c & ds] (f (apply g a b c ds)))))\r\n  ([f g h]\r\n   (fn\r\n     ([] (f (g) (h)))\r\n     ([a] (f (g a) (h a)))\r\n     ([a b] (f (g a b) (h a b)))\r\n     ([a b c] (f (g a b c) (h a b c)))\r\n     ([a b c & ds] (f (apply g a b c ds) (apply h a b c ds)))))\r\n  ([f g h i]\r\n   (fn\r\n     ([] (f (g) (h) (i)))\r\n     ([a] (f (g a) (h a) (i a)))\r\n     ([a b] (f (g a b) (h a b) (i a b)))\r\n     ([a b c] (f (g a b c) (h a b c) (i a b c)))\r\n     ([a b c & ds] (f (apply g a b c ds) (apply h a b c ds) (apply i a b c ds)))))\r\n  ([f g h i & js]\r\n   (fn\r\n     ([] (apply f (g) (h) (i) (map #(%) js)))\r\n     ([a] (apply f (g a) (h a) (i a) (map #(% a) js)))\r\n     ([a b] (apply f (g a b) (h a b) (i a b) (map #(% a b) js)))\r\n     ([a b c] (apply f (g a b c) (h a b c) (i a b c) (map #(% a b c) js)))\r\n     ([a b c & ds] (apply f (apply g a b c ds) (apply h a b c ds) (apply i a b c ds) (map #(apply % a b c ds) js))))))\r\n\r\n(defn globals [program]\r\n  (->> (tree-seq coll? seq program)\r\n       (eduction (comp (filter vector?)\r\n                       (filter (fn [[a _]] (= :global a)))\r\n                       (map second)\r\n                       (distinct)))\r\n       (sort-by (juxt namespace name))))\r\n\r\n(defn missing-exports [resolvef program]\r\n  (->> (globals program)\r\n    (eduction (map (juxt (partial resolvef ::not-found) identity))\r\n      (filter #(= ::not-found (first %)))\r\n      (map second)\r\n      (map symbol))))\r\n\r\n(defn dynamic-resolve [nf x]\r\n  ;; For an Electric Clojure program to run, the server program must be loaded.\r\n  ;; Multiple approaches:\r\n  ;; - bootstrap server, eagerly loading namespaces on server JVM process start (current choice),\r\n  ;; - lazy load namespaces on client request (requires CORS rules),\r\n  ;; - precompile and lazy load server program on client request - server program is uniquely identified.\r\n  #?(:clj (try (clojure.core/eval (symbol x)) ; find a java class or static field (e.g. PersistentArrayMap/EMPTY)\r\n               (catch clojure.lang.Compiler$CompilerException _ nf))\r\n     :cljs nf))\r\n\r\n(defn eval\r\n  ([inst] (eval dynamic-resolve inst))\r\n  ([resolvef inst]\r\n   (compile inst\r\n     {:nop      (constantly nil)\r\n      ;; FIXME Eval is a security hazard, client should not send any program to\r\n      ;;       eval on server. Solution is for server to compile and store\r\n      ;;       programs, client address them by unique name (hash).\r\n      :eval     (fn [form ns]\r\n                  (if-some [ns (some-> ns find-ns)]\r\n                    (constantly (pure (binding [*ns* ns] (clojure.core/eval form))))\r\n                    (constantly (pure (clojure.core/eval form)))))\r\n      :do       (fn [deps inst]\r\n                  (fn [pubs frame vars]\r\n                    (do (make-input frame (mapv (fn [inst] (inst pubs frame vars)) deps))\r\n                        (inst pubs frame vars))))\r\n      :sub      (fn [idx]\r\n                  (fn [pubs frame vars]\r\n                    (nth pubs idx)))\r\n      :pub      (fn [form cont _]\r\n                  (fn [pubs frame vars]\r\n                    (cont (conj pubs (signal (form pubs frame vars))) frame vars)))\r\n      :lift     (fn [form]\r\n                  (fn [pubs frame vars]\r\n                    (pure (form pubs frame vars))))\r\n      :vget     (fn [slot]\r\n                  (fn [pubs frame ^objects vars]\r\n                    (aget vars (int slot))))\r\n      :static   (fn [slot]\r\n                  (fn [pubs frame vars]\r\n                    (static frame slot)))\r\n      :dynamic  (fn [slot debug-info]\r\n                  (fn [pubs frame vars]\r\n                    (dynamic frame slot debug-info)))\r\n      :bind     (fn [form slot s]\r\n                  (fn [pubs frame ^objects vars]\r\n                    (let [prev (aget vars (int slot))]\r\n                      (aset vars (int slot) (nth pubs s))\r\n                      (let [res (form pubs frame vars)]\r\n                        (aset vars (int slot) prev) res))))\r\n      :invoke   (fn [debug-info & forms] (apply juxt-with (partial latest-apply debug-info) forms))\r\n      :input    (fn [deps slot]\r\n                  (fn [pubs frame vars]\r\n                    (input-spawn frame slot\r\n                      (mapv (fn [inst] (inst pubs frame vars)) deps))))\r\n      :output   (fn [debug-info form slot]\r\n                  (fn [pubs frame vars]\r\n                    (make-output slot (check-failure debug-info (form pubs frame vars)))))\r\n      :global   (fn [x]\r\n                  (let [r (resolvef ::not-found x)]\r\n                    (case r\r\n                      ::not-found (throw (ex-info (str \"Unable to resolve symbol: \" (symbol x)) {}))\r\n                      (constantly (pure r)))))\r\n      :literal  (fn [x] (constantly (pure x)))\r\n      :inject   (fn [slot] (constantly (pure (inject slot))))\r\n      :variable (fn [form remote slot]\r\n                  (fn [pubs frame vars]\r\n                    (variable frame vars (+ remote slot) slot\r\n                      (form pubs frame vars))))\r\n      :source   (fn [remote slot]\r\n                  (fn [pubs frame vars]\r\n                    (source frame vars (+ remote slot) slot)))\r\n      :constant (fn [debug-info form static dynamic variable-count source-count constant-count target-count output-count input-count slot]\r\n                  (fn [pubs frame vars]\r\n                    (constant frame slot\r\n                      (constructor (mapv pubs static) dynamic variable-count source-count constant-count target-count output-count input-count\r\n                        (fn [& args]\r\n                          (check-failure debug-info (apply form pubs args)))))))\r\n      :target   (fn [deps static dynamic variable-count source-count constant-count target-count output-count input-count slot]\r\n                  (fn [pubs frame vars]\r\n                    (target frame slot\r\n                      (constructor (mapv pubs static) dynamic variable-count source-count constant-count target-count output-count input-count\r\n                        (fn [frame vars] (make-input frame (mapv (fn [inst] (inst pubs frame vars)) deps)))))))\r\n      :main     (fn [form var-count dynamic variable-count source-count constant-count target-count output-count input-count]\r\n                  (peer var-count dynamic\r\n                    variable-count source-count\r\n                    constant-count target-count\r\n                    output-count input-count\r\n                    (partial form [])))})))\r\n\r\n\r\n\r\n;; TESTS\r\n\r\n(defn queue []\r\n  #?(:clj  (let [q (java.util.LinkedList.)]\r\n             (fn\r\n               ([] (.remove q))\r\n               ([x] (.add q x) x)))\r\n     :cljs (let [q (object-array 0)]\r\n             (fn\r\n               ([]\r\n                (when (zero? (alength q))\r\n                  (throw (js/Error. \"No such element.\")))\r\n                (.shift q))\r\n               ([x] (.push q x) x)))))\r\n\r\n(tests\r\n  \"uncaught exception crash\"\r\n  (let [q (queue)\r\n        !x (atom true)\r\n        c (((eval (ir/apply (ir/literal q)\r\n                    (ir/apply (ir/literal #(when-not % (throw (ex-info \"boom\" {}))))\r\n                      (ir/variable (ir/literal (m/watch !x))))))\r\n            (fn [x] (q x) (fn [s _] (q #(s nil)) #()))\r\n            (fn [!] (q !) #())\r\n            (fn [e] (throw e)))\r\n           q q)]\r\n    (q) := nil\r\n    (q)\r\n    (swap! !x not)\r\n    (ex-message (q)) := \"boom\"))\r\n\r\n(tests\r\n  \"simple input\"\r\n  (let [q (queue)\r\n        c (((eval (ir/input []))\r\n            (fn [x] (q [::write x]) (fn [s _] (q [::backpressure #(s nil)]) #()))\r\n            (fn [!] (q [::read !]) #()) ; reader subject\r\n            (fn [e] (q [::error e])))\r\n           q q)]\r\n    (q) := [::error (Pending.)] ; input starts Pending (a failure state)\r\n    (let [[_read !] (q)]        ; on boot, reactor calls the reader subject\r\n      (! (update empty-event :change assoc [0 0] :a)) ; simulate incomming message: assign value :a to frame 0 (root), port 0 (input)\r\n      (q) := [::write (update empty-event :acks inc)]   ; reactor acknowledges by sending a message\r\n      (let [[_backpressure ack] (q)] (ack))             ; manualy simulate backpressure\r\n      (! (update empty-event :change assoc [0 0] :b)) ; simulate incomming message: assign value :b to frame 0 (root), port 0 (input)\r\n      (q) := [::write (update empty-event :acks inc)]   ; reactor acknowledges by sending a message\r\n      (let [[_backpressure ack] (q)] (ack))             ; manualy simulate backpressure\r\n      (c)                                             ; terminate reactor\r\n      (type (q)) := Cancelled)))\r\n\r\n(tests\r\n  \"Fast changes to simulate backpressure\"\r\n  (let [q (queue)\r\n        c (((eval (ir/input []))\r\n            (fn [x] (q [::write x]) (fn [s _] (q [::backpressure #(s nil)]) #()))\r\n            (fn [!] (q [::read !]) #()) ; reader subject\r\n            (fn [e] (q [::error e])))\r\n           q q)]\r\n    (q) := [::error (Pending.)] ; input starts Pending (a failure state)\r\n    (let [[_read !] (q)]        ; on boot, reactor calls the reader subject\r\n      (! (update empty-event :change assoc [0 0] :a)) ; simulate 4 incomming messages\r\n      (! (update empty-event :change assoc [0 0] :b))\r\n      (! (update empty-event :change assoc [0 0] :c))\r\n      (! (update empty-event :change assoc [0 0] :d))\r\n      (q) := [::write (assoc empty-event :acks 1)] ; There is room in the write buffer, reactor acknowledges by sending a message immediatly\r\n      (let [[_backpressure ack] (q)] (ack))        ; manualy simulate backpressure\r\n      ;; We expect to see :acks 1, then :acks 3 (total 4). But because of an\r\n      ;; implementation detail there still room in the buffer. We therefore see\r\n      ;; another :acks 1.\r\n      (q) := [::write (assoc empty-event :acks 1)]\r\n      (let [[_backpressure ack] (q)] (ack))        ; manualy simulate backpressure\r\n      (q) := [::write (assoc empty-event :acks 2)] ; Acks are accumulated till there is room in the write buffer - total acks count = 4\r\n      (let [[_backpressure ack] (q)] (ack))        ; manualy simulate backpressure\r\n      (c)                                        ; terminate reactor\r\n      (type (q)) := Cancelled)))\r\n\r\n(tests\r\n  '(tap (p/server (new (:hyperfiddle.electric.impl.compiler/closure (p/client 1)))))\r\n\r\n  (let [q (queue)\r\n        c (((eval (ir/apply (ir/literal q)\r\n                    (ir/input [(ir/target [(ir/output (ir/literal 1))])\r\n                               ir/source])))\r\n            (fn write-to-network [x] (q x) (fn [s _] (q #(s nil)) #()))\r\n            (fn read-subject [!] (q !) #())\r\n            (fn error-handler [e] (q e)))\r\n           q q)]\r\n    (q) := (Pending.)\r\n    (let [! (q)]\r\n      \"client recieves event\"\r\n      (! (assoc empty-event\r\n           :tree [{:op :create, :target [0 0], :source [0 0]}]\r\n           :change {[0 0] pending}))\r\n      (q) := (assoc empty-event\r\n               :acks 1                ; 1 means whole changeset\r\n               :change {[1 0] 1}      ; output of `(p/client 1)`, frame 1 slot 0\r\n               :freeze #{[1 0]}) ; the port won't change anymore, remote can terminate it\r\n      ((q))                      ; trigger backpressure\r\n      (! (assoc empty-event\r\n           :acks 1                      ; remote acknowledged our changeset\r\n           :change {[0 0] 1}))          ; port 0 of frame 0 = 1\r\n      (q) := 1\r\n      (q) := (assoc empty-event :acks 1)\r\n      ((q))\r\n      ;; frame -1 -> negative sign means it is server's frame\r\n      ;; it is moving from position 0 to 0, which is interpreted as remove\r\n      ;; we're terminating the frame because its port is frozen\r\n      ;; `:op :remove` is legacy, will be removed in future\r\n      (! (assoc empty-event :tree [{:op :rotate, :frame -1, :position 0} {:op :remove, :frame -1}]))))\r\n\r\n  (let [q (queue)\r\n        c (((eval (ir/do [(ir/output\r\n                            (ir/pub (ir/constant (ir/input []))\r\n                              (ir/apply (ir/literal {})\r\n                                (ir/sub 1)\r\n                                (ir/pub (ir/literal 0) ; bind %arity\r\n                                  (ir/apply (ir/literal {})\r\n                                    (ir/sub 1)\r\n                                    (ir/bind 0 1 (ir/variable (ir/sub 2))))))))]\r\n                         ir/nop))\r\n            (fn [x] (q x) (fn [s _] (q #(s nil)) #()))\r\n            (fn [!] (q !) #())\r\n            (fn [e] (q e)))\r\n           q q)]\r\n    \"server sends event, frame got created, output is pending\"\r\n    (q) := (assoc empty-event\r\n             :tree [{:op :create, :target [0 0], :source [0 0]}] ; create child frame (root frame, tier 0)\r\n             :change {[0 0] pending})                            ; root frame input 0 = pending\r\n    ;; (events\r\n    ;;   (create-frame :target {:frame 0 :slot 0} :source {:frame 0 :slot 0})\r\n    ;;   (set-input :frame 0 :slot 0 :value pending))\r\n\r\n    ((q))\r\n    (let [! (q)]\r\n      (! (assoc empty-event\r\n           :acks 1\r\n           :change {[1 0] 1}\r\n           :freeze #{[1 0]}))\r\n      (q) := (assoc empty-event\r\n               :acks 1\r\n               :change {[0 0] 1})\r\n      ((q))\r\n      (! (assoc empty-event :acks 1))\r\n      (q) := (assoc empty-event :tree [{:op :rotate, :frame -1, :position 0} {:op :remove, :frame -1}])\r\n      ((q)))))\r\n\r\n(tests\r\n  \"d-glitch\"\r\n  (let [q (queue)\r\n        !x (atom 1)\r\n        c (((eval (ir/apply (ir/literal q) (ir/input [(ir/output (ir/variable (ir/literal (m/watch !x))))])))\r\n            (fn [x] (q x) (fn [s _] (q #(s nil)) #()))\r\n            (fn [!] (q !) #())\r\n            (fn [e] (q e)))\r\n           q q)]\r\n    (q) := (Pending.)                                       ;; input is initially pending\r\n    (q) := (assoc empty-event :change {[0 0] 1})            ;; output state 1 is published\r\n    ((q))                                                   ;; backpressure\r\n    (let [! (q)]                                            ;; get callback\r\n      (! (assoc empty-event :acks 1))                       ;; ack previous changeset\r\n      (! (assoc empty-event :change {[0 0] :a}))            ;; input state changes to :a\r\n      (q) := :a                                             ;; main result is sampled\r\n      (q) := (assoc empty-event :acks 1)                    ;; changeset is acked\r\n      ((q))                                                 ;; backpressure\r\n      (swap! !x inc)                                        ;; input is invalidated due to its dep on output (d-glitch)\r\n      (q) := (Pending.)                                     ;; main result is sampled\r\n      (q) := (assoc empty-event :change {[0 0] 2})          ;; output state 2 is published\r\n      ((q))                                                 ;; backpressure\r\n      (! (assoc empty-event :acks 1))                       ;; ack previous changeset, previous input state is restored\r\n      (q) := :a                                             ;; main result is sampled\r\n      )))\r\n\r\n;; Leo: write a test for the infinite loop bug https://github.com/hyperfiddle/electric/commit/2894b3e23e4406c0d9fed4944b2cb553ad28804a\r\n;; (p/client (let [x (p/watch !x)] (p/server x x) (reset! !x nil))) ; two xs\r\n(tests \"infinite loop bug\"\r\n  (let [q (queue)\r\n        !x (atom 1)\r\n        c (((eval (ir/apply (ir/literal q)\r\n                    (ir/pub (ir/variable (ir/literal (m/watch !x)))\r\n                      (ir/input [(ir/output (ir/sub 1)) (ir/output (ir/sub 1))]))))\r\n            (fn [x] (q x) (fn [s _] (q #(s nil)) #()))\r\n            (fn [!] (q !) #())\r\n            (fn [e] (q e)))\r\n           q q)]\r\n    (q) := (Pending.)                            ; input is initially pending\r\n    (q) := (assoc empty-event\r\n             :change {[0 0] 1, [0 1] 1})         ; this is sent for `(p/server x x)`\r\n    ((q))                                        ; backpressure\r\n    (let [! (q)]                                 ; get callback\r\n      (swap! !x inc)\r\n      ;; this caused an infinite loop before fixing the bug in algo\r\n      (q) := (assoc empty-event\r\n               :change {[0 0] 2, [0 1] 2}) ; new value for the ports, but the previous wasn't ackd yet\r\n      ((q))\r\n      (! (assoc empty-event\r\n           :acks 1\r\n           :change {[0 0] :foo}))        ; still pending, the 2s are not acked yet\r\n      (q) := (assoc empty-event :acks 1) ; send ack to server for the :foo\r\n      ((q))\r\n      (! (assoc empty-event :acks 1))   ; now the client\r\n      (q) := :foo\r\n      )))\r\n\r\n(tests \"FailureInfo equality\"\r\n  (let [q (queue)\r\n        c (((eval (ir/do [(ir/output (ir/input [ir/source]))] ir/nop))\r\n            (fn [x] (q x) (fn [s _] (q #(s nil)) #()))\r\n            (fn [!] (q !) #())\r\n            (fn [e] (q e)))\r\n           q q)]\r\n    (q) := (assoc empty-event :change {[0 0] (Failure. (Pending.))})\r\n    ((q))\r\n    (let [! (q)]\r\n      (! (assoc empty-event\r\n           :change {[0 0] (Failure. (dbg/ex-info* \"0\" {} \"f0f38709-0191-45b7-85e9-1266abb467df\" nil))}))\r\n      (q) := {:acks 1, :tree [], :change {[0 0] _}, :freeze #{}}\r\n      ((q))\r\n\r\n      (! (assoc empty-event\r\n           :change {[0 0] (Failure. (dbg/ex-info* \"1\" {} \"064710fe-35bb-4dc6-bfdf-667702434acd\" nil))}))\r\n      (q) := {:acks 1, :tree [], :change {}, :freeze #{}}\r\n      ((q))\r\n      )))\r\n"]}