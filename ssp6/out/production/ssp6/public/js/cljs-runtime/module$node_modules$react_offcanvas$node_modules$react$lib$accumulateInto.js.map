{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$accumulateInto.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,yEAAA,CAA8F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CActI,IAAIC,UAAYH,OAAA,CAAQ,wCAAR,CA6ChBC,OAAOC,CAAAA,OAAP,CA7BAE,QAAuB,CAACC,OAAD,CAAUC,IAAV,CAAgB,CAC3B,IAAV,EAAEA,IAAF,CAA0DH,SAAA,CAAU,CAAA,CAAV,CAAiB,uEAAjB,CAA1D,CAAyKI,IAAAA,EACzK,IAAe,IAAf,EAAIF,OAAJ,CACE,MAAOC,KAKT,KAAIE,eAAiBC,KAAMC,CAAAA,OAAN,CAAcL,OAAd,CAArB,CACIM,YAAcF,KAAMC,CAAAA,OAAN,CAAcJ,IAAd,CAElB,OAAIE,eAAJ,EAAsBG,WAAtB,EACEN,OAAQO,CAAAA,IAAKC,CAAAA,KAAb,CAAmBR,OAAnB;AAA4BC,IAA5B,CACOD,CAAAA,OAFT,EAKIG,cAAJ,EACEH,OAAQO,CAAAA,IAAR,CAAaN,IAAb,CACOD,CAAAA,OAFT,EAKIM,WAAJ,CAES,CAACN,OAAD,CAAUS,CAAAA,MAAV,CAAiBR,IAAjB,CAFT,CAKO,CAACD,OAAD,CAAUC,IAAV,CA1B8B,CA9B+F;",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/accumulateInto.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$accumulateInto\"] = function(global,require,module,exports) {\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule accumulateInto\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n *\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto(current, next) {\n  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  var currentIsArray = Array.isArray(current);\n  var nextIsArray = Array.isArray(next);\n\n  if (currentIsArray && nextIsArray) {\n    current.push.apply(current, next);\n    return current;\n  }\n\n  if (currentIsArray) {\n    current.push(next);\n    return current;\n  }\n\n  if (nextIsArray) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\nmodule.exports = accumulateInto;\n};"],
"names":["shadow$provide","global","require","module","exports","invariant","accumulateInto","current","next","undefined","currentIsArray","Array","isArray","nextIsArray","push","apply","concat"]
}
