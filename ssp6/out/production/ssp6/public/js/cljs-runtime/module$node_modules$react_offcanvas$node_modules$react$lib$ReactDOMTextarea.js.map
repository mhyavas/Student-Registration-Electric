{
"version":3,
"file":"module$node_modules$react_offcanvas$node_modules$react$lib$ReactDOMTextarea.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/react-offcanvas/node_modules/react/lib/ReactDOMTextarea.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_offcanvas$node_modules$react$lib$ReactDOMTextarea\"] = function(global,require,module,exports) {\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextarea\n */\n\n'use strict';\n\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMTextarea.updateWrapper(this);\n  }\n}\n\n/**\n * Implements a <textarea> native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea = {\n  getNativeProps: function (inst, props, context) {\n    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n    var nativeProps = assign({}, props, {\n      defaultValue: undefined,\n      value: undefined,\n      children: inst._wrapperState.initialValue,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return nativeProps;\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);\n    }\n\n    var defaultValue = props.defaultValue;\n    // TODO (yungsters): Remove support for children content in <textarea>.\n    var children = props.children;\n    if (children != null) {\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;\n      }\n      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;\n      if (Array.isArray(children)) {\n        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    var value = LinkedValueUtils.getValue(props);\n\n    inst._wrapperState = {\n      // We save the initial value so that `ReactDOMComponent` doesn't update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that's why it's\n      // forced to be a string.\n      initialValue: '' + (value != null ? value : defaultValue),\n      onChange: _handleChange.bind(inst)\n    };\n  },\n\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n  return returnValue;\n}\n\nmodule.exports = ReactDOMTextarea;\n};"],
"names":["shadow$provide","global","require","module","exports","forceUpdateIfMounted","_rootNodeID","ReactDOMTextarea","updateWrapper","_handleChange","event","returnValue","LinkedValueUtils","executeOnChange","_currentElement","props","ReactUpdates","asap","ReactDOMIDOperations","assign","invariant","warning","getNativeProps","inst","context","dangerouslySetInnerHTML","undefined","nativeProps","defaultValue","value","children","_wrapperState","initialValue","onChange","mountWrapper","checkPropTypes","_owner","Array","isArray","length","getValue","bind","updatePropertyByID"]
}
