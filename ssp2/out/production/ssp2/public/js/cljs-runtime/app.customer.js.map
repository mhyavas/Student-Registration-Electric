{"version":3,"sources":["app/customer.cljc"],"mappings":";;;;AAgBA,AACA,AAEA,AAAKA,mCAAe,6CAAA,2CAAA,2DAAA,2CAAA,sDAAA,GAAA,0DAAA,6DAAA,mEAAA,GAAA,oEAAA,GAAA,sDAAA,iCAAA,6DAAA,WAAA,6EAAA,vuBAACC;AASrB,iCAAA,jCAAMC,0EAAcC;AAApB,AACE,8GAAA,mFAAA,1LAACC,mDAAMJ,iCAAeK,2LAA6BF;;AACrD,uCAAA,vCAAMG,sFAAoBC;AAA1B,AACE,8GAAA,mFAAA,2DAAA,rPAACH,mDAAMJ,iCAAeK,+NAA2BE;;AACnD,6CAAA,7CAAMC,kGAA0BC;AAAhC,AACE,8GAAA,mFAAA,2DAAA,rPAACL,mDAAMJ,iCAAeK,6OAAiCI;;AAEzD,uCAAA,vCAAMC,sFAAoBC;AAA1B,AACE,8GAAA,mFAAA,2DAAA,rPAACP,mDAAMJ,iCAAeK,+NAA2BM;;AACnD,+BAAA,/BAAMC,sEAAYD;AAAlB,AACE,8GAAA,mFAAA,1LAACP,mDAAMJ,iCAAeK,oKAAkBM;;AAC1C,AAqBA,AAuCA,AAmDA,AAmBA,AAkBA,AAAKE,4BAAa,wEAAA,2CAAA,4DAAA,2CAAA,AAAA,1NAACC,gDAAQC,mPACoCC;AAG/D","names":["app.customer/!state-project","cljs.core.atom","app.customer/set-company!","name","cljs.core.swap_BANG_","cljs.core/assoc-in","app.customer/set-project-title!","title","app.customer/set-project-description!","description","app.customer/set-project-types!","types","app.customer/set-types!","app.customer/read-edn-str","cljs.core.partial","clojure.edn/read-string","app.customer.goog$module$goog$math$Long.fromString"],"sourcesContent":["(ns app.customer\r\n  #?(:cljs (:import [goog.math Long]))\r\n  (:require\r\n    [hyperfiddle.electric :as e]\r\n    [hyperfiddle.electric-dom2 :as dom]\r\n    [hyperfiddle.electric-ui4 :as ui]\r\n    [hyperfiddle.history :as history]\r\n    [hyperfiddle.electric-ui4 :as ui4]\r\n    clojure.string\r\n    clojure.core\r\n    #?(:clj [datomic.client.api :as dt])))\r\n\r\n;todo Proposal icin deadline kismi eklenecek\r\n;todo Proje icin author kismi eklenecek\r\n;todo\r\n\r\n(e/def conn)\r\n(e/def db)\r\n\r\n(def !state-project (atom {:project          {:title       \"\"\r\n                                              :status      :inactive\r\n                                              :create-date \"\"\r\n                                              :description \"\"\r\n                                              :types       []\r\n                                              :customer    \"\"}\r\n                           :selected-company \"\"}))\r\n\r\n\r\n(defn set-company! [name]\r\n  (swap! !state-project assoc-in [:selected-company] name))\r\n(defn set-project-title! [title]\r\n  (swap! !state-project assoc-in [:project :title] title))\r\n(defn set-project-description! [description]\r\n  (swap! !state-project assoc-in [:project :description] description))\r\n\r\n(defn set-project-types! [types]\r\n  (swap! !state-project assoc-in [:project :types] types))\r\n(defn set-types! [types]\r\n  (swap! !state-project assoc-in [:types] types))\r\n(e/defn Main []\r\n         (e/server\r\n           (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n             (binding [db (dt/db conn)]\r\n               (e/client\r\n                 (dom/h2 (dom/text \"Please Select Your Company\"))\r\n                 (dom/text (e/server (quot (System/currentTimeMillis) 1000))) ; Timestamp in seconds.\r\n                 ; todo Change the datomic schema for create_date\r\n                 #_(set-types! (e/server (map (fn [i] {:name i :status :inactive} ) (flatten (dt/q '[:find ?name\r\n                                                                                                     :where [?e :type/id _]\r\n                                                                                                     [?e :type/name ?name]] db)))))\r\n\r\n                 #_(dom/text (str (.toLocaleDateString (js/Date.))))\r\n                 (dom/div\r\n                   (dom/table\r\n                     (dom/th (dom/text \"Name\"))\r\n                     (e/for [value (e/server (dt/q '[:find (pull ?e [*])\r\n                                                     :where [?e :customer/id _]] db))]\r\n                            (dom/tr\r\n                              (dom/td (history/link [::customer (:customer/name (first value))] (dom/text (:customer/name (first value))))))))))))))\r\n\r\n(e/defn CreateProject [name]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n           (e/client\r\n             (dom/h2 (dom/text \"Creating a Project for \" name))\r\n             (dom/div\r\n               (let [state (e/watch !state-project)]\r\n                 (let [project (:project state)]\r\n                   (dom/text state)\r\n                   (dom/div\r\n                     (dom/span (dom/text \"Title: \"))\r\n                     (ui4/input (:title project) (e/fn [v] (set-project-title! v)))\r\n                     (dom/span (dom/text \"Description: \"))\r\n                     (ui4/input (:description project) (e/fn [v] (set-project-description! v)))\r\n\r\n                     (dom/div\r\n                       (dom/text project)\r\n                       (dom/span (dom/text \"Types: \"))\r\n                       (e/for [value (e/server (dt/q '[:find ?name\r\n                                                       :where [?e :type/name ?name]] (dt/db conn)))]\r\n                              (dom/label\r\n                                (dom/input (dom/props {:type  \"checkbox\"\r\n                                                       :name  (first value)\r\n                                                       :value \"true\"})\r\n                                           (dom/on \"change\" (e/fn [v]\r\n                                                              #_(apply (.-log js/console) (str (.-name dom/node) v))\r\n                                                              (if (and (.-checked dom/node) (not (some (partial = (str (.-name dom/node))) (:types project))))\r\n                                                                #_(swap! data update :nums conj {:first 1 :second 2})\r\n                                                                (swap! !state-project update-in [:project :types] conj (str (.-name dom/node)))\r\n                                                                (if (some (partial = (str (.-name dom/node))) (:types project))\r\n                                                                  (swap! !state-project update-in [:project :types] (fn [types] (vec (remove #(= (str (.-name dom/node)) %) types))))\r\n                                                                  nil)))))\r\n\r\n                                (dom/text (first value)))))))))))))\r\n\r\n\r\n\r\n\r\n\r\n(e/defn ProjectDetail [name]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n             (e/client\r\n               (dom/table (dom/props {:border \"1px\" \"solid\" \"black\"})\r\n                 (dom/th (dom/text \"Title\"))\r\n                 (dom/th (dom/text \"Status\"))\r\n                 (dom/th (dom/text \"Create Date\"))\r\n                 (dom/th (dom/text \"Description\"))\r\n                 (dom/th (dom/text \"Types\"))\r\n                 (dom/th (dom/text \"Winner\"))\r\n                 (dom/tr\r\n                   (dom/td (dom/text (:project/title name)))\r\n                   (dom/td (dom/text (:project/status name)))\r\n                   (dom/td (dom/text (:project/create_date name)))\r\n                   (dom/td (dom/text (:project/description name)))\r\n                   (dom/td (dom/text (e/server (flatten (map (fn [m] (flatten (dt/q '[:find ?name\r\n                                                                                      :in $ ?e\r\n                                                                                      :where [?e :type/name ?name]] db (:db/id m)))) (:project/types name))))))\r\n                   (dom/td (dom/text (e/server (ffirst (dt/q '[:find ?name\r\n                                                               :in $ ?e\r\n                                                               :where [?e :supplier/name ?name]] db (:db/id (first (:project/tender_winner name))))))))))\r\n               (dom/h3 (dom/text \"Proposals for this project\"))\r\n               (dom/table (dom/props {:border \"1px\" \"solid\" \"black\"})\r\n                (dom/th (dom/text \"Supplier\"))\r\n                (dom/th (dom/text \"Price ($)\"))\r\n                (dom/th (dom/text \"Timestamp\"))\r\n                (dom/th (dom/text \"Select\"))\r\n                (dom/tr\r\n                  (e/for [value (e/server (flatten (dt/q '[:find (pull ?m [*])\r\n                                                           :in $ ?title\r\n                                                           :where [?e :project/title ?title]\r\n                                                           [?m :proposal/project ?e]] db (:project/title name))))]\r\n                         (dom/td (dom/text (e/server (ffirst (dt/q '[:find ?name\r\n                                                                     :in $ ?id\r\n                                                                     :where [?id :supplier/name ?name]] db (:db/id (:proposal/supplier value)))))))\r\n                         (dom/td (dom/text (:proposal/price value)))\r\n                         (dom/td (dom/text (:proposal/timestamp value)))\r\n                         (dom/td (ui4/button (e/fn []\r\n                                                   (e/server (dt/transact conn {:tx-data [{:db/id (:db/id name)\r\n                                                                                           :project/status :active\r\n                                                                                           :project/tender_winner [(:proposal/supplier value)]}]}))) (dom/text \"Select\")))))))))))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n(e/defn CustomerMain [name]\r\n        (e/server\r\n          (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n            (binding [db (dt/db conn)]\r\n             (e/client\r\n               (set-company! name)\r\n               (dom/h2 (dom/text \"Main Page of \" name))\r\n               (dom/h3 (dom/text \"Projects\"))\r\n               (dom/table (dom/props {:border \"1px\" \"solid\" \"black\"})\r\n                 (dom/td (dom/text \"Project Name\"))\r\n                 (dom/td (dom/text \"Status\"))\r\n                (e/for [value (e/server (dt/q '[:find (pull ?e [*])\r\n                                                :in $ ?name\r\n                                                :where [?e :project/customer ?name]] db (ffirst (dt/q '[:find ?e :in $ ?name :where [?e :customer/name ?name]] db name))))]\r\n                       (dom/tr\r\n                         (dom/td (history/link [::project-detail (first value)] (dom/text (:project/title (first value)))))\r\n                         (dom/td (dom/text (:project/status (first value))))))))))))\r\n\r\n\r\n(e/defn Page [[page x]]\r\n        (e/client\r\n          (dom/link (dom/props {:rel :stylesheet, :href \"gridsheet-optional.css\"}))\r\n          (dom/div (dom/props {:class \"user-gridsheet-demo\"})\r\n                   (let [state (e/watch !state-project)]\r\n                     (dom/div (dom/text \"Nav:\")\r\n                              (history/link [::main] (dom/text \"Company Selection\")) (dom/text \" \")\r\n                              (history/link [::customer (:selected-company state)] (dom/text \"Customer Main\")) (dom/text \" \")\r\n                              (history/link [::create-project (:selected-company state)] (dom/text \"Create Project\")) (dom/text \" \")))\r\n\r\n\r\n\r\n                   (case page\r\n                     ::main (history/router 1 (e/server (Main.)))\r\n                     ::customer (history/router 2 (e/server (CustomerMain. x)))\r\n                     ::create-project (history/router 2 (e/server (CreateProject. x)))\r\n                     ::project-detail (history/router 2 (e/server (ProjectDetail. x)))\r\n                     (e/client (dom/text \"no matching route: \" (pr-str page)))))))\r\n(def read-edn-str (partial clojure.edn/read-string\r\n                           {:readers #?(:cljs {'goog.math/Long goog.math.Long/fromString} ; datomic cloud long ids\r\n                                        :clj {})}))\r\n\r\n(e/defn CustomerPage []\r\n        (e/client\r\n          (binding [dom/node js/document.body\r\n                    history/encode contrib.ednish/encode-uri\r\n                    history/decode #(or (contrib.ednish/decode-path % read-edn-str) [::main])]\r\n\r\n            (history/router (history/HTML5-History.)\r\n                            (dom/pre (dom/text (contrib.str/pprint-str history/route)))\r\n                            (e/server\r\n                              (e/client\r\n                                (Page. history/route)))))))\r\n"]}