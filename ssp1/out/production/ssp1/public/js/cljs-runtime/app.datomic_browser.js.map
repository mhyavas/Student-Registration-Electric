{"version":3,"sources":["app/datomic_browser.cljc"],"mappings":";;;;AAmBA,AACA,AACA,AAIA,AA0BA,AAgBA,AAcA,AA4BA,AAoBA,AAoBA,AAoBA,AAOA,AAMA,AAqBA,AAAKA,mCAAa,wEAAA,2CAAA,4DAAA,2CAAA,AAAA,1NAACC,gDAAQC,mPAC6BC;AAGxD,AAqBA","names":["app.datomic-browser/read-edn-str","cljs.core.partial","clojure.edn/read-string","app.datomic_browser.goog$module$goog$math$Long.fromString"],"sourcesContent":["(ns app.datomic-browser\r\n  \"must have datomic on classpath, and must load 'test ns\"\r\n  #?(:cljs (:import [goog.math Long])) ; only this require syntax passes shadow in this file, why?\r\n  (:require clojure.edn\r\n            contrib.ednish\r\n            [contrib.str :refer [any-matches?]]\r\n            [contrib.data :refer [unqualify treelister]]\r\n            #?(:clj [contrib.datomic-contrib :as dx])\r\n            #?(:cljs contrib.datomic-cloud-contrib)\r\n            [contrib.datomic-m #?(:clj :as :cljs :as-alias) d]\r\n            [contrib.gridsheet :as gridsheet :refer [Explorer]]\r\n            [hyperfiddle.electric :as e]\r\n            [hyperfiddle.electric-dom2 :as dom]\r\n            [hyperfiddle.history :as history]\r\n            [missionary.core :as m]\r\n            #?(:clj [datomic.client.api :as dt])\r\n            app.customer\r\n            app.supplier))\r\n\r\n(e/def conn)\r\n(e/def db)\r\n(e/def schema)\r\n\r\n\r\n\r\n(e/defn Attributes []\r\n  (e/client (dom/h1 (dom/text \"Attributes\")))\r\n  (let [cols [:db/ident :db/valueType :db/cardinality :db/unique :db/isComponent\r\n              #_#_#_#_:db/fulltext :db/tupleType :db/tupleTypes :db/tupleAttrs]]\r\n    (Explorer.\r\n      (treelister (->> (dx/attributes> db cols)\r\n                    (m/reductions conj [])\r\n                    (m/relieve {})\r\n                    new\r\n                    (sort-by :db/ident)) ; sort by db/ident which isn't available\r\n        (fn [_]) any-matches?)\r\n      {::gridsheet/page-size 15\r\n       ::gridsheet/row-height 24\r\n       ::gridsheet/columns cols\r\n       ::gridsheet/grid-template-columns \"auto 6em 4em 4em 4em\"\r\n       ::gridsheet/Format\r\n       (e/fn [row col]\r\n         (e/client\r\n           (let [v (col row)]\r\n             (case col\r\n               :db/ident (history/link [::attribute v] (dom/text v))\r\n               :db/valueType (some-> v :db/ident name dom/text)\r\n               :db/cardinality (some-> v :db/ident name dom/text)\r\n               :db/unique (some-> v :db/ident name dom/text)\r\n               (dom/text (str v))))))})))\r\n\r\n(e/defn Format-entity [[k v :as row] col]\r\n  (assert (some? schema))\r\n  (case col\r\n    ::k (cond\r\n          (= :db/id k) (e/client (dom/text k)) ; :db/id is our schema extension, can't nav to it\r\n          (contains? schema k) (e/client (history/link [::attribute k] (dom/text k)))\r\n          () (e/client (dom/text (str k)))) ; str is needed for Long db/id, why?\r\n    ::v (if-not (coll? v) ; don't render card :many intermediate row\r\n          (let [[valueType cardinality]\r\n                ((juxt (comp unqualify dx/identify :db/valueType)\r\n                   (comp unqualify dx/identify :db/cardinality)) (k schema))]\r\n            (cond\r\n              (= :db/id k) (e/client (history/link [::entity v] (dom/text v)))\r\n              (= :ref valueType) (e/client (history/link [::entity v] (dom/text v)))\r\n              () (e/client (dom/text (pr-str v))))))))\r\n\r\n(e/defn EntityDetail [e]\r\n  (assert e)\r\n  (e/client (dom/h1 (dom/text \"Entity detail: \" e))) ; treeview on the entity\r\n  (Explorer.\r\n    ;; TODO inject sort\r\n    (treelister (new (e/task->cp (d/pull db {:eid e :selector ['*] :compare compare})))\r\n      (partial dx/entity-tree-entry-children schema)\r\n      any-matches?)\r\n    {::gridsheet/page-size 15\r\n     ::gridsheet/row-height 24\r\n     ::gridsheet/columns [::k ::v]\r\n     ::gridsheet/grid-template-columns \"15em auto\"\r\n     ::gridsheet/Format Format-entity}))\r\n\r\n(e/defn EntityHistory [e]\r\n  (assert e)\r\n  (e/client (dom/h1 (dom/text \"Entity history: \" (pr-str e))))\r\n  (Explorer.\r\n    ; accumulate what we've seen so far, for pagination. Gets a running count. Bad?\r\n    (treelister (new (->> (dx/entity-history-datoms> db e)\r\n                       (m/reductions conj []) ; track a running count as well?\r\n                       (m/relieve {})))\r\n      (fn [_]) any-matches?)\r\n    {::gridsheet/page-size 20\r\n     ::gridsheet/row-height 24\r\n     ::gridsheet/columns [::e ::a ::op ::v ::tx-instant ::tx]\r\n     ::gridsheet/grid-template-columns \"10em 10em 3em auto auto 9em\"\r\n     ::gridsheet/Format\r\n     (e/fn [[e aa v tx op :as row] a]\r\n       (when row ; when this view unmounts, somehow this fires as nil\r\n         (case a\r\n           ::op (e/client (dom/text (name (case op true :db/add false :db/retract))))\r\n           ::e (e/client (history/link [::entity e] (dom/text e)))\r\n           ::a (if (some? aa)\r\n                 (let [ident (:db/ident (new (e/task->cp (d/pull db {:eid aa :selector [:db/ident]}))))]\r\n                   (e/client (dom/text (pr-str ident)))))\r\n           ::v (e/client (some-> v pr-str dom/text))\r\n           ::tx (e/client (history/link [::tx tx] (dom/text tx)))\r\n           ::tx-instant (let [x (:db/txInstant (new (e/task->cp (d/pull db {:eid tx :selector [:db/txInstant]}))))]\r\n                          (e/client (pr-str (dom/text x))))\r\n           (str v))))}))\r\n\r\n(e/defn AttributeDetail [a]\r\n  (e/client (dom/h1 (dom/text \"Attribute detail: \" a)))\r\n  (Explorer.\r\n    (treelister (new (->> (d/datoms> db {:index :aevt, :components [a]})\r\n                       (m/reductions conj [])\r\n                       (m/relieve {})))\r\n      (fn [_]) any-matches?)\r\n    {::gridsheet/page-size 20\r\n     ::gridsheet/row-height 24\r\n     ::gridsheet/columns [:e :a :v :tx]\r\n     ::gridsheet/grid-template-columns \"15em 15em calc(100% - 15em - 15em - 9em) 9em\"\r\n     ::gridsheet/Format\r\n     (e/fn [[e _ v tx op :as x] k]\r\n       (e/client\r\n         (case k\r\n           :e (history/link [::entity e] (dom/text e))\r\n           :a (dom/text (pr-str a)) #_(let [aa (new (e/task->cp (dx/ident! db aa)))] aa)\r\n           :v (some-> v str dom/text) ; todo when a is ref, render link\r\n           :tx (history/link [::tx tx] (dom/text tx)))))}))\r\n\r\n(e/defn TxDetail [e]\r\n  (e/client (dom/h1 (dom/text \"Tx detail: \" e)))\r\n  (Explorer.\r\n    (treelister (new (->> (d/tx-range> conn {:start e, :end (inc e)}) ; global\r\n                       (m/eduction (map :data) cat)\r\n                       (m/reductions conj [])\r\n                       (m/relieve {})))\r\n      (fn [_]) any-matches?)\r\n    {::gridsheet/page-size 20\r\n     ::gridsheet/row-height 24\r\n     ::gridsheet/columns [:e :a :v :tx]\r\n     ::gridsheet/grid-template-columns \"15em 15em calc(100% - 15em - 15em - 9em) 9em\"\r\n     ::gridsheet/Format\r\n     (e/fn [[e aa v tx op :as x] a]\r\n       (case a\r\n         :e (let [e (new (e/task->cp (dx/ident! db e)))] (e/client (history/link [::entity e] (dom/text e))))\r\n         :a (let [aa (new (e/task->cp (dx/ident! db aa)))] (e/client (history/link [::attribute aa] (dom/text aa))))\r\n         :v (pr-str v) ; when a is ref, render link\r\n         (str tx)))}))\r\n\r\n(e/defn DbStats []\r\n  (e/client (dom/h1 (dom/text \"Db stats\")))\r\n  (Explorer.\r\n    (treelister\r\n      (new (e/task->cp (d/db-stats db)))\r\n      (fn [[k v]] (condp = k :attrs (into (sorted-map) v) nil))\r\n      any-matches?)\r\n    {::gridsheet/page-size 20\r\n     ::gridsheet/row-height 24\r\n     ::gridsheet/columns [::k ::v]\r\n     ::gridsheet/grid-template-columns \"20em auto\"\r\n     ::gridsheet/Format\r\n     (e/fn [[k v :as row] col]\r\n       (e/client\r\n         (case col\r\n           ::k (dom/text (pr-str k))\r\n           ::v (cond\r\n                 (= k :attrs) nil ; print children instead\r\n                 () (dom/text (pr-str v))))))})) ; {:count 123}\r\n\r\n(comment\r\n  {:datoms 800958,\r\n   :attrs\r\n   {:release/script {:count 11435},\r\n    :label/type {:count 870}\r\n    ... ...}})\r\n\r\n(e/defn Main []\r\n        (e/client\r\n          (dom/div\r\n            (history/link [::customer] (dom/text \"Customer Side\")))\r\n          (dom/div\r\n            (history/link [::supplier] (dom/text \"Supplier Side\")))))\r\n(e/defn Page [[page x]]\r\n  (dom/h1 (dom/text \"Software Sourcing Platform\"))\r\n  (dom/link (dom/props {:rel :stylesheet, :href \"gridsheet-optional.css\"}))\r\n  (dom/div (dom/props {:class \"user-gridsheet-demo\"})\r\n    (dom/div (dom/text \"Nav: \")\r\n      (history/link [::main] (dom/text \"home\")) (dom/text \" \")\r\n      (history/link [::db-stats] (dom/text \"db-stats\")) (dom/text \" \"))\r\n\r\n    (case page\r\n      ::summary (history/router 1 (e/server (Attributes.)))\r\n      ::attribute (history/router 2 (e/server (AttributeDetail. x)))\r\n      ::tx (history/router 2 (e/server (TxDetail. x)))\r\n      ::entity (do (history/router 2\r\n                     (history/router ::entity-detail (e/server (EntityDetail. x)))\r\n                     (history/router ::entity-history (e/server (EntityHistory. x)))))\r\n      ::db-stats (history/router 1 (e/server (DbStats.)))\r\n      ::main (history/router 1 (e/server (Main.)))\r\n      ::customer (history/router 1 (e/server (app.customer/Customer.)))\r\n      ::supplier (history/router 1 (e/server (app.supplier/Supplier.)))\r\n      (e/client (dom/text \"no matching route: \" (pr-str page))))))\r\n\r\n(def read-edn-str (partial clojure.edn/read-string\r\n                    {:readers #?(:cljs {'goog.math/Long goog.math.Long/fromString} ; datomic cloud long ids\r\n                                 :clj {})}))\r\n\r\n(e/defn DatomicBrowser []\r\n        (e/client\r\n          (binding [dom/node js/document.body\r\n                    history/encode contrib.ednish/encode-uri\r\n                    history/decode #(or (contrib.ednish/decode-path % read-edn-str) [::main])]\r\n\r\n            (history/router (history/HTML5-History.)\r\n              (set! (.-title js/document) (str (clojure.string/capitalize (name (first history/route)))\r\n                                            \" - Datomic Browser\"))\r\n              (dom/pre (dom/text (contrib.str/pprint-str history/route)))\r\n\r\n              (e/server\r\n                (binding [conn @(requiring-resolve 'user/datomic-conn)]\r\n\r\n                  (binding [db (dt/db conn)]\r\n                    (binding [schema (new (dx/schema> db))]\r\n                      (e/client\r\n                        (Page. history/route))))))))))\r\n\r\n\r\n\r\n(comment\r\n\r\n\r\n  ;end\r\n  ,)"]}